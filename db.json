{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/material/source/css/disqus-proxy.css","path":"css/disqus-proxy.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/disqus-proxy.min.css","path":"css/disqus-proxy.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.css","path":"css/duoshuo.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/duoshuo.min.css","path":"css/duoshuo.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/fontawesome.min.css","path":"css/fontawesome.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/gallery.min.css","path":"css/gallery.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/ie-blocker.css","path":"css/ie-blocker.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material-icons.css","path":"css/material-icons.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.css","path":"css/prettify.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify.min.css","path":"css/prettify.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/uc.css","path":"css/uc.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","path":"fonts/MaterialIcons-Regular.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","path":"fonts/MaterialIcons-Regular.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/avatar.png","path":"img/avatar.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/bg.png","path":"img/bg.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/browserstack_logo.png","path":"img/browserstack_logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/favicon.png","path":"img/favicon.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/logo.png","path":"img/logo.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/sidebar_header.png","path":"img/sidebar_header.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/upyun_logo.svg","path":"img/upyun_logo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/js/MathJax.js","path":"js/MathJax.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/Valine.min.js","path":"js/Valine.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","path":"js/hanabi-browser-bundle.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.en.js","path":"js/ie-blocker.en.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","path":"js/ie-blocker.zhCN.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lazyload.min.js","path":"js/lazyload.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.js","path":"js/lsloader.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/lsloader.min.js","path":"js/lsloader.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/nprogress.js","path":"js/nprogress.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/prettify.min.js","path":"js/prettify.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.js","path":"js/queue.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/queue.min.js","path":"js/queue.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/smoothscroll.js","path":"js/smoothscroll.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.css","path":"css/material.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/material.min.css","path":"css/material.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.min.css","path":"css/style.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/style.css","path":"css/style.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","path":"fonts/MaterialIcons-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","path":"fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","path":"fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/material/source/img/daily_pic.png","path":"img/daily_pic.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/jquery.min.js","path":"js/jquery.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.js","path":"js/js.js","modified":0,"renderable":1},{"_id":"themes/material/source/js/js.min.js","path":"js/js.min.js","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","path":"css/prettify/atelier-cave-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","path":"css/prettify/atelier-cave-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","path":"css/prettify/atelier-dune-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","path":"css/prettify/atelier-dune-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","path":"css/prettify/atelier-estuary-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","path":"css/prettify/atelier-estuary-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","path":"css/prettify/atelier-forest-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","path":"css/prettify/atelier-forest-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","path":"css/prettify/atelier-heath-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","path":"css/prettify/atelier-heath-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","path":"css/prettify/atelier-lakeside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","path":"css/prettify/atelier-lakeside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","path":"css/prettify/atelier-plateau-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","path":"css/prettify/atelier-plateau-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","path":"css/prettify/atelier-savanna-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","path":"css/prettify/atelier-savanna-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","path":"css/prettify/atelier-seaside-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","path":"css/prettify/atelier-seaside-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","path":"css/prettify/atelier-sulphurpool-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","path":"css/prettify/atelier-sulphurpool-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github-v2.min.css","path":"css/prettify/github-v2.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/github.min.css","path":"css/prettify/github.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","path":"css/prettify/hemisu-dark.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","path":"css/prettify/hemisu-light.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","path":"css/prettify/tomorrow-night-blue.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","path":"css/prettify/tomorrow-night-bright.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","path":"css/prettify/tomorrow-night-eighties.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","path":"css/prettify/tomorrow-night.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","path":"css/prettify/tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","path":"css/prettify/tranquil-heart.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","path":"css/prettify/vibrant-ink.min.css","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/FontAwesome.otf","path":"fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","path":"fonts/MaterialIcons-Regular.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","path":"fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","path":"fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","path":"img/footer/footer_ico-bilibili.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","path":"img/footer/footer_ico-facebook.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","path":"img/footer/footer_ico-github.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","path":"img/footer/footer_ico-gplus.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","path":"img/footer/footer_ico-instagram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","path":"img/footer/footer_ico-linkedin.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","path":"img/footer/footer_ico-telegram.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","path":"img/footer/footer_ico-tumblr.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","path":"img/footer/footer_ico-twitter.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","path":"img/footer/footer_ico-v2ex.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","path":"img/footer/footer_ico-weibo.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","path":"img/footer/footer_ico-zhihu.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/arrow.svg","path":"img/gallery/arrow.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/close.svg","path":"img/gallery/close.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/gallery/spinner.svg","path":"img/gallery/spinner.svg","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-10.png","path":"img/random/material-10.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-12.png","path":"img/random/material-12.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-17.png","path":"img/random/material-17.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-19.png","path":"img/random/material-19.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-3.png","path":"img/random/material-3.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-4.png","path":"img/random/material-4.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-6.png","path":"img/random/material-6.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-8.png","path":"img/random/material-8.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-9.png","path":"img/random/material-9.png","modified":0,"renderable":1},{"_id":"themes/material/source/js/gallery/gallery.js","path":"js/gallery/gallery.js","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-1.png","path":"img/random/material-1.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-11.png","path":"img/random/material-11.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-13.png","path":"img/random/material-13.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-14.png","path":"img/random/material-14.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-15.png","path":"img/random/material-15.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-16.png","path":"img/random/material-16.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-18.png","path":"img/random/material-18.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-2.png","path":"img/random/material-2.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-5.png","path":"img/random/material-5.png","modified":0,"renderable":1},{"_id":"themes/material/source/img/random/material-7.png","path":"img/random/material-7.png","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","path":"fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","path":"fonts/Roboto-Black.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","path":"fonts/Roboto-Bold.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","path":"fonts/Roboto-Light.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","path":"fonts/Roboto-Medium.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","path":"fonts/Roboto-Regular.ttf","modified":0,"renderable":1},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","path":"fonts/Roboto-Thin.ttf","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520693411754},{"_id":"source/CNAME","hash":"477b9ff67304d15ff18a84a13f48a9e7780ef2cf","modified":1520693411754},{"_id":"source/favicon.ico","hash":"07fba3d1f93c3e221c7e03bebe9393031f4657dc","modified":1520693411773},{"_id":"themes/material/_config.template.yml","hash":"909c9b66c782311a0fe16bca4e75dc13e1b289ea","modified":1512210625000},{"_id":"themes/material/_config.yml","hash":"b5daf18ab85b38d189c1305ca48f0114ced0f5b9","modified":1520701149779},{"_id":"themes/material/package.json","hash":"e00885ee25ac548685af9869cf4cf895118a744c","modified":1512210625000},{"_id":"source/_drafts/linear-list.md","hash":"d6cfe542203f370472f9f7dfbff4cf95c90e3ede","modified":1520693411756},{"_id":"source/_drafts/stack.md","hash":"93be11ca2810c0dcb6c668b8b3506ec4647cb6cb","modified":1520693411756},{"_id":"source/about/index.md","hash":"68782cdd300fb004436aa97d76ec17ed03a0314b","modified":1520699055016},{"_id":"themes/material/languages/ar.yml","hash":"472d71f052e08f3c03b15dd67d11ad41f2eee7bf","modified":1512210625000},{"_id":"themes/material/languages/de.yml","hash":"bce37d066ffa82f3e249d41d0ee883c913cc2c5f","modified":1512210625000},{"_id":"themes/material/languages/en.yml","hash":"b59136a1b4d0a77e550b0e7e2e430cac44230dd3","modified":1512210625000},{"_id":"themes/material/languages/es.yml","hash":"d35f5411bc87277cc2d3a58d9499ddb9cfd46f1b","modified":1512210625000},{"_id":"themes/material/languages/fr.yml","hash":"f456cf31a72d97f2f18e3bb6cf735285d2b9d2c5","modified":1512210625000},{"_id":"themes/material/languages/ja.yml","hash":"768b8330c9c73287efd475e68741ce4ebad29fd1","modified":1512210625000},{"_id":"themes/material/languages/ms.yml","hash":"237a39bbfcce33e7b918f6c5dc0f01bc79900262","modified":1512210625000},{"_id":"themes/material/languages/nl_NL.yml","hash":"b71e59807716185627d6b9b84e44a79401df639f","modified":1512210625000},{"_id":"themes/material/languages/pt-BR.yml","hash":"a070c2c4d0d3d54f8ca70513cff73c3f7c306db1","modified":1512210625000},{"_id":"themes/material/languages/ru.yml","hash":"fbff2cf48dbde45adcad781e2fd6c30b523a4ac1","modified":1512210625000},{"_id":"themes/material/languages/zh-CN.yml","hash":"c188cad1a16ab0651e2d2d03cb3fa79962cf65ff","modified":1512210625000},{"_id":"themes/material/languages/zh-TW.yml","hash":"ec55953f0330f81bf1ffb37ff34de258dfda642a","modified":1512210625000},{"_id":"themes/material/layout/index.ejs","hash":"aca1abb741f891776913c8ea2e6ff626a0ea5736","modified":1512210625000},{"_id":"themes/material/layout/layout.ejs","hash":"94f66850b815a262c0f8ff112a32a0a6f43066e3","modified":1512210625000},{"_id":"themes/material/layout/post.ejs","hash":"4dd572a9e84f3a6baa5e3f16d270e58e3cd31a23","modified":1512210625000},{"_id":"themes/material/scripts/helper.js","hash":"e7111a8b1f0ab5bf3466378c48c260a4f6e527d6","modified":1512210625000},{"_id":"themes/material/layout/_partial/Isolation-post-info.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512210625000},{"_id":"themes/material/scripts/lib/font_lsload.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512210625000},{"_id":"source/_drafts/Redis/Redis集群部署.md","hash":"b3cd64ca0b7f29ddbd7837548ebca53e7bbe2f59","modified":1520693411755},{"_id":"source/_drafts/数据结构/数据结构-栈.md","hash":"93be11ca2810c0dcb6c668b8b3506ec4647cb6cb","modified":1520693411757},{"_id":"source/_drafts/数据结构/数据结构-线性表.md","hash":"d6cfe542203f370472f9f7dfbff4cf95c90e3ede","modified":1520693411758},{"_id":"source/_posts/CentOS/mount-hard-disk.md","hash":"dd7c3b5e520833d356faad4a07164f79ba3dc5fa","modified":1520693411759},{"_id":"source/_posts/Git/revert.md","hash":"1ad672640f60de274cf320a695b2ccf3cdc703cb","modified":1520693411760},{"_id":"source/_posts/LeetCode/605flowers.md","hash":"6e84c9d38f0a9abd37981803c2c380a8b62bc999","modified":1520693411761},{"_id":"source/_posts/Maven/package.md","hash":"f8b3f888b2df69d99fb856150dabb6bd35ac069f","modified":1520693411762},{"_id":"source/_posts/Mysql/install.md","hash":"55238b990ad655b27e3c6971331b99d1f4a4316e","modified":1520693411763},{"_id":"source/_posts/Mysql/master-slave.md","hash":"c4a43d33f2c9f876d65629f7c14ba389c74c0e6d","modified":1520693411763},{"_id":"source/_posts/Redis/install.md","hash":"39d9612a7b548544037cb4cca453fb82328fb40f","modified":1520693411764},{"_id":"source/_posts/SpringMVC/dispatcherServlet-forward.md","hash":"6efeb5bad2026c3ef5771bb95408e183e95cae3d","modified":1520693411765},{"_id":"source/_posts/SpringMVC/dispatcherServlet-init.md","hash":"0e8bca1db78f1f3c41b76fd82d8064e0b8c7a73d","modified":1520693411766},{"_id":"source/_posts/Utils/sync.md","hash":"6613694118e55642bbe13af44f33efc8bea9442c","modified":1520693411767},{"_id":"source/_posts/kafka/install.md","hash":"47cd3e7a4b1a799ecd61362b90bad2a12a2735d7","modified":1520693411768},{"_id":"source/_posts/memcache/memcached.md","hash":"13fd785ecebcbea5f7cb6a751ab2c4a0aa539449","modified":1520693411769},{"_id":"source/_posts/zookeeper/cluster.md","hash":"21533fb163c0f9e11d1e93ef04f766d393ed48b9","modified":1520693411770},{"_id":"source/_posts/zookeeper/install.md","hash":"ea6461735dc6d951969389b442bc9ae687b15bfe","modified":1520693411771},{"_id":"source/_posts/zookeeper/optimum.md","hash":"e241fe02e8b64512c84840e75f54366a64f12b18","modified":1520693411772},{"_id":"themes/material/layout/_partial/Isolation-post_entry.ejs","hash":"134dc82320b7aed7d4d78960be63e16c5c4a30fb","modified":1512210625000},{"_id":"themes/material/layout/_partial/Paradox-post-thumbnail.ejs","hash":"6f1e9a85c089ce98a36a2954839fb9ce3e53739e","modified":1512210625000},{"_id":"themes/material/layout/_partial/Paradox-post-info.ejs","hash":"125cfa5cd9e6e1ca5e958026fdd42f3c3141e34f","modified":1512210625000},{"_id":"themes/material/layout/_partial/Paradox-post_entry-thumbnail.ejs","hash":"4d740eba338517d4e10d011a157cdefad45a8e1f","modified":1512210625000},{"_id":"themes/material/layout/_partial/Paradox-post_entry.ejs","hash":"5f4d67e5bd70f635203706cf344b036d891073e6","modified":1512210625000},{"_id":"themes/material/layout/_partial/Paradox-search.ejs","hash":"18a6971b04feccd124a096b8c7cecf1fd4bb914e","modified":1512210625000},{"_id":"themes/material/layout/_partial/blog_info.ejs","hash":"5e95796e6f9a81163554ca4198573860f7328d4e","modified":1512210625000},{"_id":"themes/material/layout/_partial/comment.ejs","hash":"c9fb1f98a18ca484cb52d60e2ad2bad25b56dfb2","modified":1512210625000},{"_id":"themes/material/layout/_partial/config_css.ejs","hash":"2b1e27faa0446a5e756e61ddf3e969e50948f1ce","modified":1512210625000},{"_id":"themes/material/layout/_partial/config_font.ejs","hash":"730abeb681758ce288d5541930c46bc4b041a0b1","modified":1512210625000},{"_id":"themes/material/layout/_partial/daily_pic.ejs","hash":"e780fbdb79b5e27091c408545cfd5b64892c9b01","modified":1512210625000},{"_id":"themes/material/layout/_partial/footer-option.ejs","hash":"be20394eaeaf2d20db28946b948962c839da6ea9","modified":1512210625000},{"_id":"themes/material/layout/_partial/footer-left.ejs","hash":"372cdf718e01fea2736b8e427e57bfcfaa8a557f","modified":1512210625000},{"_id":"themes/material/layout/_partial/footer.ejs","hash":"530626c347882579d09d71df68993e25076ca8e2","modified":1512210625000},{"_id":"themes/material/layout/_partial/footer_top.ejs","hash":"9eaace4feb951c96c0033e7271497f3f300d2476","modified":1512210625000},{"_id":"themes/material/layout/_partial/head.ejs","hash":"8167f995c7cc21a6a8ddbfbdd03f2f74a7bd904d","modified":1512210625000},{"_id":"themes/material/layout/_partial/import_js.ejs","hash":"961b8a0059875e4044fe80bbe91ca6a225f113e5","modified":1512210625000},{"_id":"themes/material/layout/_partial/isolate-sns_list.ejs","hash":"fc5f03ebb847f85975676a9dfee8870e7c908008","modified":1512210625000},{"_id":"themes/material/layout/_partial/isolate_info.ejs","hash":"b8ec76716bfa2e6513b4df6814fe8676536a94c1","modified":1512210625000},{"_id":"themes/material/layout/_partial/post-content.ejs","hash":"ad626e3b60bc4a17bacff02cf9b0a8beaba2ad1e","modified":1512210625000},{"_id":"themes/material/layout/_partial/post-header.ejs","hash":"b0b8973c48db6376a24d4b4b1d2eb15d18d6508c","modified":1512210625000},{"_id":"themes/material/layout/_partial/post-info-share.ejs","hash":"9f28d62bf728c2bd89411688426a65d7ee55400c","modified":1512210625000},{"_id":"themes/material/layout/_partial/post-nav.ejs","hash":"3b6d4568cc46f60c697ad9ec85a4aa5971f3eecc","modified":1512210625000},{"_id":"themes/material/layout/_partial/sidebar-footer.ejs","hash":"6c3486b846473e0d58666f7a8720f5bf4a14e030","modified":1512210625000},{"_id":"themes/material/layout/_partial/sidebar-footer_image.ejs","hash":"b9157d2072028a1db3c3419f76bde6637e85cf0e","modified":1512210625000},{"_id":"themes/material/layout/_partial/sidebar-header.ejs","hash":"06295e01092f55504d30a343c3fdc5091280e495","modified":1512210625000},{"_id":"themes/material/layout/_partial/sidebar-navigation.ejs","hash":"ff44901fdfdd952174b0d22e86df7163d7fba9ba","modified":1512210625000},{"_id":"themes/material/layout/_partial/sidebar.ejs","hash":"c5ce6136e82895cb80dab8a918a7cdf2fe820fea","modified":1512210625000},{"_id":"themes/material/layout/_partial/structured-data.ejs","hash":"e845df290185dc300cc4edcc08b50fddc5b6909b","modified":1512210625000},{"_id":"themes/material/layout/_partial/toc_button.ejs","hash":"688c3fc12e2548ff27fe60688f79dcce2881fd50","modified":1512210625000},{"_id":"themes/material/layout/_widget/dnsprefetch.ejs","hash":"5e4c5359d69a64042183db13f6dd771b1f7f6b31","modified":1512210625000},{"_id":"themes/material/layout/_widget/leancloud-like.ejs","hash":"e4780fe3bbb049db38d694fc18dee13d799bd51d","modified":1512210625000},{"_id":"themes/material/layout/_widget/leancloud-views.ejs","hash":"211dc183b8e84f71b2c25b3ac6659d162d81662b","modified":1512210625000},{"_id":"themes/material/layout/_widget/leancloud-views_num.ejs","hash":"e27baba6a2de406463735d276606b15fb40f5eba","modified":1512210625000},{"_id":"themes/material/layout/_widget/mathjax.ejs","hash":"b68befe1fea84739c8429c344e570a8bc0357401","modified":1512210625000},{"_id":"themes/material/layout/_widget/nprogress.ejs","hash":"901a64600854b312209287c702278183600e06b9","modified":1512210625000},{"_id":"themes/material/layout/_widget/page-gallery.ejs","hash":"81b9410deef7a83ef5bc7cd18ad042df70d70b94","modified":1512210625000},{"_id":"themes/material/layout/_widget/page-links.ejs","hash":"0ebe18e4326f921d6010df8479a08c2d403ba717","modified":1512210625000},{"_id":"themes/material/layout/_widget/page-tagcloud.ejs","hash":"e71de74e4067cc4e6aef1e09ac429c92bcd178b3","modified":1512210625000},{"_id":"themes/material/layout/_widget/page-timeline.ejs","hash":"9fa0195e08d9fd40aa0333e9279c98bc65acf604","modified":1512210625000},{"_id":"themes/material/layout/_widget/qrcode.ejs","hash":"3212e5d29fe8490c5d9a844ec9c2ce9925532de8","modified":1512210625000},{"_id":"themes/material/layout/_widget/search-local-js.ejs","hash":"f42cc040adf47fc7d74f64b0be3c3230e8a3339e","modified":1512210625000},{"_id":"themes/material/layout/_widget/search-swiftype-js.ejs","hash":"7ad1e843e620ccd9b3c041dccfdcee97921247a1","modified":1512210625000},{"_id":"themes/material/scripts/lib/css_lsload.js","hash":"179f5f5e3297a7fb7d90545ddd94eb468a11046e","modified":1512210625000},{"_id":"themes/material/scripts/lib/get_file_hex.js","hash":"eb3b9a45f8ca45ef40d5421baef7d4484023982c","modified":1512210625000},{"_id":"themes/material/scripts/lib/js_hex.js","hash":"2704583aa036d538544ce31c2e924c0c125309dd","modified":1512210625000},{"_id":"themes/material/scripts/lib/path_for.js","hash":"f944e3b53a468962121aa3357cc0bc18ac27a34c","modified":1512210625000},{"_id":"themes/material/scripts/lib/js_lsload.js","hash":"72f885b13fe0028a0e2acb7168dcc66e39ea1592","modified":1512210625000},{"_id":"themes/material/source/css/disqus-proxy.css","hash":"770776d8cec27cd5661bdfd59eff9af263439989","modified":1512210625000},{"_id":"themes/material/source/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1512210625000},{"_id":"themes/material/source/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1512210625000},{"_id":"themes/material/source/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1512210625000},{"_id":"themes/material/source/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1512210625000},{"_id":"themes/material/source/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1512210625000},{"_id":"themes/material/source/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1512210625000},{"_id":"themes/material/source/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1512210625000},{"_id":"themes/material/source/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1512210625000},{"_id":"themes/material/source/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1512210625000},{"_id":"themes/material/source/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1512210625000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1512210625000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1512210625000},{"_id":"themes/material/source/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1512210625000},{"_id":"themes/material/source/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1512210625000},{"_id":"themes/material/source/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1512210625000},{"_id":"themes/material/source/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1512210625000},{"_id":"themes/material/source/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1512210625000},{"_id":"themes/material/source/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1512210625000},{"_id":"themes/material/source/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1512210625000},{"_id":"themes/material/source/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1512210625000},{"_id":"themes/material/source/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1512210625000},{"_id":"themes/material/source/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1512210625000},{"_id":"themes/material/source/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1512210625000},{"_id":"themes/material/source/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1512210625000},{"_id":"themes/material/source/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1512210625000},{"_id":"themes/material/source/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1512210625000},{"_id":"themes/material/source/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1512210625000},{"_id":"themes/material/source/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1512210625000},{"_id":"themes/material/source/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1512210625000},{"_id":"themes/material/source/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1512210625000},{"_id":"themes/material/source/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1512210625000},{"_id":"themes/material/source/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1512210625000},{"_id":"themes/material/source/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1512210625000},{"_id":"themes/material/source/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1512210625000},{"_id":"themes/material/source/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1512210625000},{"_id":"themes/material/source/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1512210625000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1512210625000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1512210625000},{"_id":"themes/material/source/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1512210625000},{"_id":"themes/material/source/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1512210625000},{"_id":"themes/material/source/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1512210625000},{"_id":"themes/material/source/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1512210625000},{"_id":"themes/material/source/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1512210625000},{"_id":"themes/material/layout/_widget/analytics/baidu-analytics.ejs","hash":"3866a7fead3c1f94a517f1f9d629f092670b1520","modified":1512210625000},{"_id":"themes/material/layout/_widget/analytics/cnzz-analytics.ejs","hash":"1765e3dcd92961292f40d1812e593186c77b17ef","modified":1512210625000},{"_id":"themes/material/layout/_widget/analytics/google-analytics.ejs","hash":"3b10ebf524baf0c24b22dcd110b39d15c5acb9b5","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1512210625000},{"_id":"themes/material/source/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1512210625000},{"_id":"themes/material/source/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1512210625000},{"_id":"themes/material/source/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1512210625000},{"_id":"themes/material/source/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1512210625000},{"_id":"themes/material/source/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1512210625000},{"_id":"themes/material/source/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1512210625000},{"_id":"themes/material/source/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1512210625000},{"_id":"themes/material/source/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1512210625000},{"_id":"themes/material/source/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1512210625000},{"_id":"themes/material/source/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1512210625000},{"_id":"themes/material/source/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1512210625000},{"_id":"themes/material/source/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1512210625000},{"_id":"themes/material/source/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1512210625000},{"_id":"themes/material/source/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1512210625000},{"_id":"themes/material/source/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1512210625000},{"_id":"themes/material/source/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1512210625000},{"_id":"themes/material/source/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1512210625000},{"_id":"themes/material/source/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1512210625000},{"_id":"themes/material/source/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1512210625000},{"_id":"themes/material/source/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1512210625000},{"_id":"themes/material/source/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1512210625000},{"_id":"themes/material/source/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1512210625000},{"_id":"themes/material/source/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1512210625000},{"_id":"themes/material/source/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1512210625000},{"_id":"themes/material/source/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1512210625000},{"_id":"themes/material/source/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1512210625000},{"_id":"themes/material/source/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1512210625000},{"_id":"themes/material/source/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1512210625000},{"_id":"themes/material/source/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1512210625000},{"_id":"themes/material/source/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/livere/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/valine/common.ejs","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1512210625000},{"_id":"themes/material/source/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1512210625000},{"_id":"themes/material/source/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1512210625000},{"_id":"themes/material/source/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1512210625000},{"_id":"themes/material/source/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1512210625000},{"_id":"themes/material/source/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1512210625000},{"_id":"themes/material/source/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1512210625000},{"_id":"themes/material/source/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1512210625000},{"_id":"themes/material/source/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1512210625000},{"_id":"themes/material/source/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1512210625000},{"_id":"themes/material/source/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/changyan/common.ejs","hash":"40e1fc76d6b7f64e226693fb2fe1a6bb17bae245","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/changyan/enter.ejs","hash":"e3cfb4f37ea35457f112f3e822e130c930086497","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/changyan/main.ejs","hash":"77539ff32cc9d1204b848e01b5277fff5cbd61e0","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/disqus/common.ejs","hash":"c11cfceb0906a96399dede5da01ff7fe4787f8a5","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/disqus/main.ejs","hash":"21e0eeff664191b818d7a0071ae7edcdfc270442","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/disqus/enter.ejs","hash":"39192034766349e47967da63184f9104fdded2ab","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/disqus_click/common.ejs","hash":"d243f576b366a62191066459efcc6fd0ab79d00a","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/disqus_click/enter.ejs","hash":"d82f0296f8bae25223ec44e6e05b817d3a234884","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/disqus_click/main.ejs","hash":"f53de208ca46c669a868a1922488e39509c6fe3b","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/gitalk/common.ejs","hash":"f739897518011e1b3de7807c8c5d734984711282","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/gitalk/enter.ejs","hash":"4d70d76465469a57def29a221962a5520fb34ebe","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/gitalk/main.ejs","hash":"1ee7a7b2b9b5ae8c4fa8c4b09c7973b9e085bdf2","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/gitment/enter.ejs","hash":"46d904fde9233694b95c6a3d91b9a2b7a6805850","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/gitment/main.ejs","hash":"e622660eda38cda05847aadc2a3e31a228fc519b","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/gitment/common.ejs","hash":"9c6c8d1b448c32afb01c2d0351e87f4d4a17ec3c","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/livere/enter.ejs","hash":"194b7bb581a3b8608a7ab135b6953d7908f51cc8","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/livere/main.ejs","hash":"1c4be9ba104a8cbcc11d45f11bf8cfe7704b93a5","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/valine/enter.ejs","hash":"ab528aad46237d9e7f1c5b4b2b310dd628b2de63","modified":1512210625000},{"_id":"themes/material/layout/_widget/comment/valine/main.ejs","hash":"3d5d8559e6ad4ffb58a61d96439b2718eb9999b6","modified":1512210625000},{"_id":"themes/material/source/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1512210625000},{"_id":"themes/material/source/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1512210625000},{"_id":"themes/material/source/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1512210625000},{"_id":"themes/material/source/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1512210625000},{"_id":"themes/material/source/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1512210625000},{"_id":"themes/material/source/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1512210625000},{"_id":"themes/material/source/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1512210625000},{"_id":"public/about/index.html","hash":"c17f8c0b3536ba9833d2f91a85ec8a0dba65bddd","modified":1520701025570},{"_id":"public/kafka/install.html","hash":"45193a3e05f10417c6a9cfcbdfb04e27c0708171","modified":1520701025571},{"_id":"public/zookeeper/cluster.html","hash":"9063d14390b9147991f68f8dbd1f89b62f196e38","modified":1520701025572},{"_id":"public/zookeeper/optimum.html","hash":"699a6b6c703f0f0cbc1a692207bf91b911ea88f5","modified":1520701025572},{"_id":"public/zookeeper/install.html","hash":"753c3f567b7bd83de5995ce8400413447fb9a6a0","modified":1520701025572},{"_id":"public/Redis/install.html","hash":"6bba8454384d359f4afaf148ff1938696bf341c1","modified":1520701025572},{"_id":"public/LeetCode/605flowers.html","hash":"12dac302affc0c48dcaa8f2a95de1ec0e02d976d","modified":1520701025572},{"_id":"public/memcache/memcached.html","hash":"b4fedefd24a4bc3938fe47dd71a86132c74c1fd7","modified":1520701025572},{"_id":"public/SpringMVC/dispatcherServlet-forward.html","hash":"2b6cf0f8ee12722c70641b6cc73daf986e169dcd","modified":1520701025572},{"_id":"public/CentOS/mount-hard-disk.html","hash":"f5e5baccf56cc39fde461212096f3b5e772be5f7","modified":1520701025572},{"_id":"public/Mysql/master-slave.html","hash":"14870bb44b3cf85544bd16983cd0ae87447a6a4a","modified":1520701025572},{"_id":"public/Git/revert.html","hash":"841ea9e984305824c8fea8d53201261d86913fd9","modified":1520701025572},{"_id":"public/SpringMVC/dispatcherServlet-init.html","hash":"c56707989555051e3f8cdd36a16c8699194ea8ef","modified":1520701025572},{"_id":"public/Maven/package.html","hash":"ed5b2e32c21ecc37f75c10be7211f6464e5ff324","modified":1520701025573},{"_id":"public/Mysql/install.html","hash":"5ce30a7383058f9e78192f40051e6670d75c7516","modified":1520701025573},{"_id":"public/Utils/sync.html","hash":"bbb4e4309a1b15427c28c6deb0f58dfbb1387ebf","modified":1520701025573},{"_id":"public/archives/index.html","hash":"8a7ffe9271990bbd48b5535a7904521e0c96e57a","modified":1520701025573},{"_id":"public/archives/page/2/index.html","hash":"b02f873a99abc7230e01a0f94e6215a22c90de34","modified":1520701025573},{"_id":"public/archives/2017/index.html","hash":"0eff7c9e58abb689421d44ae0f713fd2afb0d71f","modified":1520701025573},{"_id":"public/archives/2017/page/2/index.html","hash":"743fd81c6d36b37f669adad8336f2e286c3e05f4","modified":1520701025573},{"_id":"public/archives/2017/02/index.html","hash":"e73da9d8d7ccae498374acb1e5c0dd7b791f8bb8","modified":1520701025573},{"_id":"public/archives/2017/04/index.html","hash":"08b80273adddffd9f7585606ba98b35e318bf32e","modified":1520701025573},{"_id":"public/archives/2017/05/index.html","hash":"a6b22077e3d116cb1b60a769edb48525905224d9","modified":1520701025573},{"_id":"public/archives/2017/06/index.html","hash":"c59b3b89bc9a4d78ce5d84fe26078a00675869cb","modified":1520701025573},{"_id":"public/archives/2017/07/index.html","hash":"a829aac935b3c6b5e32147b0a7d69eab32be5a92","modified":1520701025573},{"_id":"public/index.html","hash":"67bc6a549d0dfe49137e52097c530377d83be87c","modified":1520701025573},{"_id":"public/page/2/index.html","hash":"4a2d05b5f2687994e242c0304c47840dd00fdbee","modified":1520701025574},{"_id":"public/categories/Redis/index.html","hash":"f7300946311f09d57e92fb5c951c1d532fabfaf9","modified":1520701025574},{"_id":"public/categories/LeetCode/index.html","hash":"0dff7a9794c5ef350df37b64e68142777723dcc8","modified":1520701025574},{"_id":"public/categories/Mysql/index.html","hash":"9ff9aff1f927056664f6b440262fd226874b5d60","modified":1520701025574},{"_id":"public/categories/CentOS/index.html","hash":"850ff935d3486bdffc9e77ff418f8d8325128d69","modified":1520701025574},{"_id":"public/categories/Maven/index.html","hash":"26ff4f53cc85ea68c419623dc1c5725e9dddf2b3","modified":1520701025574},{"_id":"public/categories/Git/index.html","hash":"00c22fe090b7332c9be81c709173db1739f1f775","modified":1520701025574},{"_id":"public/categories/SpringMVC/index.html","hash":"ff05592dc9682085929ec42dd3c0e4182bef49c8","modified":1520701025574},{"_id":"public/categories/kafka/index.html","hash":"eb1e9b9f371d3f5bae36c177ece378f102714cb8","modified":1520701025575},{"_id":"public/categories/内存数据库/index.html","hash":"ad21e22fbe6c441c85da2c0793db49eb65599c4e","modified":1520701025576},{"_id":"public/categories/zookeeper/index.html","hash":"1a0ddb4e2bbff79cec0f2e41d28ec95cf421590f","modified":1520701025576},{"_id":"public/tags/Redis/index.html","hash":"10c3f4807463c7ac89d5c96e67761fcf0ed7d93f","modified":1520701025576},{"_id":"public/tags/LeetCode/index.html","hash":"a7de8e2d4e2b695a8c4619a1ecd76f1597a72df8","modified":1520701025576},{"_id":"public/tags/Mysql/index.html","hash":"4c29a12744a6993bf8dce61c746796fb61aad9cd","modified":1520701025576},{"_id":"public/tags/HarhDisk/index.html","hash":"8a06d049ce435269c5326a4accc9bc6b63c94c4b","modified":1520701025576},{"_id":"public/tags/Maven/index.html","hash":"b0440bdf7387dc07a6356df7e469d264c7d06102","modified":1520701025576},{"_id":"public/tags/Git/index.html","hash":"29f99076d614338bf7423547459177d9abdc6824","modified":1520701025576},{"_id":"public/tags/SpringMVC源码分析/index.html","hash":"8b7a44d5768da6d4801b93597818cdfe9b658bbf","modified":1520701025576},{"_id":"public/tags/工具/index.html","hash":"43abd96c3dafb106daff059c89d68cee415ce5bc","modified":1520701025576},{"_id":"public/tags/kafka/index.html","hash":"7aa262892501641739cbd06cef3c672565b93208","modified":1520701025576},{"_id":"public/tags/Memcache/index.html","hash":"7ed923e3ab658369752dfa8f53f1c7bd19b22623","modified":1520701025576},{"_id":"public/tags/zookeeper/index.html","hash":"014f8403424a80b977034f8e2808ff0c2bd97b08","modified":1520701025576},{"_id":"public/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1520701025586},{"_id":"public/CNAME","hash":"477b9ff67304d15ff18a84a13f48a9e7780ef2cf","modified":1520701025593},{"_id":"public/favicon.ico","hash":"07fba3d1f93c3e221c7e03bebe9393031f4657dc","modified":1520701025593},{"_id":"public/fonts/MaterialIcons-Regular.woff","hash":"c6c953c2ccb2ca9abb21db8dbf473b5a435f0082","modified":1520701025593},{"_id":"public/img/browserstack_logo.png","hash":"a6c43887f64a7f48a2814e3714eaa1215e542037","modified":1520701025593},{"_id":"public/img/avatar.png","hash":"bf483b0d495dbbcfb308348a945818e1c1cc9696","modified":1520701025593},{"_id":"public/fonts/MaterialIcons-Regular.woff2","hash":"09963592e8c953cc7e14e3fb0a5b05d5042e8435","modified":1520701025593},{"_id":"public/img/bg.png","hash":"a32f9717e19e821a4030ade551dc2917c889fcd8","modified":1520701025593},{"_id":"public/img/favicon.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1520701025593},{"_id":"public/img/upyun_logo.svg","hash":"1f118b2b9c54f431d5e731ccf316ceefe605ba67","modified":1520701025593},{"_id":"public/img/logo.png","hash":"b1bcc84cedb2a618e8db93559ce7d58f9274085d","modified":1520701025593},{"_id":"public/img/sidebar_header.png","hash":"c47f4d39f421c0a950279d050ae82f9ae6dd19ff","modified":1520701025594},{"_id":"public/img/footer/footer_ico-bilibili.svg","hash":"1a007ae30d69aa597f589edb4ee0638a9814c988","modified":1520701025594},{"_id":"public/img/footer/footer_ico-facebook.svg","hash":"74b3b3c6bd1d76b7eaaf75d36ac929b11a5a3e82","modified":1520701025594},{"_id":"public/img/footer/footer_ico-github.svg","hash":"5f1f9f53e6a87ad674108c6bd16e424a1e888c61","modified":1520701025594},{"_id":"public/img/footer/footer_ico-gplus.svg","hash":"b50274133ab263bcacdf729871d0446b615ac984","modified":1520701025594},{"_id":"public/img/footer/footer_ico-instagram.svg","hash":"294c511e62063ea49f61e23958ab27d643ba0228","modified":1520701025594},{"_id":"public/img/footer/footer_ico-linkedin.svg","hash":"9831c86352ec5ff283a3277d033120f86388c277","modified":1520701025594},{"_id":"public/img/footer/footer_ico-telegram.svg","hash":"413d66e40ca476deeb49364935d49d2f7839cdfd","modified":1520701025594},{"_id":"public/img/footer/footer_ico-tumblr.svg","hash":"11daf4fa4220787306fc21a879429e98b7db8d03","modified":1520701025594},{"_id":"public/img/footer/footer_ico-twitter.svg","hash":"58df7777d6fcee8fa3c42453c091714bb3f97c95","modified":1520701025594},{"_id":"public/img/footer/footer_ico-v2ex.svg","hash":"c5ffaf67a97e534c266d1585a9a3b56f1bfe3052","modified":1520701025594},{"_id":"public/img/footer/footer_ico-weibo.svg","hash":"26d0cdb77f0c4afd60111176167eacfa222bc4c1","modified":1520701025594},{"_id":"public/img/footer/footer_ico-zhihu.svg","hash":"d3f8da320fffefc5144822665dfe17d25af4061c","modified":1520701025594},{"_id":"public/img/gallery/arrow.svg","hash":"144d73877e52acc5068bc0c9d1e69ef450e69f26","modified":1520701025594},{"_id":"public/img/gallery/close.svg","hash":"2690088060811f01c9360df75be80070156ff176","modified":1520701025594},{"_id":"public/img/gallery/spinner.svg","hash":"fc9d1cd1118ac896d4f5326e110a653f3ea32b11","modified":1520701025594},{"_id":"public/img/random/material-10.png","hash":"363466a376e4df9e61acc904cd25f3c7ae1a7280","modified":1520701025594},{"_id":"public/img/random/material-12.png","hash":"d020b3d42542715c7ae95b3d8603fe3180bfe8f3","modified":1520701025594},{"_id":"public/img/random/material-17.png","hash":"ece82810e31f711576db598c845c3d97bd49fe67","modified":1520701025595},{"_id":"public/img/random/material-19.png","hash":"768ed1a4966e2e418cb00f6b36d2fc9058328eb3","modified":1520701025595},{"_id":"public/img/random/material-3.png","hash":"848eaa70b9b0cd7a2204c78e8aa324d8f96bb097","modified":1520701025595},{"_id":"public/img/random/material-4.png","hash":"b475dfbf67a076a4e17a5527fd1973b1d4adac07","modified":1520701025595},{"_id":"public/img/random/material-6.png","hash":"2f841e0c064fecb607ad1e149662a0c96d9e725d","modified":1520701025595},{"_id":"public/img/random/material-8.png","hash":"57db542d526ef6866cb34e261096e93a0e6f3a82","modified":1520701025595},{"_id":"public/img/random/material-9.png","hash":"840319c4d1f38fb8df79eb4669ed2e14d89fd680","modified":1520701025595},{"_id":"public/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1520701025606},{"_id":"public/fonts/MaterialIcons-Regular.ttf","hash":"fc05de31234e0090f7ddc28ce1b23af4026cb1da","modified":1520701025609},{"_id":"public/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1520701025611},{"_id":"public/img/daily_pic.png","hash":"5e9a5f6a134889d0242e69061837f2032416d7ce","modified":1520701025611},{"_id":"public/img/random/material-11.png","hash":"ce20b0ad08a248c036115374f2edb7301ff60b72","modified":1520701025611},{"_id":"public/img/random/material-1.png","hash":"4839299eaa4db7272befa7b824e54b647fbbfc44","modified":1520701025612},{"_id":"public/img/random/material-13.png","hash":"1a8378db3121b583485e2b939cb1aa0e0b14b0c8","modified":1520701025612},{"_id":"public/img/random/material-16.png","hash":"ade7f75200d3fb38326e3cf1e9f1a812fb12a43b","modified":1520701025612},{"_id":"public/img/random/material-14.png","hash":"b4f65b601960138c69f57171b0ddd55895483f45","modified":1520701025612},{"_id":"public/img/random/material-15.png","hash":"36b9937cf3810e4970902b78797ad29b0831f065","modified":1520701025612},{"_id":"public/img/random/material-18.png","hash":"4b98204abe36ecd3f30678d2c22059130e0db328","modified":1520701025612},{"_id":"public/img/random/material-2.png","hash":"faba2ce69c19d6c1dac392dd10b054e0061f6fb7","modified":1520701025612},{"_id":"public/img/random/material-5.png","hash":"5041ebd073a139c67f8ed271e74c967c7eb9c5be","modified":1520701025612},{"_id":"public/img/random/material-7.png","hash":"5c49ff3c064aaeb21227c2bd98b5ae422ddca84c","modified":1520701025613},{"_id":"public/css/disqus-proxy.min.css","hash":"3f8f99f71d361302288b0ba11fd36072564b08c2","modified":1520701025621},{"_id":"public/css/duoshuo.min.css","hash":"89a30544b8b01d061da51c40f2af702a7969de5e","modified":1520701025621},{"_id":"public/css/duoshuo.css","hash":"32a02eaa01ff7b66fd9df307b0d33d52810096be","modified":1520701025621},{"_id":"public/css/ie-blocker.css","hash":"dddce7e6250a449291888ae7865697282a213b14","modified":1520701025622},{"_id":"public/css/prettify.css","hash":"c395f20ee64e80c2b6b15c7dade02f9aaaeab2c8","modified":1520701025622},{"_id":"public/css/prettify.min.css","hash":"62edd8f08656463b0e077dcf893faa3cc8eb5fe4","modified":1520701025622},{"_id":"public/css/uc.css","hash":"1e0977a2c9bdf721cc05654dfc025dd250655852","modified":1520701025622},{"_id":"public/js/hanabi-browser-bundle.js","hash":"d646647bda386140c8315d60e3ff4ddbdb15c1ea","modified":1520701025622},{"_id":"public/js/lazyload.min.js","hash":"5348fd7aa4dbefac9d21091c9fd5e263563b5540","modified":1520701025622},{"_id":"public/js/ie-blocker.en.js","hash":"96ca8e677a12048d099319ebdf01983ddc6ca80c","modified":1520701025622},{"_id":"public/js/lsloader.js","hash":"2b14e57784fb6b5f58d71584189c61af45f393e8","modified":1520701025622},{"_id":"public/js/ie-blocker.zhCN.js","hash":"0ed49b0ec1d1924b128fbd97fca2cf7af7856fdf","modified":1520701025622},{"_id":"public/js/prettify.min.js","hash":"69908fe0a09cee107c25cb5d769b861723e7b7bb","modified":1520701025622},{"_id":"public/js/queue.js","hash":"dd252616b568b71c222d9cfc859bfe52738e576a","modified":1520701025622},{"_id":"public/js/nprogress.js","hash":"a3058d4b6afb5d7a14e5afcbb88f778de35864f0","modified":1520701025622},{"_id":"public/js/lsloader.min.js","hash":"1a68a8d267948ea8475245b7d365a1a1bd8f732e","modified":1520701025622},{"_id":"public/js/queue.min.js","hash":"21aab782ca33efbb1386cc960b6be0a02106760d","modified":1520701025622},{"_id":"public/js/smoothscroll.js","hash":"df56a1c84191a62750ae820943377b6775fca0e2","modified":1520701025623},{"_id":"public/css/prettify/atelier-cave-light.min.css","hash":"4b62dc45aa351b071d6a434dc54fe8c2e15c85cc","modified":1520701025623},{"_id":"public/css/prettify/atelier-cave-dark.min.css","hash":"cb0156cdc36500a26b232ae1c81fdc880eba85e7","modified":1520701025623},{"_id":"public/css/prettify/atelier-dune-dark.min.css","hash":"c5094d99ca0e619d97860c88211bf908fdf830b1","modified":1520701025623},{"_id":"public/css/prettify/atelier-dune-light.min.css","hash":"b3ad98483e4d5bde72d52a15423d98e0d086db09","modified":1520701025623},{"_id":"public/css/prettify/atelier-estuary-dark.min.css","hash":"7e3a065cafeb3acc1d7178f64ef4265f5d5ad2b9","modified":1520701025623},{"_id":"public/css/prettify/atelier-forest-dark.min.css","hash":"9296b851a5b66785a60afa5da5fe9080bda96bf5","modified":1520701025623},{"_id":"public/css/prettify/atelier-forest-light.min.css","hash":"3532f6e86bf4afbba05f7a074b791b73174f9622","modified":1520701025623},{"_id":"public/css/prettify/atelier-heath-dark.min.css","hash":"954309acd7918422382a3ff2f9c2988aec0ff956","modified":1520701025623},{"_id":"public/css/prettify/atelier-estuary-light.min.css","hash":"1d12d8f7fa9c122a186ee76fdf681c191a68f104","modified":1520701025623},{"_id":"public/css/prettify/atelier-lakeside-light.min.css","hash":"e20e8ac64432fa1aa6f74792b58196af7cf79c12","modified":1520701025623},{"_id":"public/css/prettify/atelier-heath-light.min.css","hash":"a67199fa580b3aa2df031e5d2028929d29ca3b45","modified":1520701025623},{"_id":"public/css/prettify/atelier-lakeside-dark.min.css","hash":"18575fc6dff855e395a39d0383d2f18807091f0d","modified":1520701025623},{"_id":"public/css/prettify/atelier-seaside-dark.min.css","hash":"e0e6bbacc75a349b1e49c236d374b0e42f1fd485","modified":1520701025623},{"_id":"public/css/prettify/atelier-savanna-dark.min.css","hash":"fba92c652fd6704422b8f2bbc11706805a6faed0","modified":1520701025623},{"_id":"public/css/prettify/atelier-plateau-light.min.css","hash":"153801640fdcbb74c0de3f15345110f2210eb991","modified":1520701025623},{"_id":"public/css/prettify/atelier-plateau-dark.min.css","hash":"137e3c499a720da3c1d57b4dc53264b1d623e1c5","modified":1520701025623},{"_id":"public/css/prettify/atelier-seaside-light.min.css","hash":"732750b75389c1c49204f37705e6abeee40ce64f","modified":1520701025623},{"_id":"public/css/prettify/atelier-savanna-light.min.css","hash":"d9425ffb7c60d646190c22b9a5f72091ee5f9ace","modified":1520701025623},{"_id":"public/css/prettify/atelier-sulphurpool-dark.min.css","hash":"015a35dddaee153fa8bb71d7f3818a6ba4d120d8","modified":1520701025624},{"_id":"public/css/prettify/atelier-sulphurpool-light.min.css","hash":"ab1a6200eab648cab443c3df77fde9b237ef27b6","modified":1520701025624},{"_id":"public/css/prettify/github-v2.min.css","hash":"57630621d20842a529bdea7b17fc90f520e562ef","modified":1520701025624},{"_id":"public/css/prettify/github.min.css","hash":"19cf828225288fa5c006f1d8f66c39d11f4ef7f2","modified":1520701025624},{"_id":"public/css/prettify/hemisu-dark.min.css","hash":"a671248cfd573292026d2174817e82e593691052","modified":1520701025624},{"_id":"public/css/prettify/hemisu-light.min.css","hash":"b2556ff41e513fd13d032ec84a37ee260a905815","modified":1520701025624},{"_id":"public/css/prettify/tomorrow-night-blue.min.css","hash":"c442728d96485bcf816151fe6bd96993aae09852","modified":1520701025624},{"_id":"public/css/prettify/tomorrow-night-bright.min.css","hash":"cf251fd3edfd736695272a0f1b41d509b7bb1fb9","modified":1520701025624},{"_id":"public/css/prettify/tomorrow-night-eighties.min.css","hash":"6ce259d674bb4edda23eea32b2379be17d0e0e6e","modified":1520701025624},{"_id":"public/css/prettify/tomorrow-night.min.css","hash":"d989206d124035494acb4b0cdc7fbc89f3b7d108","modified":1520701025624},{"_id":"public/css/prettify/tomorrow.min.css","hash":"b2c6d610b77f0273fefab5aa4ad26a7f58956f87","modified":1520701025624},{"_id":"public/css/prettify/tranquil-heart.min.css","hash":"0f6eefbdda8e410832e9c516a5dd19899217ef06","modified":1520701025624},{"_id":"public/css/prettify/vibrant-ink.min.css","hash":"c265bac6c31cf622b536b29c8a6bc46955d6fe63","modified":1520701025624},{"_id":"public/css/disqus-proxy.css","hash":"d5086cda8aaae20b8d3f9dd50f0be5ccb717e42a","modified":1520701025624},{"_id":"public/css/gallery.min.css","hash":"c5333ca835aae49239d809130a7b281af745729e","modified":1520701025624},{"_id":"public/css/material-icons.css","hash":"f6f95fe5190f3c65931847246621fb83754eb00c","modified":1520701025624},{"_id":"public/css/fontawesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1520701025625},{"_id":"public/js/MathJax.js","hash":"a21703b5848325a902c9b39bbf3ca6490d3e1b1b","modified":1520701025625},{"_id":"public/js/Valine.min.js","hash":"6a287a99a772a0ea8f98b133523429c9250cc67f","modified":1520701025625},{"_id":"public/css/material.min.css","hash":"1a19febb9214ab689b02f5bb8ccb23579e6c1181","modified":1520701025625},{"_id":"public/css/style.css","hash":"a2f27c40f412dc24e1ed5f62a4117523a226eed0","modified":1520701025625},{"_id":"public/css/style.min.css","hash":"a9e9b33e1fcf818f08a04b909c86f2460a05f060","modified":1520701025625},{"_id":"public/css/material.css","hash":"068e2b00f686157b6e8b78b9b808112adbedf4de","modified":1520701025625},{"_id":"public/js/js.js","hash":"64b3f20e7138674ecf21e6e3982565ea63feae26","modified":1520701025625},{"_id":"public/js/js.min.js","hash":"709d347d3be033b841de0493b7cf532b594bb1f6","modified":1520701025625},{"_id":"public/js/jquery.min.js","hash":"00073d6597d2760b81387274a9ec56b9d5cb1552","modified":1520701025625},{"_id":"public/js/gallery/gallery.js","hash":"8ee48312a183b42a9886211a0ec825ea0d041301","modified":1520701025626},{"_id":"public/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1520701025626},{"_id":"public/fonts/MaterialIcons-Regular.eot","hash":"26fb8cecb5512223277b4d290a24492a0f09ede1","modified":1520701025626},{"_id":"public/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1520701025626},{"_id":"public/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1520701025626},{"_id":"public/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1520701025695},{"_id":"public/fonts/Roboto-Black.ttf","hash":"0244e6497a51fb8a38ca7e6fe297b066e2e09af5","modified":1520701025716},{"_id":"public/fonts/Roboto-Light.ttf","hash":"b9ea2eaf26ff8fdcb5aee3e0c2c7a6084ebb6aac","modified":1520701025716},{"_id":"public/fonts/Roboto-Medium.ttf","hash":"3965419aab480c184f66bc5e39c1719a373a4ef6","modified":1520701025717},{"_id":"public/fonts/Roboto-Bold.ttf","hash":"d1864343b543978bd491d40c80010cea50c1b7bf","modified":1520701025717},{"_id":"public/fonts/Roboto-Regular.ttf","hash":"06691e103d4d3ce1f1108d9b7d21254b714a41f8","modified":1520701025718},{"_id":"public/fonts/Roboto-Thin.ttf","hash":"ed5101c3a800f35e925603a406e0c2dc5278b96c","modified":1520701025718}],"Category":[{"name":"Redis","_id":"cjelm4k1m0004hkwcldicinq5"},{"name":"LeetCode","_id":"cjelm4k2s000chkwchfg7qoo1"},{"name":"Mysql","_id":"cjelm4k2x000hhkwcufwob5aq"},{"name":"CentOS","_id":"cjelm4k32000nhkwc431omlx2"},{"name":"Maven","_id":"cjelm4k35000uhkwce407ffus"},{"name":"Git","_id":"cjelm4k390012hkwck4ct2u7p"},{"name":"SpringMVC","_id":"cjelm4k3d001ahkwcdf39mxh0"},{"name":"kafka","_id":"cjelm4k3i001ihkwcj8ozcpx5"},{"name":"内存数据库","_id":"cjelm4k3k001nhkwcrz5f0now"},{"name":"zookeeper","_id":"cjelm4k3l001rhkwcb7c8yi9d"}],"Data":[],"Page":[{"title":"about","date":"2016-11-11T06:13:07.000Z","_content":"\nStay Hungry. Stay Foolish!\n\n# 喜欢的文章\n\n\n> First they came for the Jews  \n\n> and I did not speak out\n\n> because I was not a Jew.\n\n> Then they came for the Communists\n\n> and I did not speak out\n\n> because I was not a Communist.\n\n> Then they came for the trade unionists\n\n> and I did not speak out\n\n> because I was not a trade unionist.\n\n> Then they came for me\n\n> and there was no one left\n\n> to speak out for me.  \n\n\n一个人的沉默，最后会变成整个社会的沉默！\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-11 14:13:07\n---\n\nStay Hungry. Stay Foolish!\n\n# 喜欢的文章\n\n\n> First they came for the Jews  \n\n> and I did not speak out\n\n> because I was not a Jew.\n\n> Then they came for the Communists\n\n> and I did not speak out\n\n> because I was not a Communist.\n\n> Then they came for the trade unionists\n\n> and I did not speak out\n\n> because I was not a trade unionist.\n\n> Then they came for me\n\n> and there was no one left\n\n> to speak out for me.  \n\n\n一个人的沉默，最后会变成整个社会的沉默！\n","updated":"2018-03-10T16:24:15.016Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjelm4k0v0001hkwclar0kcdh","content":"<p>Stay Hungry. Stay Foolish!</p>\n<h1 id=\"喜欢的文章\"><a href=\"#喜欢的文章\" class=\"headerlink\" title=\"喜欢的文章\"></a>喜欢的文章</h1><blockquote>\n<p>First they came for the Jews  </p>\n</blockquote>\n<blockquote>\n<p>and I did not speak out</p>\n</blockquote>\n<blockquote>\n<p>because I was not a Jew.</p>\n</blockquote>\n<blockquote>\n<p>Then they came for the Communists</p>\n</blockquote>\n<blockquote>\n<p>and I did not speak out</p>\n</blockquote>\n<blockquote>\n<p>because I was not a Communist.</p>\n</blockquote>\n<blockquote>\n<p>Then they came for the trade unionists</p>\n</blockquote>\n<blockquote>\n<p>and I did not speak out</p>\n</blockquote>\n<blockquote>\n<p>because I was not a trade unionist.</p>\n</blockquote>\n<blockquote>\n<p>Then they came for me</p>\n</blockquote>\n<blockquote>\n<p>and there was no one left</p>\n</blockquote>\n<blockquote>\n<p>to speak out for me.  </p>\n</blockquote>\n<p>一个人的沉默，最后会变成整个社会的沉默！</p>\n","site":{"data":{}},"excerpt":"","more":"<p>Stay Hungry. Stay Foolish!</p>\n<h1 id=\"喜欢的文章\"><a href=\"#喜欢的文章\" class=\"headerlink\" title=\"喜欢的文章\"></a>喜欢的文章</h1><blockquote>\n<p>First they came for the Jews  </p>\n</blockquote>\n<blockquote>\n<p>and I did not speak out</p>\n</blockquote>\n<blockquote>\n<p>because I was not a Jew.</p>\n</blockquote>\n<blockquote>\n<p>Then they came for the Communists</p>\n</blockquote>\n<blockquote>\n<p>and I did not speak out</p>\n</blockquote>\n<blockquote>\n<p>because I was not a Communist.</p>\n</blockquote>\n<blockquote>\n<p>Then they came for the trade unionists</p>\n</blockquote>\n<blockquote>\n<p>and I did not speak out</p>\n</blockquote>\n<blockquote>\n<p>because I was not a trade unionist.</p>\n</blockquote>\n<blockquote>\n<p>Then they came for me</p>\n</blockquote>\n<blockquote>\n<p>and there was no one left</p>\n</blockquote>\n<blockquote>\n<p>to speak out for me.  </p>\n</blockquote>\n<p>一个人的沉默，最后会变成整个社会的沉默！</p>\n"}],"Post":[{"title":"数据结构----线性表","_content":"\n## 概述\n\n线性表是最基本、最简单、也是最常用的一种数据结构。\n\n在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。\n\n线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。\n\n线性表的操作主要包括：\n1. 计算表的长度n。\n2. 线性表是否为空\n3. 将元素添加到线性表的末尾\n4. 获取第i个元素\n5. 清除线性表\n6. 返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n7. 返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n8. 将新元素插入第i个位置。\n9. 更改第i个元素\n10. 删除第i个元素\n\n由此，对线性表抽象数据类型定义List接口如下：\n```java \npublic interface List<E> {\n    //线性表长度\n    public int size();\n\n    //是否为空\n    public boolean isEmptry();\n\n    //向某位置插入一个元素\n    public boolean add(int i, E e);\n\n    //向最后插入一个元素\n    public boolean add(E e);\n\n    //删除第i个元素\n    public E remove(int i);\n\n    //删除元素e\n    public boolean remove(E e);\n\n    //修改索引为i的元素\n    public boolean set(int i, E e);\n\n    //得到索引为i的元素\n    public E get(int i);\n\n    //得到元素e的索引\n    public int indexOf(E e);\n\n    //得到最后一个元素e的索引\n    public int lastIndexOf(E e);\n\n    //是否存在元素e\n    public boolean contains(E e);\n\n    //清空所有元素\n    public boolean clear();\n}  \n```\n\n## 顺序表\n\n顺序表内部以数组方式来实现。\n\n### 代码展示\n```java\npublic class ArrayList<E> implements List<E> {\n    //初始化大小\n    public static final int DEFAULT_CAPACITY = 10;\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    //元素数组\n    private Object[] elementData;\n    //元素个数\n    private int size = 0;\n\n    /**\n     * 线性表大小\n     *\n     * @return\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 判断线性表是否为空\n     *\n     * @return\n     */\n    public boolean isEmptry() {\n        return size == 0;\n    }\n\n    /**\n     * 初始化线性表，数组默认为空\n     */\n    public ArrayList() {\n        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 根据传入参数实例化线性表，确定数组大小\n     *\n     * @param initialCapacity\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        if (initialCapacity == 0) {\n            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n        } else {\n            elementData = new Object[initialCapacity];\n        }\n    }\n\n    /**\n     * 判断数组容量\n     *\n     * @param minCapacity 最小容量\n     */\n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);\n        }\n        //如果大于数组容量，扩容\n        if (minCapacity > elementData.length) {\n            grow(minCapacity);\n        }\n    }\n\n    /**\n     * 扩容数组容量\n     *\n     * @param minCapacity\n     */\n    private void grow(int minCapacity) {\n        //元素个数\n        int oldDataLength = elementData.length;\n        //容量扩容\n        int newDataLength = oldDataLength + (oldDataLength >> 1);\n        if (newDataLength < minCapacity) {\n            newDataLength = minCapacity;\n        }\n        //将数组copy到新数组上\n        elementData = Arrays.copyOf(elementData, newDataLength);\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param index 索引\n     * @param o     添加元素\n     * @return\n     */\n    public boolean add(int index, Object o) {\n        //判断i是否大于数组容量\n        rangeCheckForAdd(index);\n        //数组容量加1\n        ensureCapacityInternal(size + 1);\n\n        //数组从索引为index后面的数，依次向后移动一位\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        //索引为index的元素赋值为o\n        elementData[index] = o;\n        //线性表大小+1\n        size++;\n        return true;\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param object 元素\n     * @return\n     */\n    public boolean add(Object object) {\n        //判断数组大小\n        ensureCapacityInternal(size + 1);\n        //赋值\n        elementData[size++] = object;\n\n        return true;\n    }\n\n    /**\n     * 删除索引为index的元素\n     *\n     * @param index 索引\n     * @return\n     */\n    public E remove(int index) {\n        //判断是否越界\n        rangeCheck(index);\n        //得到索引为index的元素\n        E oldValue = elementData(index);\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index + 1, elementData, index, numMoved);\n        //GC回收\n        elementData[--size] = null;\n\n        return oldValue;\n    }\n\n    /**\n     * 删除元素\n     *\n     * @param object\n     * @return\n     */\n    public boolean remove(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    remove(i);\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (object.equals(elementData[i])) {\n                    remove(i);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置索引为index的元素为object\n     *\n     * @param index  索引\n     * @param object 存入元素\n     * @return\n     */\n    public boolean set(int index, Object object) {\n        //判断是否越界\n        rangeCheck(index);\n        //设值\n        elementData[index] = object;\n\n        return true;\n    }\n\n    /**\n     * 得到索引为i的元素\n     *\n     * @param i\n     * @return\n     */\n    public E get(int i) {\n        //判断索引i是否越界\n        rangeCheck(i);\n        //取值\n        return elementData(i);\n    }\n\n    /**\n     * 首次出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int indexOf(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 元素最后出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int lastIndexOf(Object object) {\n        if (object == null) {\n            for (int i = size - 1; i < 0; i--) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = size - 1; i < 0; i--) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 是否包含元素元素o\n     *\n     * @param object\n     * @return\n     */\n    public boolean contains(Object object) {\n        //判断是否存在索引\n        return indexOf(object) >= 0;\n    }\n\n    /**\n     * 清除线性表\n     *\n     * @return\n     */\n    public boolean clear() {\n        //数组元素设为null，GC回收\n        for (int i = 0; i < size; i++) {\n            elementData[i] = null;\n        }\n        //线性表大小设为0\n        this.size = 0;\n\n        return true;\n    }\n\n    //判断数组边界问题\n    private void rangeCheck(int index) {\n        if (index >= size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    //判断添加数组边界问题\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    private E elementData(int i) {\n        E e = (E) elementData[i];\n        return e;\n    }\n}\n```","source":"_drafts/linear-list.md","raw":"---\ntitle: 数据结构----线性表\n---\n\n## 概述\n\n线性表是最基本、最简单、也是最常用的一种数据结构。\n\n在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。\n\n线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。\n\n线性表的操作主要包括：\n1. 计算表的长度n。\n2. 线性表是否为空\n3. 将元素添加到线性表的末尾\n4. 获取第i个元素\n5. 清除线性表\n6. 返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n7. 返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n8. 将新元素插入第i个位置。\n9. 更改第i个元素\n10. 删除第i个元素\n\n由此，对线性表抽象数据类型定义List接口如下：\n```java \npublic interface List<E> {\n    //线性表长度\n    public int size();\n\n    //是否为空\n    public boolean isEmptry();\n\n    //向某位置插入一个元素\n    public boolean add(int i, E e);\n\n    //向最后插入一个元素\n    public boolean add(E e);\n\n    //删除第i个元素\n    public E remove(int i);\n\n    //删除元素e\n    public boolean remove(E e);\n\n    //修改索引为i的元素\n    public boolean set(int i, E e);\n\n    //得到索引为i的元素\n    public E get(int i);\n\n    //得到元素e的索引\n    public int indexOf(E e);\n\n    //得到最后一个元素e的索引\n    public int lastIndexOf(E e);\n\n    //是否存在元素e\n    public boolean contains(E e);\n\n    //清空所有元素\n    public boolean clear();\n}  \n```\n\n## 顺序表\n\n顺序表内部以数组方式来实现。\n\n### 代码展示\n```java\npublic class ArrayList<E> implements List<E> {\n    //初始化大小\n    public static final int DEFAULT_CAPACITY = 10;\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    //元素数组\n    private Object[] elementData;\n    //元素个数\n    private int size = 0;\n\n    /**\n     * 线性表大小\n     *\n     * @return\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 判断线性表是否为空\n     *\n     * @return\n     */\n    public boolean isEmptry() {\n        return size == 0;\n    }\n\n    /**\n     * 初始化线性表，数组默认为空\n     */\n    public ArrayList() {\n        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 根据传入参数实例化线性表，确定数组大小\n     *\n     * @param initialCapacity\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        if (initialCapacity == 0) {\n            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n        } else {\n            elementData = new Object[initialCapacity];\n        }\n    }\n\n    /**\n     * 判断数组容量\n     *\n     * @param minCapacity 最小容量\n     */\n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);\n        }\n        //如果大于数组容量，扩容\n        if (minCapacity > elementData.length) {\n            grow(minCapacity);\n        }\n    }\n\n    /**\n     * 扩容数组容量\n     *\n     * @param minCapacity\n     */\n    private void grow(int minCapacity) {\n        //元素个数\n        int oldDataLength = elementData.length;\n        //容量扩容\n        int newDataLength = oldDataLength + (oldDataLength >> 1);\n        if (newDataLength < minCapacity) {\n            newDataLength = minCapacity;\n        }\n        //将数组copy到新数组上\n        elementData = Arrays.copyOf(elementData, newDataLength);\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param index 索引\n     * @param o     添加元素\n     * @return\n     */\n    public boolean add(int index, Object o) {\n        //判断i是否大于数组容量\n        rangeCheckForAdd(index);\n        //数组容量加1\n        ensureCapacityInternal(size + 1);\n\n        //数组从索引为index后面的数，依次向后移动一位\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        //索引为index的元素赋值为o\n        elementData[index] = o;\n        //线性表大小+1\n        size++;\n        return true;\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param object 元素\n     * @return\n     */\n    public boolean add(Object object) {\n        //判断数组大小\n        ensureCapacityInternal(size + 1);\n        //赋值\n        elementData[size++] = object;\n\n        return true;\n    }\n\n    /**\n     * 删除索引为index的元素\n     *\n     * @param index 索引\n     * @return\n     */\n    public E remove(int index) {\n        //判断是否越界\n        rangeCheck(index);\n        //得到索引为index的元素\n        E oldValue = elementData(index);\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index + 1, elementData, index, numMoved);\n        //GC回收\n        elementData[--size] = null;\n\n        return oldValue;\n    }\n\n    /**\n     * 删除元素\n     *\n     * @param object\n     * @return\n     */\n    public boolean remove(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    remove(i);\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (object.equals(elementData[i])) {\n                    remove(i);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置索引为index的元素为object\n     *\n     * @param index  索引\n     * @param object 存入元素\n     * @return\n     */\n    public boolean set(int index, Object object) {\n        //判断是否越界\n        rangeCheck(index);\n        //设值\n        elementData[index] = object;\n\n        return true;\n    }\n\n    /**\n     * 得到索引为i的元素\n     *\n     * @param i\n     * @return\n     */\n    public E get(int i) {\n        //判断索引i是否越界\n        rangeCheck(i);\n        //取值\n        return elementData(i);\n    }\n\n    /**\n     * 首次出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int indexOf(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 元素最后出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int lastIndexOf(Object object) {\n        if (object == null) {\n            for (int i = size - 1; i < 0; i--) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = size - 1; i < 0; i--) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 是否包含元素元素o\n     *\n     * @param object\n     * @return\n     */\n    public boolean contains(Object object) {\n        //判断是否存在索引\n        return indexOf(object) >= 0;\n    }\n\n    /**\n     * 清除线性表\n     *\n     * @return\n     */\n    public boolean clear() {\n        //数组元素设为null，GC回收\n        for (int i = 0; i < size; i++) {\n            elementData[i] = null;\n        }\n        //线性表大小设为0\n        this.size = 0;\n\n        return true;\n    }\n\n    //判断数组边界问题\n    private void rangeCheck(int index) {\n        if (index >= size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    //判断添加数组边界问题\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    private E elementData(int i) {\n        E e = (E) elementData[i];\n        return e;\n    }\n}\n```","slug":"linear-list","published":0,"date":"2018-03-10T14:50:11.755Z","updated":"2018-03-10T14:50:11.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k0q0000hkwcnuufft35","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线性表是最基本、最简单、也是最常用的一种数据结构。</p>\n<p>在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。</p>\n<p>线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。</p>\n<p>线性表的操作主要包括：</p>\n<ol>\n<li>计算表的长度n。</li>\n<li>线性表是否为空</li>\n<li>将元素添加到线性表的末尾</li>\n<li>获取第i个元素</li>\n<li>清除线性表</li>\n<li>返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>将新元素插入第i个位置。</li>\n<li>更改第i个元素</li>\n<li>删除第i个元素</li>\n</ol>\n<p>由此，对线性表抽象数据类型定义List接口如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//线性表长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向某位置插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向最后插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除第i个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到最后一个元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否存在元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//清空所有元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h2><p>顺序表内部以数组方式来实现。</p>\n<h3 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化大小</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//元素数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">    <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 线性表大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断线性表是否为空</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化线性表，数组默认为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据传入参数实例化线性表，确定数组大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span> + initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity 最小容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果大于数组容量，扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &gt; elementData.length) &#123;</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩容数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldDataLength = elementData.length;</span><br><span class=\"line\">        <span class=\"comment\">//容量扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newDataLength = oldDataLength + (oldDataLength &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newDataLength &lt; minCapacity) &#123;</span><br><span class=\"line\">            newDataLength = minCapacity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将数组copy到新数组上</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newDataLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o     添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断i是否大于数组容量</span></span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\">        <span class=\"comment\">//数组容量加1</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//数组从索引为index后面的数，依次向后移动一位</span></span><br><span class=\"line\">        System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>, size - index);</span><br><span class=\"line\">        <span class=\"comment\">//索引为index的元素赋值为o</span></span><br><span class=\"line\">        elementData[index] = o;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小+1</span></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断数组大小</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        elementData[size++] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除索引为index的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//得到索引为index的元素</span></span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index + <span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">        <span class=\"comment\">//GC回收</span></span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (object.equals(elementData[i])) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置索引为index的元素为object</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index  索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 存入元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//设值</span></span><br><span class=\"line\">        elementData[index] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到索引为i的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断索引i是否越界</span></span><br><span class=\"line\">        rangeCheck(i);</span><br><span class=\"line\">        <span class=\"comment\">//取值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> elementData(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 首次出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素最后出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否包含元素元素o</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否存在索引</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> indexOf(object) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清除线性表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//数组元素设为null，GC回收</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小设为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断添加数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        E e = (E) elementData[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线性表是最基本、最简单、也是最常用的一种数据结构。</p>\n<p>在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。</p>\n<p>线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。</p>\n<p>线性表的操作主要包括：</p>\n<ol>\n<li>计算表的长度n。</li>\n<li>线性表是否为空</li>\n<li>将元素添加到线性表的末尾</li>\n<li>获取第i个元素</li>\n<li>清除线性表</li>\n<li>返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>将新元素插入第i个位置。</li>\n<li>更改第i个元素</li>\n<li>删除第i个元素</li>\n</ol>\n<p>由此，对线性表抽象数据类型定义List接口如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//线性表长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向某位置插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向最后插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除第i个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到最后一个元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否存在元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//清空所有元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h2><p>顺序表内部以数组方式来实现。</p>\n<h3 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化大小</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//元素数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">    <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 线性表大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断线性表是否为空</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化线性表，数组默认为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据传入参数实例化线性表，确定数组大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span> + initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity 最小容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果大于数组容量，扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &gt; elementData.length) &#123;</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩容数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldDataLength = elementData.length;</span><br><span class=\"line\">        <span class=\"comment\">//容量扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newDataLength = oldDataLength + (oldDataLength &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newDataLength &lt; minCapacity) &#123;</span><br><span class=\"line\">            newDataLength = minCapacity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将数组copy到新数组上</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newDataLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o     添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断i是否大于数组容量</span></span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\">        <span class=\"comment\">//数组容量加1</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//数组从索引为index后面的数，依次向后移动一位</span></span><br><span class=\"line\">        System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>, size - index);</span><br><span class=\"line\">        <span class=\"comment\">//索引为index的元素赋值为o</span></span><br><span class=\"line\">        elementData[index] = o;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小+1</span></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断数组大小</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        elementData[size++] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除索引为index的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//得到索引为index的元素</span></span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index + <span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">        <span class=\"comment\">//GC回收</span></span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (object.equals(elementData[i])) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置索引为index的元素为object</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index  索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 存入元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//设值</span></span><br><span class=\"line\">        elementData[index] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到索引为i的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断索引i是否越界</span></span><br><span class=\"line\">        rangeCheck(i);</span><br><span class=\"line\">        <span class=\"comment\">//取值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> elementData(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 首次出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素最后出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否包含元素元素o</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否存在索引</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> indexOf(object) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清除线性表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//数组元素设为null，GC回收</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小设为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断添加数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        E e = (E) elementData[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构----栈","_content":"","source":"_drafts/stack.md","raw":"---\ntitle: 数据结构----栈\n---\n","slug":"stack","published":0,"date":"2018-03-10T14:50:11.756Z","updated":"2018-03-10T14:50:11.756Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k0w0002hkwc3pp4twnl","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"Redis集群部署","_content":"<p align='center'>\n![](https://redis.io/images/redis-white.png)\n</p>\n\n\n## 下载Redis-3.2.9\n```\nwget -c http://download.redis.io/releases/redis-3.2.9.tar.gz\n```\n## 解压\n```\ntar xzf redis-3.2.9.tar.gz -C /usr/local\n```\n## 安装\n","source":"_drafts/Redis/Redis集群部署.md","raw":"---\ntitle: Redis集群部署\ntags: [Redis]\ncategories: [Redis]\n---\n<p align='center'>\n![](https://redis.io/images/redis-white.png)\n</p>\n\n\n## 下载Redis-3.2.9\n```\nwget -c http://download.redis.io/releases/redis-3.2.9.tar.gz\n```\n## 解压\n```\ntar xzf redis-3.2.9.tar.gz -C /usr/local\n```\n## 安装\n","slug":"Redis/Redis集群部署","published":0,"date":"2018-03-10T14:50:11.754Z","updated":"2018-03-10T14:50:11.755Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k1l0003hkwc01thxj53","content":"<p align=\"center\"><br><img src=\"https://redis.io/images/redis-white.png\" alt=\"\"><br></p>\n\n\n<h2 id=\"下载Redis-3-2-9\"><a href=\"#下载Redis-3-2-9\" class=\"headerlink\" title=\"下载Redis-3.2.9\"></a>下载Redis-3.2.9</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-3.2.9.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2>","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"https://redis.io/images/redis-white.png\" alt=\"\"><br></p>\n\n\n<h2 id=\"下载Redis-3-2-9\"><a href=\"#下载Redis-3-2-9\" class=\"headerlink\" title=\"下载Redis-3.2.9\"></a>下载Redis-3.2.9</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-3.2.9.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2>"},{"title":"数据结构----线性表","_content":"\n## 概述\n\n线性表是最基本、最简单、也是最常用的一种数据结构。\n\n在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。\n\n线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。\n\n线性表的操作主要包括：\n1. 计算表的长度n。\n2. 线性表是否为空\n3. 将元素添加到线性表的末尾\n4. 获取第i个元素\n5. 清除线性表\n6. 返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n7. 返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n8. 将新元素插入第i个位置。\n9. 更改第i个元素\n10. 删除第i个元素\n\n由此，对线性表抽象数据类型定义List接口如下：\n```java \npublic interface List<E> {\n    //线性表长度\n    public int size();\n\n    //是否为空\n    public boolean isEmptry();\n\n    //向某位置插入一个元素\n    public boolean add(int i, E e);\n\n    //向最后插入一个元素\n    public boolean add(E e);\n\n    //删除第i个元素\n    public E remove(int i);\n\n    //删除元素e\n    public boolean remove(E e);\n\n    //修改索引为i的元素\n    public boolean set(int i, E e);\n\n    //得到索引为i的元素\n    public E get(int i);\n\n    //得到元素e的索引\n    public int indexOf(E e);\n\n    //得到最后一个元素e的索引\n    public int lastIndexOf(E e);\n\n    //是否存在元素e\n    public boolean contains(E e);\n\n    //清空所有元素\n    public boolean clear();\n}  \n```\n\n## 顺序表\n\n顺序表内部以数组方式来实现。\n\n### 代码展示\n```java\npublic class ArrayList<E> implements List<E> {\n    //初始化大小\n    public static final int DEFAULT_CAPACITY = 10;\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    //元素数组\n    private Object[] elementData;\n    //元素个数\n    private int size = 0;\n\n    /**\n     * 线性表大小\n     *\n     * @return\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 判断线性表是否为空\n     *\n     * @return\n     */\n    public boolean isEmptry() {\n        return size == 0;\n    }\n\n    /**\n     * 初始化线性表，数组默认为空\n     */\n    public ArrayList() {\n        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 根据传入参数实例化线性表，确定数组大小\n     *\n     * @param initialCapacity\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        if (initialCapacity == 0) {\n            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n        } else {\n            elementData = new Object[initialCapacity];\n        }\n    }\n\n    /**\n     * 判断数组容量\n     *\n     * @param minCapacity 最小容量\n     */\n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);\n        }\n        //如果大于数组容量，扩容\n        if (minCapacity > elementData.length) {\n            grow(minCapacity);\n        }\n    }\n\n    /**\n     * 扩容数组容量\n     *\n     * @param minCapacity\n     */\n    private void grow(int minCapacity) {\n        //元素个数\n        int oldDataLength = elementData.length;\n        //容量扩容\n        int newDataLength = oldDataLength + (oldDataLength >> 1);\n        if (newDataLength < minCapacity) {\n            newDataLength = minCapacity;\n        }\n        //将数组copy到新数组上\n        elementData = Arrays.copyOf(elementData, newDataLength);\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param index 索引\n     * @param o     添加元素\n     * @return\n     */\n    public boolean add(int index, Object o) {\n        //判断i是否大于数组容量\n        rangeCheckForAdd(index);\n        //数组容量加1\n        ensureCapacityInternal(size + 1);\n\n        //数组从索引为index后面的数，依次向后移动一位\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        //索引为index的元素赋值为o\n        elementData[index] = o;\n        //线性表大小+1\n        size++;\n        return true;\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param object 元素\n     * @return\n     */\n    public boolean add(Object object) {\n        //判断数组大小\n        ensureCapacityInternal(size + 1);\n        //赋值\n        elementData[size++] = object;\n\n        return true;\n    }\n\n    /**\n     * 删除索引为index的元素\n     *\n     * @param index 索引\n     * @return\n     */\n    public E remove(int index) {\n        //判断是否越界\n        rangeCheck(index);\n        //得到索引为index的元素\n        E oldValue = elementData(index);\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index + 1, elementData, index, numMoved);\n        //GC回收\n        elementData[--size] = null;\n\n        return oldValue;\n    }\n\n    /**\n     * 删除元素\n     *\n     * @param object\n     * @return\n     */\n    public boolean remove(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    remove(i);\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (object.equals(elementData[i])) {\n                    remove(i);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置索引为index的元素为object\n     *\n     * @param index  索引\n     * @param object 存入元素\n     * @return\n     */\n    public boolean set(int index, Object object) {\n        //判断是否越界\n        rangeCheck(index);\n        //设值\n        elementData[index] = object;\n\n        return true;\n    }\n\n    /**\n     * 得到索引为i的元素\n     *\n     * @param i\n     * @return\n     */\n    public E get(int i) {\n        //判断索引i是否越界\n        rangeCheck(i);\n        //取值\n        return elementData(i);\n    }\n\n    /**\n     * 首次出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int indexOf(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 元素最后出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int lastIndexOf(Object object) {\n        if (object == null) {\n            for (int i = size - 1; i < 0; i--) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = size - 1; i < 0; i--) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 是否包含元素元素o\n     *\n     * @param object\n     * @return\n     */\n    public boolean contains(Object object) {\n        //判断是否存在索引\n        return indexOf(object) >= 0;\n    }\n\n    /**\n     * 清除线性表\n     *\n     * @return\n     */\n    public boolean clear() {\n        //数组元素设为null，GC回收\n        for (int i = 0; i < size; i++) {\n            elementData[i] = null;\n        }\n        //线性表大小设为0\n        this.size = 0;\n\n        return true;\n    }\n\n    //判断数组边界问题\n    private void rangeCheck(int index) {\n        if (index >= size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    //判断添加数组边界问题\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    private E elementData(int i) {\n        E e = (E) elementData[i];\n        return e;\n    }\n}\n```","source":"_drafts/数据结构/数据结构-线性表.md","raw":"---\ntitle: 数据结构----线性表\n---\n\n## 概述\n\n线性表是最基本、最简单、也是最常用的一种数据结构。\n\n在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。\n\n线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。\n\n线性表的操作主要包括：\n1. 计算表的长度n。\n2. 线性表是否为空\n3. 将元素添加到线性表的末尾\n4. 获取第i个元素\n5. 清除线性表\n6. 返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n7. 返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。\n8. 将新元素插入第i个位置。\n9. 更改第i个元素\n10. 删除第i个元素\n\n由此，对线性表抽象数据类型定义List接口如下：\n```java \npublic interface List<E> {\n    //线性表长度\n    public int size();\n\n    //是否为空\n    public boolean isEmptry();\n\n    //向某位置插入一个元素\n    public boolean add(int i, E e);\n\n    //向最后插入一个元素\n    public boolean add(E e);\n\n    //删除第i个元素\n    public E remove(int i);\n\n    //删除元素e\n    public boolean remove(E e);\n\n    //修改索引为i的元素\n    public boolean set(int i, E e);\n\n    //得到索引为i的元素\n    public E get(int i);\n\n    //得到元素e的索引\n    public int indexOf(E e);\n\n    //得到最后一个元素e的索引\n    public int lastIndexOf(E e);\n\n    //是否存在元素e\n    public boolean contains(E e);\n\n    //清空所有元素\n    public boolean clear();\n}  \n```\n\n## 顺序表\n\n顺序表内部以数组方式来实现。\n\n### 代码展示\n```java\npublic class ArrayList<E> implements List<E> {\n    //初始化大小\n    public static final int DEFAULT_CAPACITY = 10;\n    private static final Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = {};\n\n    //元素数组\n    private Object[] elementData;\n    //元素个数\n    private int size = 0;\n\n    /**\n     * 线性表大小\n     *\n     * @return\n     */\n    public int size() {\n        return size;\n    }\n\n    /**\n     * 判断线性表是否为空\n     *\n     * @return\n     */\n    public boolean isEmptry() {\n        return size == 0;\n    }\n\n    /**\n     * 初始化线性表，数组默认为空\n     */\n    public ArrayList() {\n        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n    }\n\n    /**\n     * 根据传入参数实例化线性表，确定数组大小\n     *\n     * @param initialCapacity\n     */\n    public ArrayList(int initialCapacity) {\n        if (initialCapacity < 0)\n            throw new IllegalArgumentException(\"Illegal Capacity: \" + initialCapacity);\n        if (initialCapacity == 0) {\n            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;\n        } else {\n            elementData = new Object[initialCapacity];\n        }\n    }\n\n    /**\n     * 判断数组容量\n     *\n     * @param minCapacity 最小容量\n     */\n    private void ensureCapacityInternal(int minCapacity) {\n        if (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) {\n            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);\n        }\n        //如果大于数组容量，扩容\n        if (minCapacity > elementData.length) {\n            grow(minCapacity);\n        }\n    }\n\n    /**\n     * 扩容数组容量\n     *\n     * @param minCapacity\n     */\n    private void grow(int minCapacity) {\n        //元素个数\n        int oldDataLength = elementData.length;\n        //容量扩容\n        int newDataLength = oldDataLength + (oldDataLength >> 1);\n        if (newDataLength < minCapacity) {\n            newDataLength = minCapacity;\n        }\n        //将数组copy到新数组上\n        elementData = Arrays.copyOf(elementData, newDataLength);\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param index 索引\n     * @param o     添加元素\n     * @return\n     */\n    public boolean add(int index, Object o) {\n        //判断i是否大于数组容量\n        rangeCheckForAdd(index);\n        //数组容量加1\n        ensureCapacityInternal(size + 1);\n\n        //数组从索引为index后面的数，依次向后移动一位\n        System.arraycopy(elementData, index, elementData, index + 1, size - index);\n        //索引为index的元素赋值为o\n        elementData[index] = o;\n        //线性表大小+1\n        size++;\n        return true;\n    }\n\n    /**\n     * 添加元素\n     *\n     * @param object 元素\n     * @return\n     */\n    public boolean add(Object object) {\n        //判断数组大小\n        ensureCapacityInternal(size + 1);\n        //赋值\n        elementData[size++] = object;\n\n        return true;\n    }\n\n    /**\n     * 删除索引为index的元素\n     *\n     * @param index 索引\n     * @return\n     */\n    public E remove(int index) {\n        //判断是否越界\n        rangeCheck(index);\n        //得到索引为index的元素\n        E oldValue = elementData(index);\n        int numMoved = size - index - 1;\n        if (numMoved > 0)\n            System.arraycopy(elementData, index + 1, elementData, index, numMoved);\n        //GC回收\n        elementData[--size] = null;\n\n        return oldValue;\n    }\n\n    /**\n     * 删除元素\n     *\n     * @param object\n     * @return\n     */\n    public boolean remove(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    remove(i);\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (object.equals(elementData[i])) {\n                    remove(i);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * 设置索引为index的元素为object\n     *\n     * @param index  索引\n     * @param object 存入元素\n     * @return\n     */\n    public boolean set(int index, Object object) {\n        //判断是否越界\n        rangeCheck(index);\n        //设值\n        elementData[index] = object;\n\n        return true;\n    }\n\n    /**\n     * 得到索引为i的元素\n     *\n     * @param i\n     * @return\n     */\n    public E get(int i) {\n        //判断索引i是否越界\n        rangeCheck(i);\n        //取值\n        return elementData(i);\n    }\n\n    /**\n     * 首次出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int indexOf(Object object) {\n        if (object == null) {\n            for (int i = 0; i < size; i++) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = 0; i < size; i++) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 元素最后出现的索引\n     *\n     * @param object\n     * @return\n     */\n    public int lastIndexOf(Object object) {\n        if (object == null) {\n            for (int i = size - 1; i < 0; i--) {\n                if (null == elementData[i]) {\n                    return i;\n                }\n            }\n        } else {\n            for (int i = size - 1; i < 0; i--) {\n                if (elementData[i].equals(object)) {\n                    return i;\n                }\n            }\n        }\n        return -1;\n    }\n\n    /**\n     * 是否包含元素元素o\n     *\n     * @param object\n     * @return\n     */\n    public boolean contains(Object object) {\n        //判断是否存在索引\n        return indexOf(object) >= 0;\n    }\n\n    /**\n     * 清除线性表\n     *\n     * @return\n     */\n    public boolean clear() {\n        //数组元素设为null，GC回收\n        for (int i = 0; i < size; i++) {\n            elementData[i] = null;\n        }\n        //线性表大小设为0\n        this.size = 0;\n\n        return true;\n    }\n\n    //判断数组边界问题\n    private void rangeCheck(int index) {\n        if (index >= size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    //判断添加数组边界问题\n    private void rangeCheckForAdd(int index) {\n        if (index > size || index < 0)\n            throw new IndexOutOfBoundsException(\"Index: \" + index + \", Size: \" + size);\n    }\n\n    private E elementData(int i) {\n        E e = (E) elementData[i];\n        return e;\n    }\n}\n```","slug":"数据结构/数据结构-线性表","published":0,"date":"2018-03-10T14:50:11.757Z","updated":"2018-03-10T14:50:11.758Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2n0008hkwct4gbpekh","content":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线性表是最基本、最简单、也是最常用的一种数据结构。</p>\n<p>在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。</p>\n<p>线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。</p>\n<p>线性表的操作主要包括：</p>\n<ol>\n<li>计算表的长度n。</li>\n<li>线性表是否为空</li>\n<li>将元素添加到线性表的末尾</li>\n<li>获取第i个元素</li>\n<li>清除线性表</li>\n<li>返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>将新元素插入第i个位置。</li>\n<li>更改第i个元素</li>\n<li>删除第i个元素</li>\n</ol>\n<p>由此，对线性表抽象数据类型定义List接口如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//线性表长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向某位置插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向最后插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除第i个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到最后一个元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否存在元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//清空所有元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h2><p>顺序表内部以数组方式来实现。</p>\n<h3 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化大小</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//元素数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">    <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 线性表大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断线性表是否为空</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化线性表，数组默认为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据传入参数实例化线性表，确定数组大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span> + initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity 最小容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果大于数组容量，扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &gt; elementData.length) &#123;</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩容数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldDataLength = elementData.length;</span><br><span class=\"line\">        <span class=\"comment\">//容量扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newDataLength = oldDataLength + (oldDataLength &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newDataLength &lt; minCapacity) &#123;</span><br><span class=\"line\">            newDataLength = minCapacity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将数组copy到新数组上</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newDataLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o     添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断i是否大于数组容量</span></span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\">        <span class=\"comment\">//数组容量加1</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//数组从索引为index后面的数，依次向后移动一位</span></span><br><span class=\"line\">        System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>, size - index);</span><br><span class=\"line\">        <span class=\"comment\">//索引为index的元素赋值为o</span></span><br><span class=\"line\">        elementData[index] = o;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小+1</span></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断数组大小</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        elementData[size++] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除索引为index的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//得到索引为index的元素</span></span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index + <span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">        <span class=\"comment\">//GC回收</span></span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (object.equals(elementData[i])) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置索引为index的元素为object</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index  索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 存入元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//设值</span></span><br><span class=\"line\">        elementData[index] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到索引为i的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断索引i是否越界</span></span><br><span class=\"line\">        rangeCheck(i);</span><br><span class=\"line\">        <span class=\"comment\">//取值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> elementData(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 首次出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素最后出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否包含元素元素o</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否存在索引</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> indexOf(object) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清除线性表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//数组元素设为null，GC回收</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小设为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断添加数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        E e = (E) elementData[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<h2 id=\"概述\"><a href=\"#概述\" class=\"headerlink\" title=\"概述\"></a>概述</h2><p>线性表是最基本、最简单、也是最常用的一种数据结构。</p>\n<p>在线性表中数据元素之间的关系是线性，数据元素可以看成是排列在一条线上或一个环上。</p>\n<p>线性表分为静态线性表和动态线性表，常见的有顺序表(静态的)、单向链表(动态的)和双向链表(动态的)。</p>\n<p>线性表的操作主要包括：</p>\n<ol>\n<li>计算表的长度n。</li>\n<li>线性表是否为空</li>\n<li>将元素添加到线性表的末尾</li>\n<li>获取第i个元素</li>\n<li>清除线性表</li>\n<li>返回列表中首次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>返回列表中最后一次出现指定元素的索引，如果列表不包含此元素，则返回 -1。</li>\n<li>将新元素插入第i个位置。</li>\n<li>更改第i个元素</li>\n<li>删除第i个元素</li>\n</ol>\n<p>由此，对线性表抽象数据类型定义List接口如下：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">interface</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//线性表长度</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否为空</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向某位置插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//向最后插入一个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除第i个元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//删除元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//修改索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> i, E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到索引为i的元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//得到最后一个元素e的索引</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//是否存在元素e</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(E e)</span></span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//清空所有元素</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span></span>;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"顺序表\"><a href=\"#顺序表\" class=\"headerlink\" title=\"顺序表\"></a>顺序表</h2><p>顺序表内部以数组方式来实现。</p>\n<h3 id=\"代码展示\"><a href=\"#代码展示\" class=\"headerlink\" title=\"代码展示\"></a>代码展示</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br><span class=\"line\">194</span><br><span class=\"line\">195</span><br><span class=\"line\">196</span><br><span class=\"line\">197</span><br><span class=\"line\">198</span><br><span class=\"line\">199</span><br><span class=\"line\">200</span><br><span class=\"line\">201</span><br><span class=\"line\">202</span><br><span class=\"line\">203</span><br><span class=\"line\">204</span><br><span class=\"line\">205</span><br><span class=\"line\">206</span><br><span class=\"line\">207</span><br><span class=\"line\">208</span><br><span class=\"line\">209</span><br><span class=\"line\">210</span><br><span class=\"line\">211</span><br><span class=\"line\">212</span><br><span class=\"line\">213</span><br><span class=\"line\">214</span><br><span class=\"line\">215</span><br><span class=\"line\">216</span><br><span class=\"line\">217</span><br><span class=\"line\">218</span><br><span class=\"line\">219</span><br><span class=\"line\">220</span><br><span class=\"line\">221</span><br><span class=\"line\">222</span><br><span class=\"line\">223</span><br><span class=\"line\">224</span><br><span class=\"line\">225</span><br><span class=\"line\">226</span><br><span class=\"line\">227</span><br><span class=\"line\">228</span><br><span class=\"line\">229</span><br><span class=\"line\">230</span><br><span class=\"line\">231</span><br><span class=\"line\">232</span><br><span class=\"line\">233</span><br><span class=\"line\">234</span><br><span class=\"line\">235</span><br><span class=\"line\">236</span><br><span class=\"line\">237</span><br><span class=\"line\">238</span><br><span class=\"line\">239</span><br><span class=\"line\">240</span><br><span class=\"line\">241</span><br><span class=\"line\">242</span><br><span class=\"line\">243</span><br><span class=\"line\">244</span><br><span class=\"line\">245</span><br><span class=\"line\">246</span><br><span class=\"line\">247</span><br><span class=\"line\">248</span><br><span class=\"line\">249</span><br><span class=\"line\">250</span><br><span class=\"line\">251</span><br><span class=\"line\">252</span><br><span class=\"line\">253</span><br><span class=\"line\">254</span><br><span class=\"line\">255</span><br><span class=\"line\">256</span><br><span class=\"line\">257</span><br><span class=\"line\">258</span><br><span class=\"line\">259</span><br><span class=\"line\">260</span><br><span class=\"line\">261</span><br><span class=\"line\">262</span><br><span class=\"line\">263</span><br><span class=\"line\">264</span><br><span class=\"line\">265</span><br><span class=\"line\">266</span><br><span class=\"line\">267</span><br><span class=\"line\">268</span><br><span class=\"line\">269</span><br><span class=\"line\">270</span><br><span class=\"line\">271</span><br><span class=\"line\">272</span><br><span class=\"line\">273</span><br><span class=\"line\">274</span><br><span class=\"line\">275</span><br><span class=\"line\">276</span><br><span class=\"line\">277</span><br><span class=\"line\">278</span><br><span class=\"line\">279</span><br><span class=\"line\">280</span><br><span class=\"line\">281</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">ArrayList</span>&lt;<span class=\"title\">E</span>&gt; <span class=\"keyword\">implements</span> <span class=\"title\">List</span>&lt;<span class=\"title\">E</span>&gt; </span>&#123;</span><br><span class=\"line\">    <span class=\"comment\">//初始化大小</span></span><br><span class=\"line\">    <span class=\"keyword\">public</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> <span class=\"keyword\">int</span> DEFAULT_CAPACITY = <span class=\"number\">10</span>;</span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">static</span> <span class=\"keyword\">final</span> Object[] DEFAULTCAPACITY_EMPTY_ELEMENTDATA = &#123;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//元素数组</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> Object[] elementData;</span><br><span class=\"line\">    <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">    <span class=\"keyword\">private</span> <span class=\"keyword\">int</span> size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 线性表大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">size</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断线性表是否为空</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">isEmptry</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> size == <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 初始化线性表，数组默认为空</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 根据传入参数实例化线性表，确定数组大小</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> initialCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"title\">ArrayList</span><span class=\"params\">(<span class=\"keyword\">int</span> initialCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IllegalArgumentException(<span class=\"string\">\"Illegal Capacity: \"</span> + initialCapacity);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (initialCapacity == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">            elementData = DEFAULTCAPACITY_EMPTY_ELEMENTDATA;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            elementData = <span class=\"keyword\">new</span> Object[initialCapacity];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 判断数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity 最小容量</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">ensureCapacityInternal</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (elementData == DEFAULTCAPACITY_EMPTY_ELEMENTDATA) &#123;</span><br><span class=\"line\">            minCapacity = Math.max(minCapacity, DEFAULT_CAPACITY);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//如果大于数组容量，扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (minCapacity &gt; elementData.length) &#123;</span><br><span class=\"line\">            grow(minCapacity);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 扩容数组容量</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> minCapacity</span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">grow</span><span class=\"params\">(<span class=\"keyword\">int</span> minCapacity)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//元素个数</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> oldDataLength = elementData.length;</span><br><span class=\"line\">        <span class=\"comment\">//容量扩容</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> newDataLength = oldDataLength + (oldDataLength &gt;&gt; <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (newDataLength &lt; minCapacity) &#123;</span><br><span class=\"line\">            newDataLength = minCapacity;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//将数组copy到新数组上</span></span><br><span class=\"line\">        elementData = Arrays.copyOf(elementData, newDataLength);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> o     添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object o)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断i是否大于数组容量</span></span><br><span class=\"line\">        rangeCheckForAdd(index);</span><br><span class=\"line\">        <span class=\"comment\">//数组容量加1</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"comment\">//数组从索引为index后面的数，依次向后移动一位</span></span><br><span class=\"line\">        System.arraycopy(elementData, index, elementData, index + <span class=\"number\">1</span>, size - index);</span><br><span class=\"line\">        <span class=\"comment\">//索引为index的元素赋值为o</span></span><br><span class=\"line\">        elementData[index] = o;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小+1</span></span><br><span class=\"line\">        size++;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 添加元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">add</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断数组大小</span></span><br><span class=\"line\">        ensureCapacityInternal(size + <span class=\"number\">1</span>);</span><br><span class=\"line\">        <span class=\"comment\">//赋值</span></span><br><span class=\"line\">        elementData[size++] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除索引为index的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index 索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">remove</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//得到索引为index的元素</span></span><br><span class=\"line\">        E oldValue = elementData(index);</span><br><span class=\"line\">        <span class=\"keyword\">int</span> numMoved = size - index - <span class=\"number\">1</span>;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (numMoved &gt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            System.arraycopy(elementData, index + <span class=\"number\">1</span>, elementData, index, numMoved);</span><br><span class=\"line\">        <span class=\"comment\">//GC回收</span></span><br><span class=\"line\">        elementData[--size] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> oldValue;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 删除元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">remove</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (object.equals(elementData[i])) &#123;</span><br><span class=\"line\">                    remove(i);</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 设置索引为index的元素为object</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> index  索引</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object 存入元素</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">set</span><span class=\"params\">(<span class=\"keyword\">int</span> index, Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否越界</span></span><br><span class=\"line\">        rangeCheck(index);</span><br><span class=\"line\">        <span class=\"comment\">//设值</span></span><br><span class=\"line\">        elementData[index] = object;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 得到索引为i的元素</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> i</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> E <span class=\"title\">get</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断索引i是否越界</span></span><br><span class=\"line\">        rangeCheck(i);</span><br><span class=\"line\">        <span class=\"comment\">//取值</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> elementData(i);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 首次出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">indexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 元素最后出现的索引</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">int</span> <span class=\"title\">lastIndexOf</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (object == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (<span class=\"keyword\">null</span> == elementData[i]) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">            <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = size - <span class=\"number\">1</span>; i &lt; <span class=\"number\">0</span>; i--) &#123;</span><br><span class=\"line\">                <span class=\"keyword\">if</span> (elementData[i].equals(object)) &#123;</span><br><span class=\"line\">                    <span class=\"keyword\">return</span> i;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"keyword\">return</span> -<span class=\"number\">1</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 是否包含元素元素o</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@param</span> object</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">contains</span><span class=\"params\">(Object object)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//判断是否存在索引</span></span><br><span class=\"line\">        <span class=\"keyword\">return</span> indexOf(object) &gt;= <span class=\"number\">0</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\">     * 清除线性表</span></span><br><span class=\"line\"><span class=\"comment\">     *</span></span><br><span class=\"line\"><span class=\"comment\">     * <span class=\"doctag\">@return</span></span></span><br><span class=\"line\"><span class=\"comment\">     */</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">clear</span><span class=\"params\">()</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"comment\">//数组元素设为null，GC回收</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; size; i++) &#123;</span><br><span class=\"line\">            elementData[i] = <span class=\"keyword\">null</span>;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        <span class=\"comment\">//线性表大小设为0</span></span><br><span class=\"line\">        <span class=\"keyword\">this</span>.size = <span class=\"number\">0</span>;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> <span class=\"keyword\">true</span>;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheck</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt;= size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">//判断添加数组边界问题</span></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> <span class=\"keyword\">void</span> <span class=\"title\">rangeCheckForAdd</span><span class=\"params\">(<span class=\"keyword\">int</span> index)</span> </span>&#123;</span><br><span class=\"line\">        <span class=\"keyword\">if</span> (index &gt; size || index &lt; <span class=\"number\">0</span>)</span><br><span class=\"line\">            <span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> IndexOutOfBoundsException(<span class=\"string\">\"Index: \"</span> + index + <span class=\"string\">\", Size: \"</span> + size);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"function\"><span class=\"keyword\">private</span> E <span class=\"title\">elementData</span><span class=\"params\">(<span class=\"keyword\">int</span> i)</span> </span>&#123;</span><br><span class=\"line\">        E e = (E) elementData[i];</span><br><span class=\"line\">        <span class=\"keyword\">return</span> e;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>"},{"title":"数据结构----栈","_content":"","source":"_drafts/数据结构/数据结构-栈.md","raw":"---\ntitle: 数据结构----栈\n---\n","slug":"数据结构/数据结构-栈","published":0,"date":"2018-03-10T14:50:11.757Z","updated":"2018-03-10T14:50:11.757Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2p0009hkwct2yg0b0f","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"LeetCode刷题---605.能种多少花","date":"2017-06-15T10:23:53.000Z","_content":"\n<p align=\"center\" style=\"background:black;border-radius:10px\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fgmvct3dndj209x02xt8w.jpg)\n</p>\n\n# [原题](https://leetcode.com/problems/can-place-flowers/#/description)\n```\nSuppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.\n\nGiven a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.\n\nExample 1:\nInput: flowerbed = [1,0,0,0,1], n = 1\nOutput: True\nExample 2:\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput: False\nNote:\n1. The input array won't violate no-adjacent-flowers rule.\n2. The input array size is in the range of [1, 20000].\n3. n is a non-negative integer which won't exceed the input array size.\n```\n\n## 翻译\n```\n在一个花坛里面种花，不能在相邻的地方种花，\n也就是说：种一朵花，要间隔一块地。\n\n用数组来代表花坛[1,0,0,0,1],\n1表示该处种花，\n0表示该处空出。\n\n提示：\n1. 输入的数组是符合种花原则的（花不相邻）\n2. 数组大小在1-20000之间\n3. n不能超过数组大小\n```\n\n# 解题\n\n## 思路\n1. 查看花坛相邻的空地有多少，至少需要三块空地相连\n2. 三块相邻空地才能种一朵花，因为这三块头部和尾部都已经种了花了，所以只能中间一块空地才能种上\n3. 3-----1\n4. 4-----1\n5. 5-----2\n6. n-----(n-1)/2\n\n## 编码\n```java\npublic boolean canPlaceFlowers(int[] flowerbed, int n) {\n\t\t//判断相邻多少块空地\n        int count = 0;\n\t\t//能种多少花\n        int result = 0;\n\t\t//遍历数组\n        for (int i = 0; i < flowerbed.length; i++) {\n            if (flowerbed[i] == 0) {\n                count++;\n            } else {\n                result += (count-1 ) / 2;\n                count = 0;\n            }\n        }\n\n        if (count != 0){\n\t\t\t result += count / 2;\n\t\t}\n\n        return result >= n;\n    }\n```","source":"_posts/LeetCode/605flowers.md","raw":"---\ntitle: LeetCode刷题---605.能种多少花\ndate: 2017-06-15 18:23:53\ntags: [LeetCode]\ncategories: [LeetCode]\n---\n\n<p align=\"center\" style=\"background:black;border-radius:10px\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fgmvct3dndj209x02xt8w.jpg)\n</p>\n\n# [原题](https://leetcode.com/problems/can-place-flowers/#/description)\n```\nSuppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.\n\nGiven a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.\n\nExample 1:\nInput: flowerbed = [1,0,0,0,1], n = 1\nOutput: True\nExample 2:\nInput: flowerbed = [1,0,0,0,1], n = 2\nOutput: False\nNote:\n1. The input array won't violate no-adjacent-flowers rule.\n2. The input array size is in the range of [1, 20000].\n3. n is a non-negative integer which won't exceed the input array size.\n```\n\n## 翻译\n```\n在一个花坛里面种花，不能在相邻的地方种花，\n也就是说：种一朵花，要间隔一块地。\n\n用数组来代表花坛[1,0,0,0,1],\n1表示该处种花，\n0表示该处空出。\n\n提示：\n1. 输入的数组是符合种花原则的（花不相邻）\n2. 数组大小在1-20000之间\n3. n不能超过数组大小\n```\n\n# 解题\n\n## 思路\n1. 查看花坛相邻的空地有多少，至少需要三块空地相连\n2. 三块相邻空地才能种一朵花，因为这三块头部和尾部都已经种了花了，所以只能中间一块空地才能种上\n3. 3-----1\n4. 4-----1\n5. 5-----2\n6. n-----(n-1)/2\n\n## 编码\n```java\npublic boolean canPlaceFlowers(int[] flowerbed, int n) {\n\t\t//判断相邻多少块空地\n        int count = 0;\n\t\t//能种多少花\n        int result = 0;\n\t\t//遍历数组\n        for (int i = 0; i < flowerbed.length; i++) {\n            if (flowerbed[i] == 0) {\n                count++;\n            } else {\n                result += (count-1 ) / 2;\n                count = 0;\n            }\n        }\n\n        if (count != 0){\n\t\t\t result += count / 2;\n\t\t}\n\n        return result >= n;\n    }\n```","slug":"LeetCode/605flowers","published":1,"updated":"2018-03-10T14:50:11.761Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2q000ahkwcte90uqg8","content":"<p align=\"center\" style=\"background:black;border-radius:10px\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fgmvct3dndj209x02xt8w.jpg\" alt=\"\"><br></p>\n\n<h1 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode.com/problems/can-place-flowers/#/description\" target=\"_blank\" rel=\"noopener\">原题</a></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.</span><br><span class=\"line\"></span><br><span class=\"line\">Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.</span><br><span class=\"line\"></span><br><span class=\"line\">Example 1:</span><br><span class=\"line\">Input: flowerbed = [1,0,0,0,1], n = 1</span><br><span class=\"line\">Output: True</span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">Input: flowerbed = [1,0,0,0,1], n = 2</span><br><span class=\"line\">Output: False</span><br><span class=\"line\">Note:</span><br><span class=\"line\">1. The input array won&apos;t violate no-adjacent-flowers rule.</span><br><span class=\"line\">2. The input array size is in the range of [1, 20000].</span><br><span class=\"line\">3. n is a non-negative integer which won&apos;t exceed the input array size.</span><br></pre></td></tr></table></figure>\n<h2 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个花坛里面种花，不能在相邻的地方种花，</span><br><span class=\"line\">也就是说：种一朵花，要间隔一块地。</span><br><span class=\"line\"></span><br><span class=\"line\">用数组来代表花坛[1,0,0,0,1],</span><br><span class=\"line\">1表示该处种花，</span><br><span class=\"line\">0表示该处空出。</span><br><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\">1. 输入的数组是符合种花原则的（花不相邻）</span><br><span class=\"line\">2. 数组大小在1-20000之间</span><br><span class=\"line\">3. n不能超过数组大小</span><br></pre></td></tr></table></figure>\n<h1 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>查看花坛相邻的空地有多少，至少需要三块空地相连</li>\n<li>三块相邻空地才能种一朵花，因为这三块头部和尾部都已经种了花了，所以只能中间一块空地才能种上</li>\n<li>3—–1</li>\n<li>4—–1</li>\n<li>5—–2</li>\n<li>n—–(n-1)/2</li>\n</ol>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canPlaceFlowers</span><span class=\"params\">(<span class=\"keyword\">int</span>[] flowerbed, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断相邻多少块空地</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//能种多少花</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; flowerbed.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flowerbed[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result += (count-<span class=\"number\">1</span> ) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t result += count / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result &gt;= n;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p align=\"center\" style=\"background:black;border-radius:10px\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fgmvct3dndj209x02xt8w.jpg\" alt=\"\"><br></p>\n\n<h1 id=\"原题\"><a href=\"#原题\" class=\"headerlink\" title=\"原题\"></a><a href=\"https://leetcode.com/problems/can-place-flowers/#/description\" target=\"_blank\" rel=\"noopener\">原题</a></h1><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Suppose you have a long flowerbed in which some of the plots are planted and some are not. However, flowers cannot be planted in adjacent plots - they would compete for water and both would die.</span><br><span class=\"line\"></span><br><span class=\"line\">Given a flowerbed (represented as an array containing 0 and 1, where 0 means empty and 1 means not empty), and a number n, return if n new flowers can be planted in it without violating the no-adjacent-flowers rule.</span><br><span class=\"line\"></span><br><span class=\"line\">Example 1:</span><br><span class=\"line\">Input: flowerbed = [1,0,0,0,1], n = 1</span><br><span class=\"line\">Output: True</span><br><span class=\"line\">Example 2:</span><br><span class=\"line\">Input: flowerbed = [1,0,0,0,1], n = 2</span><br><span class=\"line\">Output: False</span><br><span class=\"line\">Note:</span><br><span class=\"line\">1. The input array won&apos;t violate no-adjacent-flowers rule.</span><br><span class=\"line\">2. The input array size is in the range of [1, 20000].</span><br><span class=\"line\">3. n is a non-negative integer which won&apos;t exceed the input array size.</span><br></pre></td></tr></table></figure>\n<h2 id=\"翻译\"><a href=\"#翻译\" class=\"headerlink\" title=\"翻译\"></a>翻译</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">在一个花坛里面种花，不能在相邻的地方种花，</span><br><span class=\"line\">也就是说：种一朵花，要间隔一块地。</span><br><span class=\"line\"></span><br><span class=\"line\">用数组来代表花坛[1,0,0,0,1],</span><br><span class=\"line\">1表示该处种花，</span><br><span class=\"line\">0表示该处空出。</span><br><span class=\"line\"></span><br><span class=\"line\">提示：</span><br><span class=\"line\">1. 输入的数组是符合种花原则的（花不相邻）</span><br><span class=\"line\">2. 数组大小在1-20000之间</span><br><span class=\"line\">3. n不能超过数组大小</span><br></pre></td></tr></table></figure>\n<h1 id=\"解题\"><a href=\"#解题\" class=\"headerlink\" title=\"解题\"></a>解题</h1><h2 id=\"思路\"><a href=\"#思路\" class=\"headerlink\" title=\"思路\"></a>思路</h2><ol>\n<li>查看花坛相邻的空地有多少，至少需要三块空地相连</li>\n<li>三块相邻空地才能种一朵花，因为这三块头部和尾部都已经种了花了，所以只能中间一块空地才能种上</li>\n<li>3—–1</li>\n<li>4—–1</li>\n<li>5—–2</li>\n<li>n—–(n-1)/2</li>\n</ol>\n<h2 id=\"编码\"><a href=\"#编码\" class=\"headerlink\" title=\"编码\"></a>编码</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"function\"><span class=\"keyword\">public</span> <span class=\"keyword\">boolean</span> <span class=\"title\">canPlaceFlowers</span><span class=\"params\">(<span class=\"keyword\">int</span>[] flowerbed, <span class=\"keyword\">int</span> n)</span> </span>&#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">//判断相邻多少块空地</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> count = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//能种多少花</span></span><br><span class=\"line\">        <span class=\"keyword\">int</span> result = <span class=\"number\">0</span>;</span><br><span class=\"line\">\t\t<span class=\"comment\">//遍历数组</span></span><br><span class=\"line\">        <span class=\"keyword\">for</span> (<span class=\"keyword\">int</span> i = <span class=\"number\">0</span>; i &lt; flowerbed.length; i++) &#123;</span><br><span class=\"line\">            <span class=\"keyword\">if</span> (flowerbed[i] == <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">                count++;</span><br><span class=\"line\">            &#125; <span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">                result += (count-<span class=\"number\">1</span> ) / <span class=\"number\">2</span>;</span><br><span class=\"line\">                count = <span class=\"number\">0</span>;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">if</span> (count != <span class=\"number\">0</span>)&#123;</span><br><span class=\"line\">\t\t\t result += count / <span class=\"number\">2</span>;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">        <span class=\"keyword\">return</span> result &gt;= n;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>"},{"title":"Mysql数据库软件安装与配置","date":"2017-04-19T02:25:45.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n## centos7下快速安装mysql\n\nCentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载\n\n```shell\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n ```\n\n​\n\n## 重启mysql服务\n\n```shell\nsystemctl restart mysqld\n```\n\n​\n\n## 设置root用户密码\n\n​\n\n* 连接mysql(初次安装mysql，root默认无密码)\n\n```shell\nmysql -uroot\n```\n\n* 设置root用户密码为root\n\n```shell\nuse mysql;\nupdate user set password=password('root') where user='root' and host='localhost';\nflush privileges;\n```\n\n* 远程连接授权\n\n```shell\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;\nFLUSH   PRIVILEGES;\n```","source":"_posts/Mysql/install.md","raw":"---\ntitle: Mysql数据库软件安装与配置\ndate: 2017-04-19 10:25:45\ntags: [Mysql]\ncategories:\t[Mysql]\n---\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n## centos7下快速安装mysql\n\nCentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载\n\n```shell\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n ```\n\n​\n\n## 重启mysql服务\n\n```shell\nsystemctl restart mysqld\n```\n\n​\n\n## 设置root用户密码\n\n​\n\n* 连接mysql(初次安装mysql，root默认无密码)\n\n```shell\nmysql -uroot\n```\n\n* 设置root用户密码为root\n\n```shell\nuse mysql;\nupdate user set password=password('root') where user='root' and host='localhost';\nflush privileges;\n```\n\n* 远程连接授权\n\n```shell\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;\nFLUSH   PRIVILEGES;\n```","slug":"Mysql/install","published":1,"updated":"2018-03-10T14:50:11.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2r000bhkwcv1sctfan","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"centos7下快速安装mysql\"><a href=\"#centos7下快速安装mysql\" class=\"headerlink\" title=\"centos7下快速安装mysql\"></a>centos7下快速安装mysql</h2><p>CentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"设置root用户密码\"><a href=\"#设置root用户密码\" class=\"headerlink\" title=\"设置root用户密码\"></a>设置root用户密码</h2><p>​</p>\n<ul>\n<li>连接mysql(初次安装mysql，root默认无密码)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置root用户密码为root</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\">update user set password=password('root') where user='root' and host='localhost';</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>远程连接授权</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;</span><br><span class=\"line\">FLUSH   PRIVILEGES;</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"centos7下快速安装mysql\"><a href=\"#centos7下快速安装mysql\" class=\"headerlink\" title=\"centos7下快速安装mysql\"></a>centos7下快速安装mysql</h2><p>CentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</span><br><span class=\"line\">yum install mysql-community-server</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h2><figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl restart mysqld</span><br></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"设置root用户密码\"><a href=\"#设置root用户密码\" class=\"headerlink\" title=\"设置root用户密码\"></a>设置root用户密码</h2><p>​</p>\n<ul>\n<li>连接mysql(初次安装mysql，root默认无密码)</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot</span><br></pre></td></tr></table></figure>\n<ul>\n<li>设置root用户密码为root</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">use mysql;</span><br><span class=\"line\">update user set password=password('root') where user='root' and host='localhost';</span><br><span class=\"line\">flush privileges;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>远程连接授权</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;</span><br><span class=\"line\">FLUSH   PRIVILEGES;</span><br></pre></td></tr></table></figure>"},{"title":"CentOS挂载硬盘操作说明","date":"2017-05-25T08:15:10.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg)\n</p>\n\n在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。\n\n而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted & GPT 磁盘成为了绝佳的搭配。\n## 查看磁盘信息 \n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg)\n\n从图可以看出 **/dev/sdb**这一块硬盘还没有被挂载。\n\n## 分区操作\n### 2T以下容量的硬盘（血的教训）\n```\nfdisk /dev/sdb\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg)\n\n对**/dev/sdb**这一块硬盘进行分区操作\n\n1. 进入fdisk命令后，输入**m**查看操作提示：\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg)\n\n2. 输入**n**,进入分区操作\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg)\n\n3. 选择分区类型,默认为主分区，输入**p**，或者回车；\n```    \np: 分为主分区\ne: 分为逻辑分区\n```\n4. 选择分区数，分区数在[1-4]之间，默认为：**1**,回车选择默认；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg)\n\n5. 选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg)\n6. 选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg)\n7. 写入分区，输入**w**,等待分区操作结束\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg)\n8. 分区操作结束。\n\n### 2T以上容量的硬盘\n1. 首先类似**fdisk**一样，先选择要分区的硬盘，此处为**/dev/sdb**：\n```\n[root@10.10.90.97 ~]# parted /dev/sdb\nGNU Parted 1.8.1\nUsing /dev/sdb\nWelcome to GNU Parted! Type 'help' to view a list of commands.\n```\n2. 选择了**/dev/sdb**作为我们操作的磁盘，接下来需要创建一个分区表(在**parted**中可以使用**help**命令打印帮助信息)：\n```\n(parted) mklabel\nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?\nYes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes\nNew disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt\n```\n3. 创建好分区表以后，接下来就可以进行分区操作了，执行**mkpart**命令，分别输入分区名称，文件系统和分区的起止位置\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n```\n4. 分好区后可以使用**print**命令打印分区信息，下面是一个**print**的样例\n```\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n```\n5. 如果分区错了，可以使用**rm**命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果\n```\n(parted)rm 1 #rm后面使用分区的号码\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n```\n6. 按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n(parted) mkpart\nPartition name? []? dp2\nFile system type? [ext2]? ext3\nStart? 500GB\nEnd? 2199GB\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n2 500GB 2199GB 1699GB dp2\n```\n7. 由于**parted**内建的**mkfs**还不够完善，所以完成以后我们可以使用**quit**命令退出**parted**并使用 系统的**mkfs**命令对分区进行格式化了，此时如果使用**fdisk -l**命令打印分区表会出现警告信息，这是正常的\n```\n[root@10.10.90.97 ~]# fdisk -l\nWARNING: GPT (GUID Partition Table) detected on '/dev/sdb'! The util fdisk doesn't support GPT. Use GNU Parted.\nDisk /dev/sdb: 2199.0 GB, 2199022206976 bytes\n255 heads, 63 sectors/track, 267349 cylinders\nUnits = cylinders of 16065 * 512 = 8225280 bytes\nDevice Boot Start End Blocks Id System\n/dev/sdb1 1 267350 2147482623+ ee EFI GPT\n```\n\n## 格式化分区\n1. 查看磁盘信息\n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg)\n从图可以看出，刚才的分区操作成功，新的分区名为**/dev/sdb1**\n2. 格式化分区\n```\nmkfs -t ext3 -c /dev/sdb1\n```\n上面这条命令执行速度比较慢，如果想象**Windows**的**快速格式化**操作的话，可以使用下面的命令：\n```\nmkfs ext3  -T largefile /dev/sdb1\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg)\n3. 格式化完毕！\n\n## 挂载分区\n1. 挂载分区\n```\nmount /dev/sdb1 /data\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg)\n将刚才的分区挂载到根目录下的**data**目录下，\n由于**data**目录不存在，所以第一次挂载失败。\n创建目录后，再次执行挂载命令，最后挂在成功！\n2. 查看系统磁盘信息\n```\ndf -TH\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg)\n上图显示，**/dev/sdb1**2T容量成功挂载到**/data**目录上。\n\n到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。\n\n## 永久挂载\n系统的**/etc/fstab**文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。\n```\n磁盘分区    mount目录     文件格式\n/dev/sdb1  /data         ext3        defaults    0   0 \n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg)\n\n输入**wq**,完成修改保存操作。\n\n### Tips:\nfstab中，每条配置信息都分为固定的6个部分\n```\n[1]:分区路径，或者UUID\n[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。\n[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。\n[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用\"defaults\"就可以满足需要。不多说。\n[5]:fs_dump  - 该选项被\"dump\"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0\n[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统\"/\"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0\n```\n\n----------\n\n## 总结\n```\n1. 分区操作                 fdisk /dev/xxx\n2. 格式化分区                mkfs -t ext3 -c /dev/xxx\n3. 挂载分区                  mount /dev/xxx /xxx\n4. 写入系统文件              vim /etc/fstab\n```\n","source":"_posts/CentOS/mount-hard-disk.md","raw":"---\ntitle: CentOS挂载硬盘操作说明\ndate: 2017-05-25 16:15:10\ntags: [HarhDisk]\ncategories: [CentOS]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg)\n</p>\n\n在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。\n\n而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted & GPT 磁盘成为了绝佳的搭配。\n## 查看磁盘信息 \n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg)\n\n从图可以看出 **/dev/sdb**这一块硬盘还没有被挂载。\n\n## 分区操作\n### 2T以下容量的硬盘（血的教训）\n```\nfdisk /dev/sdb\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg)\n\n对**/dev/sdb**这一块硬盘进行分区操作\n\n1. 进入fdisk命令后，输入**m**查看操作提示：\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg)\n\n2. 输入**n**,进入分区操作\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg)\n\n3. 选择分区类型,默认为主分区，输入**p**，或者回车；\n```    \np: 分为主分区\ne: 分为逻辑分区\n```\n4. 选择分区数，分区数在[1-4]之间，默认为：**1**,回车选择默认；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg)\n\n5. 选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg)\n6. 选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg)\n7. 写入分区，输入**w**,等待分区操作结束\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg)\n8. 分区操作结束。\n\n### 2T以上容量的硬盘\n1. 首先类似**fdisk**一样，先选择要分区的硬盘，此处为**/dev/sdb**：\n```\n[root@10.10.90.97 ~]# parted /dev/sdb\nGNU Parted 1.8.1\nUsing /dev/sdb\nWelcome to GNU Parted! Type 'help' to view a list of commands.\n```\n2. 选择了**/dev/sdb**作为我们操作的磁盘，接下来需要创建一个分区表(在**parted**中可以使用**help**命令打印帮助信息)：\n```\n(parted) mklabel\nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?\nYes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes\nNew disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt\n```\n3. 创建好分区表以后，接下来就可以进行分区操作了，执行**mkpart**命令，分别输入分区名称，文件系统和分区的起止位置\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n```\n4. 分好区后可以使用**print**命令打印分区信息，下面是一个**print**的样例\n```\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n```\n5. 如果分区错了，可以使用**rm**命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果\n```\n(parted)rm 1 #rm后面使用分区的号码\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n```\n6. 按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n(parted) mkpart\nPartition name? []? dp2\nFile system type? [ext2]? ext3\nStart? 500GB\nEnd? 2199GB\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n2 500GB 2199GB 1699GB dp2\n```\n7. 由于**parted**内建的**mkfs**还不够完善，所以完成以后我们可以使用**quit**命令退出**parted**并使用 系统的**mkfs**命令对分区进行格式化了，此时如果使用**fdisk -l**命令打印分区表会出现警告信息，这是正常的\n```\n[root@10.10.90.97 ~]# fdisk -l\nWARNING: GPT (GUID Partition Table) detected on '/dev/sdb'! The util fdisk doesn't support GPT. Use GNU Parted.\nDisk /dev/sdb: 2199.0 GB, 2199022206976 bytes\n255 heads, 63 sectors/track, 267349 cylinders\nUnits = cylinders of 16065 * 512 = 8225280 bytes\nDevice Boot Start End Blocks Id System\n/dev/sdb1 1 267350 2147482623+ ee EFI GPT\n```\n\n## 格式化分区\n1. 查看磁盘信息\n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg)\n从图可以看出，刚才的分区操作成功，新的分区名为**/dev/sdb1**\n2. 格式化分区\n```\nmkfs -t ext3 -c /dev/sdb1\n```\n上面这条命令执行速度比较慢，如果想象**Windows**的**快速格式化**操作的话，可以使用下面的命令：\n```\nmkfs ext3  -T largefile /dev/sdb1\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg)\n3. 格式化完毕！\n\n## 挂载分区\n1. 挂载分区\n```\nmount /dev/sdb1 /data\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg)\n将刚才的分区挂载到根目录下的**data**目录下，\n由于**data**目录不存在，所以第一次挂载失败。\n创建目录后，再次执行挂载命令，最后挂在成功！\n2. 查看系统磁盘信息\n```\ndf -TH\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg)\n上图显示，**/dev/sdb1**2T容量成功挂载到**/data**目录上。\n\n到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。\n\n## 永久挂载\n系统的**/etc/fstab**文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。\n```\n磁盘分区    mount目录     文件格式\n/dev/sdb1  /data         ext3        defaults    0   0 \n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg)\n\n输入**wq**,完成修改保存操作。\n\n### Tips:\nfstab中，每条配置信息都分为固定的6个部分\n```\n[1]:分区路径，或者UUID\n[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。\n[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。\n[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用\"defaults\"就可以满足需要。不多说。\n[5]:fs_dump  - 该选项被\"dump\"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0\n[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统\"/\"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0\n```\n\n----------\n\n## 总结\n```\n1. 分区操作                 fdisk /dev/xxx\n2. 格式化分区                mkfs -t ext3 -c /dev/xxx\n3. 挂载分区                  mount /dev/xxx /xxx\n4. 写入系统文件              vim /etc/fstab\n```\n","slug":"CentOS/mount-hard-disk","published":1,"updated":"2018-03-10T14:50:11.759Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2t000ehkwcmhixr60s","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg\" alt=\"\"><br></p>\n\n<p>在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。</p>\n<p>而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted &amp; GPT 磁盘成为了绝佳的搭配。</p>\n<h2 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg\" alt=\"\"></p>\n<p>从图可以看出 <strong>/dev/sdb</strong>这一块硬盘还没有被挂载。</p>\n<h2 id=\"分区操作\"><a href=\"#分区操作\" class=\"headerlink\" title=\"分区操作\"></a>分区操作</h2><h3 id=\"2T以下容量的硬盘（血的教训）\"><a href=\"#2T以下容量的硬盘（血的教训）\" class=\"headerlink\" title=\"2T以下容量的硬盘（血的教训）\"></a>2T以下容量的硬盘（血的教训）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg\" alt=\"\"></p>\n<p>对<strong>/dev/sdb</strong>这一块硬盘进行分区操作</p>\n<ol>\n<li><p>进入fdisk命令后，输入<strong>m</strong>查看操作提示：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg\" alt=\"\"></p>\n</li>\n<li><p>输入<strong>n</strong>,进入分区操作<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择分区类型,默认为主分区，输入<strong>p</strong>，或者回车；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p: 分为主分区</span><br><span class=\"line\">e: 分为逻辑分区</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择分区数，分区数在[1-4]之间，默认为：<strong>1</strong>,回车选择默认；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg\" alt=\"\"></p>\n</li>\n<li>选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg\" alt=\"\"></li>\n<li>写入分区，输入<strong>w</strong>,等待分区操作结束<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg\" alt=\"\"></li>\n<li>分区操作结束。</li>\n</ol>\n<h3 id=\"2T以上容量的硬盘\"><a href=\"#2T以上容量的硬盘\" class=\"headerlink\" title=\"2T以上容量的硬盘\"></a>2T以上容量的硬盘</h3><ol>\n<li><p>首先类似<strong>fdisk</strong>一样，先选择要分区的硬盘，此处为<strong>/dev/sdb</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10.10.90.97 ~]# parted /dev/sdb</span><br><span class=\"line\">GNU Parted 1.8.1</span><br><span class=\"line\">Using /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择了<strong>/dev/sdb</strong>作为我们操作的磁盘，接下来需要创建一个分区表(在<strong>parted</strong>中可以使用<strong>help</strong>命令打印帮助信息)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mklabel</span><br><span class=\"line\">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?</span><br><span class=\"line\">Yes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes</span><br><span class=\"line\">New disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建好分区表以后，接下来就可以进行分区操作了，执行<strong>mkpart</strong>命令，分别输入分区名称，文件系统和分区的起止位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mkpart</span><br><span class=\"line\">Partition name? []? dp1</span><br><span class=\"line\">File system type? [ext2]? ext3</span><br><span class=\"line\">Start? 0</span><br><span class=\"line\">End? 500GB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分好区后可以使用<strong>print</strong>命令打印分区信息，下面是一个<strong>print</strong>的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) print</span><br><span class=\"line\">Model: VBOX HARDDISK (ide)</span><br><span class=\"line\">Disk /dev/sdb: 2199GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Number Start End Size File system Name Flags</span><br><span class=\"line\">1 17.4kB 500GB 500GB dp1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果分区错了，可以使用<strong>rm</strong>命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted)rm 1 #rm后面使用分区的号码</span><br><span class=\"line\">(parted) print</span><br><span class=\"line\">Model: VBOX HARDDISK (ide)</span><br><span class=\"line\">Disk /dev/sdb: 2199GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Number Start End Size File system Name Flags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mkpart</span><br><span class=\"line\">Partition name? []? dp1</span><br><span class=\"line\">File system type? [ext2]? ext3</span><br><span class=\"line\">Start? 0</span><br><span class=\"line\">End? 500GB</span><br><span class=\"line\">(parted) mkpart</span><br><span class=\"line\">Partition name? []? dp2</span><br><span class=\"line\">File system type? [ext2]? ext3</span><br><span class=\"line\">Start? 500GB</span><br><span class=\"line\">End? 2199GB</span><br><span class=\"line\">(parted) print</span><br><span class=\"line\">Model: VBOX HARDDISK (ide)</span><br><span class=\"line\">Disk /dev/sdb: 2199GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Number Start End Size File system Name Flags</span><br><span class=\"line\">1 17.4kB 500GB 500GB dp1</span><br><span class=\"line\">2 500GB 2199GB 1699GB dp2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于<strong>parted</strong>内建的<strong>mkfs</strong>还不够完善，所以完成以后我们可以使用<strong>quit</strong>命令退出<strong>parted</strong>并使用 系统的<strong>mkfs</strong>命令对分区进行格式化了，此时如果使用<strong>fdisk -l</strong>命令打印分区表会出现警告信息，这是正常的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10.10.90.97 ~]# fdisk -l</span><br><span class=\"line\">WARNING: GPT (GUID Partition Table) detected on &apos;/dev/sdb&apos;! The util fdisk doesn&apos;t support GPT. Use GNU Parted.</span><br><span class=\"line\">Disk /dev/sdb: 2199.0 GB, 2199022206976 bytes</span><br><span class=\"line\">255 heads, 63 sectors/track, 267349 cylinders</span><br><span class=\"line\">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class=\"line\">Device Boot Start End Blocks Id System</span><br><span class=\"line\">/dev/sdb1 1 267350 2147482623+ ee EFI GPT</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h2><ol>\n<li>查看磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg\" alt=\"\"><br>从图可以看出，刚才的分区操作成功，新的分区名为<strong>/dev/sdb1</strong></p>\n<ol>\n<li>格式化分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs -t ext3 -c /dev/sdb1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面这条命令执行速度比较慢，如果想象<strong>Windows</strong>的<strong>快速格式化</strong>操作的话，可以使用下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs ext3  -T largefile /dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg\" alt=\"\"></p>\n<ol>\n<li>格式化完毕！</li>\n</ol>\n<h2 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h2><ol>\n<li>挂载分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg\" alt=\"\"><br>将刚才的分区挂载到根目录下的<strong>data</strong>目录下，<br>由于<strong>data</strong>目录不存在，所以第一次挂载失败。<br>创建目录后，再次执行挂载命令，最后挂在成功！</p>\n<ol>\n<li>查看系统磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -TH</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg\" alt=\"\"><br>上图显示，<strong>/dev/sdb1</strong>2T容量成功挂载到<strong>/data</strong>目录上。</p>\n<p>到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。</p>\n<h2 id=\"永久挂载\"><a href=\"#永久挂载\" class=\"headerlink\" title=\"永久挂载\"></a>永久挂载</h2><p>系统的<strong>/etc/fstab</strong>文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">磁盘分区    mount目录     文件格式</span><br><span class=\"line\">/dev/sdb1  /data         ext3        defaults    0   0</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg\" alt=\"\"></p>\n<p>输入<strong>wq</strong>,完成修改保存操作。</p>\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h3><p>fstab中，每条配置信息都分为固定的6个部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]:分区路径，或者UUID</span><br><span class=\"line\">[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。</span><br><span class=\"line\">[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。</span><br><span class=\"line\">[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用&quot;defaults&quot;就可以满足需要。不多说。</span><br><span class=\"line\">[5]:fs_dump  - 该选项被&quot;dump&quot;命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0</span><br><span class=\"line\">[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统&quot;/&quot;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 分区操作                 fdisk /dev/xxx</span><br><span class=\"line\">2. 格式化分区                mkfs -t ext3 -c /dev/xxx</span><br><span class=\"line\">3. 挂载分区                  mount /dev/xxx /xxx</span><br><span class=\"line\">4. 写入系统文件              vim /etc/fstab</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg\" alt=\"\"><br></p>\n\n<p>在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。</p>\n<p>而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted &amp; GPT 磁盘成为了绝佳的搭配。</p>\n<h2 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg\" alt=\"\"></p>\n<p>从图可以看出 <strong>/dev/sdb</strong>这一块硬盘还没有被挂载。</p>\n<h2 id=\"分区操作\"><a href=\"#分区操作\" class=\"headerlink\" title=\"分区操作\"></a>分区操作</h2><h3 id=\"2T以下容量的硬盘（血的教训）\"><a href=\"#2T以下容量的硬盘（血的教训）\" class=\"headerlink\" title=\"2T以下容量的硬盘（血的教训）\"></a>2T以下容量的硬盘（血的教训）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk /dev/sdb</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg\" alt=\"\"></p>\n<p>对<strong>/dev/sdb</strong>这一块硬盘进行分区操作</p>\n<ol>\n<li><p>进入fdisk命令后，输入<strong>m</strong>查看操作提示：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg\" alt=\"\"></p>\n</li>\n<li><p>输入<strong>n</strong>,进入分区操作<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择分区类型,默认为主分区，输入<strong>p</strong>，或者回车；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p: 分为主分区</span><br><span class=\"line\">e: 分为逻辑分区</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择分区数，分区数在[1-4]之间，默认为：<strong>1</strong>,回车选择默认；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg\" alt=\"\"></p>\n</li>\n<li>选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg\" alt=\"\"></li>\n<li>写入分区，输入<strong>w</strong>,等待分区操作结束<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg\" alt=\"\"></li>\n<li>分区操作结束。</li>\n</ol>\n<h3 id=\"2T以上容量的硬盘\"><a href=\"#2T以上容量的硬盘\" class=\"headerlink\" title=\"2T以上容量的硬盘\"></a>2T以上容量的硬盘</h3><ol>\n<li><p>首先类似<strong>fdisk</strong>一样，先选择要分区的硬盘，此处为<strong>/dev/sdb</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10.10.90.97 ~]# parted /dev/sdb</span><br><span class=\"line\">GNU Parted 1.8.1</span><br><span class=\"line\">Using /dev/sdb</span><br><span class=\"line\">Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands.</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选择了<strong>/dev/sdb</strong>作为我们操作的磁盘，接下来需要创建一个分区表(在<strong>parted</strong>中可以使用<strong>help</strong>命令打印帮助信息)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mklabel</span><br><span class=\"line\">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?</span><br><span class=\"line\">Yes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes</span><br><span class=\"line\">New disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>创建好分区表以后，接下来就可以进行分区操作了，执行<strong>mkpart</strong>命令，分别输入分区名称，文件系统和分区的起止位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mkpart</span><br><span class=\"line\">Partition name? []? dp1</span><br><span class=\"line\">File system type? [ext2]? ext3</span><br><span class=\"line\">Start? 0</span><br><span class=\"line\">End? 500GB</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>分好区后可以使用<strong>print</strong>命令打印分区信息，下面是一个<strong>print</strong>的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) print</span><br><span class=\"line\">Model: VBOX HARDDISK (ide)</span><br><span class=\"line\">Disk /dev/sdb: 2199GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Number Start End Size File system Name Flags</span><br><span class=\"line\">1 17.4kB 500GB 500GB dp1</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>如果分区错了，可以使用<strong>rm</strong>命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted)rm 1 #rm后面使用分区的号码</span><br><span class=\"line\">(parted) print</span><br><span class=\"line\">Model: VBOX HARDDISK (ide)</span><br><span class=\"line\">Disk /dev/sdb: 2199GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Number Start End Size File system Name Flags</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(parted) mkpart</span><br><span class=\"line\">Partition name? []? dp1</span><br><span class=\"line\">File system type? [ext2]? ext3</span><br><span class=\"line\">Start? 0</span><br><span class=\"line\">End? 500GB</span><br><span class=\"line\">(parted) mkpart</span><br><span class=\"line\">Partition name? []? dp2</span><br><span class=\"line\">File system type? [ext2]? ext3</span><br><span class=\"line\">Start? 500GB</span><br><span class=\"line\">End? 2199GB</span><br><span class=\"line\">(parted) print</span><br><span class=\"line\">Model: VBOX HARDDISK (ide)</span><br><span class=\"line\">Disk /dev/sdb: 2199GB</span><br><span class=\"line\">Sector size (logical/physical): 512B/512B</span><br><span class=\"line\">Partition Table: gpt</span><br><span class=\"line\">Number Start End Size File system Name Flags</span><br><span class=\"line\">1 17.4kB 500GB 500GB dp1</span><br><span class=\"line\">2 500GB 2199GB 1699GB dp2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>由于<strong>parted</strong>内建的<strong>mkfs</strong>还不够完善，所以完成以后我们可以使用<strong>quit</strong>命令退出<strong>parted</strong>并使用 系统的<strong>mkfs</strong>命令对分区进行格式化了，此时如果使用<strong>fdisk -l</strong>命令打印分区表会出现警告信息，这是正常的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[root@10.10.90.97 ~]# fdisk -l</span><br><span class=\"line\">WARNING: GPT (GUID Partition Table) detected on &apos;/dev/sdb&apos;! The util fdisk doesn&apos;t support GPT. Use GNU Parted.</span><br><span class=\"line\">Disk /dev/sdb: 2199.0 GB, 2199022206976 bytes</span><br><span class=\"line\">255 heads, 63 sectors/track, 267349 cylinders</span><br><span class=\"line\">Units = cylinders of 16065 * 512 = 8225280 bytes</span><br><span class=\"line\">Device Boot Start End Blocks Id System</span><br><span class=\"line\">/dev/sdb1 1 267350 2147482623+ ee EFI GPT</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h2><ol>\n<li>查看磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fdisk -l</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg\" alt=\"\"><br>从图可以看出，刚才的分区操作成功，新的分区名为<strong>/dev/sdb1</strong></p>\n<ol>\n<li>格式化分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs -t ext3 -c /dev/sdb1</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面这条命令执行速度比较慢，如果想象<strong>Windows</strong>的<strong>快速格式化</strong>操作的话，可以使用下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs ext3  -T largefile /dev/sdb1</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg\" alt=\"\"></p>\n<ol>\n<li>格式化完毕！</li>\n</ol>\n<h2 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h2><ol>\n<li>挂载分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount /dev/sdb1 /data</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg\" alt=\"\"><br>将刚才的分区挂载到根目录下的<strong>data</strong>目录下，<br>由于<strong>data</strong>目录不存在，所以第一次挂载失败。<br>创建目录后，再次执行挂载命令，最后挂在成功！</p>\n<ol>\n<li>查看系统磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">df -TH</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg\" alt=\"\"><br>上图显示，<strong>/dev/sdb1</strong>2T容量成功挂载到<strong>/data</strong>目录上。</p>\n<p>到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。</p>\n<h2 id=\"永久挂载\"><a href=\"#永久挂载\" class=\"headerlink\" title=\"永久挂载\"></a>永久挂载</h2><p>系统的<strong>/etc/fstab</strong>文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">磁盘分区    mount目录     文件格式</span><br><span class=\"line\">/dev/sdb1  /data         ext3        defaults    0   0</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg\" alt=\"\"></p>\n<p>输入<strong>wq</strong>,完成修改保存操作。</p>\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h3><p>fstab中，每条配置信息都分为固定的6个部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[1]:分区路径，或者UUID</span><br><span class=\"line\">[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。</span><br><span class=\"line\">[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。</span><br><span class=\"line\">[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用&quot;defaults&quot;就可以满足需要。不多说。</span><br><span class=\"line\">[5]:fs_dump  - 该选项被&quot;dump&quot;命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0</span><br><span class=\"line\">[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统&quot;/&quot;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0</span><br></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1. 分区操作                 fdisk /dev/xxx</span><br><span class=\"line\">2. 格式化分区                mkfs -t ext3 -c /dev/xxx</span><br><span class=\"line\">3. 挂载分区                  mount /dev/xxx /xxx</span><br><span class=\"line\">4. 写入系统文件              vim /etc/fstab</span><br></pre></td></tr></table></figure>\n"},{"title":"多模块工程的打包命令","date":"2017-05-17T02:15:02.000Z","layout":"timeline","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg)\n</p>\n## 命令：\n```java\n-am --also-make 同时构建所列模块的依赖模块；\n\n-amd -also-make-dependents 同时构建依赖于所列模块的模块；\n\n-pl --projects <arg> 构建制定的模块，模块间用逗号分隔；\n\n-rf -resume-from <arg> 从指定的模块恢复反应堆。\n```\n\n看英文的更助于理解：\n```\n-am,--also-make\t\n \tIf project list is specified, also build projects required by the list\n\n-amd,--also-make-dependents\t\n\tIf project list is specified, also build projects that depend on projects on the list\n\n-pl,--projects <arg>\t\n\tComma-delimited list of specified reactor projects to build instead of all projects.\n\tA project can be specified by [groupId]:\t\n \t\tartifactId or by its relative path.\n\n-rf,--resume-frome <arg>\n \tResume reactor from specified project\n```\n## 实例\n```\nmvn clean install package -pl A -am\n```\n\n上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。\n","source":"_posts/Maven/package.md","raw":"title: 多模块工程的打包命令\ndate: 2017-05-17 10:15:02\nlayout: timeline\ncategories: [Maven]\ntags: [Maven]\n------------\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg)\n</p>\n## 命令：\n```java\n-am --also-make 同时构建所列模块的依赖模块；\n\n-amd -also-make-dependents 同时构建依赖于所列模块的模块；\n\n-pl --projects <arg> 构建制定的模块，模块间用逗号分隔；\n\n-rf -resume-from <arg> 从指定的模块恢复反应堆。\n```\n\n看英文的更助于理解：\n```\n-am,--also-make\t\n \tIf project list is specified, also build projects required by the list\n\n-amd,--also-make-dependents\t\n\tIf project list is specified, also build projects that depend on projects on the list\n\n-pl,--projects <arg>\t\n\tComma-delimited list of specified reactor projects to build instead of all projects.\n\tA project can be specified by [groupId]:\t\n \t\tartifactId or by its relative path.\n\n-rf,--resume-frome <arg>\n \tResume reactor from specified project\n```\n## 实例\n```\nmvn clean install package -pl A -am\n```\n\n上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。\n","slug":"Maven/package","published":1,"updated":"2018-03-10T14:50:11.762Z","comments":1,"photos":[],"link":"","_id":"cjelm4k2v000fhkwc3n0sbw3v","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"命令：\"><a href=\"#命令：\" class=\"headerlink\" title=\"命令：\"></a>命令：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-am --also-make 同时构建所列模块的依赖模块；</span><br><span class=\"line\"></span><br><span class=\"line\">-amd -also-make-dependents 同时构建依赖于所列模块的模块；</span><br><span class=\"line\"></span><br><span class=\"line\">-pl --projects &lt;arg&gt; 构建制定的模块，模块间用逗号分隔；</span><br><span class=\"line\"></span><br><span class=\"line\">-rf -resume-from &lt;arg&gt; 从指定的模块恢复反应堆。</span><br></pre></td></tr></table></figure>\n<p>看英文的更助于理解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-am,--also-make\t</span><br><span class=\"line\"> \tIf project list is specified, also build projects required by the list</span><br><span class=\"line\"></span><br><span class=\"line\">-amd,--also-make-dependents\t</span><br><span class=\"line\">\tIf project list is specified, also build projects that depend on projects on the list</span><br><span class=\"line\"></span><br><span class=\"line\">-pl,--projects &lt;arg&gt;\t</span><br><span class=\"line\">\tComma-delimited list of specified reactor projects to build instead of all projects.</span><br><span class=\"line\">\tA project can be specified by [groupId]:\t</span><br><span class=\"line\"> \t\tartifactId or by its relative path.</span><br><span class=\"line\"></span><br><span class=\"line\">-rf,--resume-frome &lt;arg&gt;</span><br><span class=\"line\"> \tResume reactor from specified project</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install package -pl A -am</span><br></pre></td></tr></table></figure>\n<p>上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。</p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"命令：\"><a href=\"#命令：\" class=\"headerlink\" title=\"命令：\"></a>命令：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-am --also-make 同时构建所列模块的依赖模块；</span><br><span class=\"line\"></span><br><span class=\"line\">-amd -also-make-dependents 同时构建依赖于所列模块的模块；</span><br><span class=\"line\"></span><br><span class=\"line\">-pl --projects &lt;arg&gt; 构建制定的模块，模块间用逗号分隔；</span><br><span class=\"line\"></span><br><span class=\"line\">-rf -resume-from &lt;arg&gt; 从指定的模块恢复反应堆。</span><br></pre></td></tr></table></figure>\n<p>看英文的更助于理解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">-am,--also-make\t</span><br><span class=\"line\"> \tIf project list is specified, also build projects required by the list</span><br><span class=\"line\"></span><br><span class=\"line\">-amd,--also-make-dependents\t</span><br><span class=\"line\">\tIf project list is specified, also build projects that depend on projects on the list</span><br><span class=\"line\"></span><br><span class=\"line\">-pl,--projects &lt;arg&gt;\t</span><br><span class=\"line\">\tComma-delimited list of specified reactor projects to build instead of all projects.</span><br><span class=\"line\">\tA project can be specified by [groupId]:\t</span><br><span class=\"line\"> \t\tartifactId or by its relative path.</span><br><span class=\"line\"></span><br><span class=\"line\">-rf,--resume-frome &lt;arg&gt;</span><br><span class=\"line\"> \tResume reactor from specified project</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mvn clean install package -pl A -am</span><br></pre></td></tr></table></figure>\n<p>上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。</p>\n"},{"title":"Git操作说明---回滚文件","date":"2017-05-18T10:31:23.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg)\n</p>\n\n## 本文将记录Git使用过程中回滚文件的操作说明。\n\n## 情况假设\n1. 改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.\n2. 改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.\n\n\n**这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.**\n\n## 解决方案\n\n1. **没有commit到本地仓库**\n\t\tgit checkout fileName\n\t\t\n\t命令执行过后，文件会恢复到上次commit后的内容\n\n\t**小结：**\n\t- git checkout file1 （回滚单个文件）\n\t- git checkout file1 file2 ... fileN （一次回滚多个文件，中间用空格隔开即可）\n\t- git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）\n\n2. **已经commit到本地仓库**\n\t1. 查看提交记录\n\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg)\n\t2. 执行回滚操作\n\t\t- 命令说明\n\t\t\t```\n\t\t\tgit reset [--soft | --mixed | --hard]\n\t\t\t```\n\t\t1. \\--soft\t\t \n\t\t\t\t保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg)\n\t\n\t\t **本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区**\n\t\t\n\t\t2. \\-- mixed\n\t\t\t\t会保留源码,只是将git commit和index 信息回退到了某个版本.\n\n\t\t\t```\n\t\t\tgit reset 默认是 --mixed 模式 \n\t\t\tgit reset --mixed  等价于  git reset\n\t\t\t```\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg)\n\t\n\t \t**本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区**\n\n\t\t3. \\--hard\t\t \n\t\t\t\t源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg)\n\n\t\t **本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容**\n\n\t**小结：**\t\n\t- HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n\t- 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n\t- 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\t\t\n\n3. **已经push到远程仓库**\n\t```\n\tgit revert HEAD                     //撤销最近一次提交\n\tgit revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始\n\tgit revert 0ffaacc                  //撤销0ffaacc这次提交\n\t```\n\t**小结：**\n\t- revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交\t\t\n\t- 使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的\t\t\n\t- 使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。\t\n\t- 如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.\n\n## 总结\n```\t\ngit checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录\ngit reset commitId\t\t\t//回退工作区文件，版本号会回退\ngit revert commitId\t\t\t//回退远程仓库，会产生新的版本号\n```\n  \t\t\t\n\t\t\t\t\n\n\n\n","source":"_posts/Git/revert.md","raw":"---\ntitle: Git操作说明---回滚文件\ndate: 2017-05-18 18:31:23\ncategories: [Git]\ntags: [Git]\n---\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg)\n</p>\n\n## 本文将记录Git使用过程中回滚文件的操作说明。\n\n## 情况假设\n1. 改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.\n2. 改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.\n\n\n**这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.**\n\n## 解决方案\n\n1. **没有commit到本地仓库**\n\t\tgit checkout fileName\n\t\t\n\t命令执行过后，文件会恢复到上次commit后的内容\n\n\t**小结：**\n\t- git checkout file1 （回滚单个文件）\n\t- git checkout file1 file2 ... fileN （一次回滚多个文件，中间用空格隔开即可）\n\t- git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）\n\n2. **已经commit到本地仓库**\n\t1. 查看提交记录\n\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg)\n\t2. 执行回滚操作\n\t\t- 命令说明\n\t\t\t```\n\t\t\tgit reset [--soft | --mixed | --hard]\n\t\t\t```\n\t\t1. \\--soft\t\t \n\t\t\t\t保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg)\n\t\n\t\t **本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区**\n\t\t\n\t\t2. \\-- mixed\n\t\t\t\t会保留源码,只是将git commit和index 信息回退到了某个版本.\n\n\t\t\t```\n\t\t\tgit reset 默认是 --mixed 模式 \n\t\t\tgit reset --mixed  等价于  git reset\n\t\t\t```\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg)\n\t\n\t \t**本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区**\n\n\t\t3. \\--hard\t\t \n\t\t\t\t源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg)\n\n\t\t **本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容**\n\n\t**小结：**\t\n\t- HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n\t- 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n\t- 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\t\t\n\n3. **已经push到远程仓库**\n\t```\n\tgit revert HEAD                     //撤销最近一次提交\n\tgit revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始\n\tgit revert 0ffaacc                  //撤销0ffaacc这次提交\n\t```\n\t**小结：**\n\t- revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交\t\t\n\t- 使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的\t\t\n\t- 使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。\t\n\t- 如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.\n\n## 总结\n```\t\ngit checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录\ngit reset commitId\t\t\t//回退工作区文件，版本号会回退\ngit revert commitId\t\t\t//回退远程仓库，会产生新的版本号\n```\n  \t\t\t\n\t\t\t\t\n\n\n\n","slug":"Git/revert","published":1,"updated":"2018-03-10T14:50:11.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2w000ghkwcnidhk7gl","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"本文将记录Git使用过程中回滚文件的操作说明。\"><a href=\"#本文将记录Git使用过程中回滚文件的操作说明。\" class=\"headerlink\" title=\"本文将记录Git使用过程中回滚文件的操作说明。\"></a>本文将记录Git使用过程中回滚文件的操作说明。</h2><h2 id=\"情况假设\"><a href=\"#情况假设\" class=\"headerlink\" title=\"情况假设\"></a>情况假设</h2><ol>\n<li>改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.</li>\n<li>改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</li>\n</ol>\n<p><strong>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</strong></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><p><strong>没有commit到本地仓库</strong></p>\n<pre><code>git checkout fileName\n</code></pre><p> 命令执行过后，文件会恢复到上次commit后的内容</p>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>git checkout file1 （回滚单个文件）</li>\n<li>git checkout file1 file2 … fileN （一次回滚多个文件，中间用空格隔开即可）</li>\n<li>git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）</li>\n</ul>\n</li>\n<li><p><strong>已经commit到本地仓库</strong></p>\n<ol>\n<li>查看提交记录<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg\" alt=\"\"></li>\n<li><p>执行回滚操作</p>\n<ul>\n<li>命令说明  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [--soft | --mixed | --hard]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>--soft         </p>\n<pre><code>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>-- mixed</p>\n<pre><code>会保留源码,只是将git commit和index 信息回退到了某个版本.\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset 默认是 --mixed 模式 </span><br><span class=\"line\">git reset --mixed  等价于  git reset</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>--hard         </p>\n<pre><code>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容</strong></p>\n</li>\n</ol>\n<p><strong>小结：</strong>    </p>\n</li>\n</ol>\n<ul>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</li>\n<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。        </li>\n</ul>\n</li>\n<li><p><strong>已经push到远程仓库</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD                     //撤销最近一次提交</span><br><span class=\"line\">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</span><br><span class=\"line\">git revert 0ffaacc                  //撤销0ffaacc这次提交</span><br></pre></td></tr></table></figure>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交        </li>\n<li>使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的        </li>\n<li>使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。    </li>\n<li>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录</span><br><span class=\"line\">git reset commitId\t\t\t//回退工作区文件，版本号会回退</span><br><span class=\"line\">git revert commitId\t\t\t//回退远程仓库，会产生新的版本号</span><br></pre></td></tr></table></figure>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"本文将记录Git使用过程中回滚文件的操作说明。\"><a href=\"#本文将记录Git使用过程中回滚文件的操作说明。\" class=\"headerlink\" title=\"本文将记录Git使用过程中回滚文件的操作说明。\"></a>本文将记录Git使用过程中回滚文件的操作说明。</h2><h2 id=\"情况假设\"><a href=\"#情况假设\" class=\"headerlink\" title=\"情况假设\"></a>情况假设</h2><ol>\n<li>改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.</li>\n<li>改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</li>\n</ol>\n<p><strong>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</strong></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><p><strong>没有commit到本地仓库</strong></p>\n<pre><code>git checkout fileName\n</code></pre><p> 命令执行过后，文件会恢复到上次commit后的内容</p>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>git checkout file1 （回滚单个文件）</li>\n<li>git checkout file1 file2 … fileN （一次回滚多个文件，中间用空格隔开即可）</li>\n<li>git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）</li>\n</ul>\n</li>\n<li><p><strong>已经commit到本地仓库</strong></p>\n<ol>\n<li>查看提交记录<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg\" alt=\"\"></li>\n<li><p>执行回滚操作</p>\n<ul>\n<li>命令说明  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset [--soft | --mixed | --hard]</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>--soft         </p>\n<pre><code>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>-- mixed</p>\n<pre><code>会保留源码,只是将git commit和index 信息回退到了某个版本.\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git reset 默认是 --mixed 模式 </span><br><span class=\"line\">git reset --mixed  等价于  git reset</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>--hard         </p>\n<pre><code>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容</strong></p>\n</li>\n</ol>\n<p><strong>小结：</strong>    </p>\n</li>\n</ol>\n<ul>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</li>\n<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。        </li>\n</ul>\n</li>\n<li><p><strong>已经push到远程仓库</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git revert HEAD                     //撤销最近一次提交</span><br><span class=\"line\">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</span><br><span class=\"line\">git revert 0ffaacc                  //撤销0ffaacc这次提交</span><br></pre></td></tr></table></figure>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交        </li>\n<li>使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的        </li>\n<li>使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。    </li>\n<li>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录</span><br><span class=\"line\">git reset commitId\t\t\t//回退工作区文件，版本号会回退</span><br><span class=\"line\">git revert commitId\t\t\t//回退远程仓库，会产生新的版本号</span><br></pre></td></tr></table></figure>\n"},{"title":"Mysql的Master-Slave主从复制配置","date":"2017-05-24T01:53:04.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n今天来说一下Mysql的主从复制配置方面的事情。\n\n手上有两台服务器，信息如下：\n\n名称         |       IP          |备注\n        -   |   -               |\n**Master**  |   192.168.0.1     | 主服务器\n**Slave**   |   192.168.0.2     | 节点服务器\n\n## Master-Slave主从配置\n\n1. **主服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[必须]启用二进制日志\nserver-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n2. **从服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[不是必须]启用二进制日志\nserver-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n3. **重启两台Mysql服务**\n```\n/etc/init.d/mysql restart\n```\n4. **在主服务器上建立账户并授权Slave**\n    1. 连接服务器\n        ```shell\n        mysql -uroot -p默认密码\n        ```\n    2. 建立账户\n        ```shell\n        GRANT REPLICATION SLAVE ON *.* to 'repl_user'@'%' identified by 'repl_user';\n        ```\n    3. 锁表操作\n        ```\n        flush tables with read lock;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg)\n    4. 查询Master的状态\n        ```shell\n        show master status;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)\n5. **配置从服务器**\n    1. 配置Master信息\n    \n            change master to\n                master_host='192.168.0.1',          //Master服务器IP\n                master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                master_log_pos=0;                   //数据库二进制日志文件开始位置\n\n    2. 检查Slave状态        \n            show slave status \\G;\n         \n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg) \n\n        **注意**： 这样标识从服务器配置成功                \n            Slave_IO_Running:Yes\n            Slave_SQL_Running:Yes           \n\n6. **解除Master的锁表状态**\n        UNLOCK TABLES;\n    \n## Master-Master主主配置\n\n上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。\n```\n    第一次的主机变为从机，\n    第一次的从机变为主机。\n```\n\nMysql配置文件如下：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\nbinlog_format = mixed                            //日志记录方式\nexpire_logs_days        = 7                      //binlog过期清理时间\nmax_binlog_size         = 100m                   //binlog每个日志文件大小    \nbinlog_cache_size       = 4m                     //binlog缓存大小   \nmax_binlog_cache_size   = 512m                   //最大binlog缓存大小  \nlog-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    \n\nreplicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句\n\nauto-increment-offset=2                          //自增主键从1开始计数 \nauto-increment-increment=2                       //自增主键每次加2\n```\n\n## 总结\n1. Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\n```\n2. 主从复制失败\n    1. 查看Master服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)  \n      \n    2. 查看Slave服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg)     \n        两个的二进制日志文件要相同，如果不同    \n        1. 重置Master服务器二进制日志文件\n                reset master; \n        2. 配置Slave服务器的Master连接信息\n                change master to\n                    master_host='192.168.0.1',          //Master服务器IP\n                    master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                    master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                    master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n\n3. 主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复\n   修改Mysql配置文件：\n    ```\n    auto-increment-offset=2                          //自增主键从1开始计数 \n    auto-increment-increment=2                       //自增主键每次加2\n    ```\n","source":"_posts/Mysql/master-slave.md","raw":"---\ntitle: Mysql的Master-Slave主从复制配置\ndate: 2017-05-24 09:53:04\ntags: [Mysql]\ncategories: [Mysql]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n今天来说一下Mysql的主从复制配置方面的事情。\n\n手上有两台服务器，信息如下：\n\n名称         |       IP          |备注\n        -   |   -               |\n**Master**  |   192.168.0.1     | 主服务器\n**Slave**   |   192.168.0.2     | 节点服务器\n\n## Master-Slave主从配置\n\n1. **主服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[必须]启用二进制日志\nserver-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n2. **从服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[不是必须]启用二进制日志\nserver-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n3. **重启两台Mysql服务**\n```\n/etc/init.d/mysql restart\n```\n4. **在主服务器上建立账户并授权Slave**\n    1. 连接服务器\n        ```shell\n        mysql -uroot -p默认密码\n        ```\n    2. 建立账户\n        ```shell\n        GRANT REPLICATION SLAVE ON *.* to 'repl_user'@'%' identified by 'repl_user';\n        ```\n    3. 锁表操作\n        ```\n        flush tables with read lock;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg)\n    4. 查询Master的状态\n        ```shell\n        show master status;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)\n5. **配置从服务器**\n    1. 配置Master信息\n    \n            change master to\n                master_host='192.168.0.1',          //Master服务器IP\n                master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                master_log_pos=0;                   //数据库二进制日志文件开始位置\n\n    2. 检查Slave状态        \n            show slave status \\G;\n         \n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg) \n\n        **注意**： 这样标识从服务器配置成功                \n            Slave_IO_Running:Yes\n            Slave_SQL_Running:Yes           \n\n6. **解除Master的锁表状态**\n        UNLOCK TABLES;\n    \n## Master-Master主主配置\n\n上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。\n```\n    第一次的主机变为从机，\n    第一次的从机变为主机。\n```\n\nMysql配置文件如下：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\nbinlog_format = mixed                            //日志记录方式\nexpire_logs_days        = 7                      //binlog过期清理时间\nmax_binlog_size         = 100m                   //binlog每个日志文件大小    \nbinlog_cache_size       = 4m                     //binlog缓存大小   \nmax_binlog_cache_size   = 512m                   //最大binlog缓存大小  \nlog-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    \n\nreplicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句\n\nauto-increment-offset=2                          //自增主键从1开始计数 \nauto-increment-increment=2                       //自增主键每次加2\n```\n\n## 总结\n1. Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\n```\n2. 主从复制失败\n    1. 查看Master服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)  \n      \n    2. 查看Slave服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg)     \n        两个的二进制日志文件要相同，如果不同    \n        1. 重置Master服务器二进制日志文件\n                reset master; \n        2. 配置Slave服务器的Master连接信息\n                change master to\n                    master_host='192.168.0.1',          //Master服务器IP\n                    master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                    master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                    master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n\n3. 主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复\n   修改Mysql配置文件：\n    ```\n    auto-increment-offset=2                          //自增主键从1开始计数 \n    auto-increment-increment=2                       //自增主键每次加2\n    ```\n","slug":"Mysql/master-slave","published":1,"updated":"2018-03-10T14:50:11.763Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k2y000khkwca9o08n1g","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><br>今天来说一下Mysql的主从复制配置方面的事情。<p></p>\n<p>手上有两台服务器，信息如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>IP</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Master</strong></td>\n<td>192.168.0.1</td>\n<td>主服务器</td>\n</tr>\n<tr>\n<td><strong>Slave</strong></td>\n<td>192.168.0.2</td>\n<td>节点服务器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Master-Slave主从配置\"><a href=\"#Master-Slave主从配置\" class=\"headerlink\" title=\"Master-Slave主从配置\"></a>Master-Slave主从配置</h2><ol>\n<li><p><strong>主服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin   //[必须]启用二进制日志</span><br><span class=\"line\">server-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin   //[不是必须]启用二进制日志</span><br><span class=\"line\">server-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启两台Mysql服务</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在主服务器上建立账户并授权Slave</strong></p>\n<ol>\n<li><p>连接服务器</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p默认密码</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立账户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT REPLICATION SLAVE ON *.* to 'repl_user'@'%' identified by 'repl_user';</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>锁表操作</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush tables with read lock;</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg\" alt=\"\"></p>\n</li>\n<li><p>查询Master的状态</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>配置从服务器</strong></p>\n<ol>\n<li><p>配置Master信息</p>\n<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置\n</code></pre></li>\n<li><p>检查Slave状态        </p>\n<pre><code>show slave status \\G;\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"> </p>\n<p> <strong>注意</strong>： 这样标识从服务器配置成功                </p>\n<pre><code>Slave_IO_Running:Yes\nSlave_SQL_Running:Yes           \n</code></pre></li>\n</ol>\n</li>\n<li><p><strong>解除Master的锁表状态</strong></p>\n<pre><code>UNLOCK TABLES;\n</code></pre></li>\n</ol>\n<h2 id=\"Master-Master主主配置\"><a href=\"#Master-Master主主配置\" class=\"headerlink\" title=\"Master-Master主主配置\"></a>Master-Master主主配置</h2><p>上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次的主机变为从机，</span><br><span class=\"line\">第一次的从机变为主机。</span><br></pre></td></tr></table></figure></p>\n<p>Mysql配置文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</span><br><span class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</span><br><span class=\"line\">binlog_format = mixed                            //日志记录方式</span><br><span class=\"line\">expire_logs_days        = 7                      //binlog过期清理时间</span><br><span class=\"line\">max_binlog_size         = 100m                   //binlog每个日志文件大小    </span><br><span class=\"line\">binlog_cache_size       = 4m                     //binlog缓存大小   </span><br><span class=\"line\">max_binlog_cache_size   = 512m                   //最大binlog缓存大小  </span><br><span class=\"line\">log-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    </span><br><span class=\"line\"></span><br><span class=\"line\">replicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句</span><br><span class=\"line\"></span><br><span class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </span><br><span class=\"line\">auto-increment-increment=2                       //自增主键每次加2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</span><br><span class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主从复制失败</p>\n<ol>\n<li><p>查看Master服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\">  </p>\n</li>\n<li><p>查看Slave服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"><br> 两个的二进制日志文件要相同，如果不同    </p>\n<ol>\n<li>重置Master服务器二进制日志文件<pre><code>reset master; \n</code></pre></li>\n<li>配置Slave服务器的Master连接信息<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n</code></pre></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复<br>修改Mysql配置文件：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </span><br><span class=\"line\">auto-increment-increment=2                       //自增主键每次加2</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><br>今天来说一下Mysql的主从复制配置方面的事情。<p></p>\n<p>手上有两台服务器，信息如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>IP</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Master</strong></td>\n<td>192.168.0.1</td>\n<td>主服务器</td>\n</tr>\n<tr>\n<td><strong>Slave</strong></td>\n<td>192.168.0.2</td>\n<td>节点服务器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Master-Slave主从配置\"><a href=\"#Master-Slave主从配置\" class=\"headerlink\" title=\"Master-Slave主从配置\"></a>Master-Slave主从配置</h2><ol>\n<li><p><strong>主服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin   //[必须]启用二进制日志</span><br><span class=\"line\">server-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[mysqld]</span><br><span class=\"line\">log-bin=mysql-bin   //[不是必须]启用二进制日志</span><br><span class=\"line\">server-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启两台Mysql服务</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/etc/init.d/mysql restart</span><br></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在主服务器上建立账户并授权Slave</strong></p>\n<ol>\n<li><p>连接服务器</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mysql -uroot -p默认密码</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>建立账户</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">GRANT REPLICATION SLAVE ON *.* to 'repl_user'@'%' identified by 'repl_user';</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>锁表操作</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">flush tables with read lock;</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg\" alt=\"\"></p>\n</li>\n<li><p>查询Master的状态</p>\n <figure class=\"highlight shell\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">show master status;</span><br></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>配置从服务器</strong></p>\n<ol>\n<li><p>配置Master信息</p>\n<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置\n</code></pre></li>\n<li><p>检查Slave状态        </p>\n<pre><code>show slave status \\G;\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"> </p>\n<p> <strong>注意</strong>： 这样标识从服务器配置成功                </p>\n<pre><code>Slave_IO_Running:Yes\nSlave_SQL_Running:Yes           \n</code></pre></li>\n</ol>\n</li>\n<li><p><strong>解除Master的锁表状态</strong></p>\n<pre><code>UNLOCK TABLES;\n</code></pre></li>\n</ol>\n<h2 id=\"Master-Master主主配置\"><a href=\"#Master-Master主主配置\" class=\"headerlink\" title=\"Master-Master主主配置\"></a>Master-Master主主配置</h2><p>上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">第一次的主机变为从机，</span><br><span class=\"line\">第一次的从机变为主机。</span><br></pre></td></tr></table></figure></p>\n<p>Mysql配置文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</span><br><span class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</span><br><span class=\"line\">binlog_format = mixed                            //日志记录方式</span><br><span class=\"line\">expire_logs_days        = 7                      //binlog过期清理时间</span><br><span class=\"line\">max_binlog_size         = 100m                   //binlog每个日志文件大小    </span><br><span class=\"line\">binlog_cache_size       = 4m                     //binlog缓存大小   </span><br><span class=\"line\">max_binlog_cache_size   = 512m                   //最大binlog缓存大小  </span><br><span class=\"line\">log-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    </span><br><span class=\"line\"></span><br><span class=\"line\">replicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句</span><br><span class=\"line\"></span><br><span class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </span><br><span class=\"line\">auto-increment-increment=2                       //自增主键每次加2</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</span><br><span class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>主从复制失败</p>\n<ol>\n<li><p>查看Master服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\">  </p>\n</li>\n<li><p>查看Slave服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"><br> 两个的二进制日志文件要相同，如果不同    </p>\n<ol>\n<li>重置Master服务器二进制日志文件<pre><code>reset master; \n</code></pre></li>\n<li>配置Slave服务器的Master连接信息<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n</code></pre></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复<br>修改Mysql配置文件：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </span><br><span class=\"line\">auto-increment-increment=2                       //自增主键每次加2</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"Redis安装","date":"2017-07-10T03:23:47.000Z","_content":"<p align='center'>\n![](https://redis.io/images/redis-white.png)\n</p>\n\n## 下载Redis-3.2.9\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhen4vklu1j20re0ehmyz.jpg)\n```\nwget -c http://download.redis.io/releases/redis-3.2.9.tar.gz\n```\n## 解压\n```\ntar xzf redis-3.2.9.tar.gz -C /usr/local\n```\n## 安装\n```\ncd /usr/local/redis-3.2.9 \t#进入redis安装目录\nmake \t\t\t\t\t\t#编译\nmake install \t\t\t\t#安装\n```\n\n## 启动\n```\n/usr/local/redis-3.2.9/src/redis-server\t# 已默认配置启动\n```\n\n如果出现一下内容，说明启动成功：\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhen8mi51xj20u808d74b.jpg)\n\n## 后台启动\n\n默认的方式不是后台启动，如果这个控制台关闭的话，Redis服务也会随之关闭。\n1. 修改配置\n```\nvim /usr/local/redis-3.2.9/redis.conf\n```\n将**daemonize**的值改为**yes**,\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhenbizd5cj20g002smx1.jpg)\n\n2. 重新启动\n```\n/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf\t# 已特定配置启动\n```\n\n## 停止Redis实例\n```\n/usr/local/redis-3.2.9/src/redis-cli shutdown   # Redis自带命令\npkill redis-server\t\t\t\t\t\t\t\t# 杀死Redis进程\n```\n\n## Redis开机启动\n```\nvim /etc/rc.local\n```\n加入以下内容：\n```\n/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhenhb3tfrj20eu06kt8t.jpg)\n\n\n## Redis配置文件说明\n```\ndaemonize：如需要在后台运行，把该项的值改为yes\npdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址\nbind：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项\nport：监听端口，默认为6379\ntimeout：设置客户端连接时的超时时间，单位为秒\nloglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice\nlogfile：配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上\ndatabase：设置数据库的个数，默认使用的数据库是0\nsave：设置redis进行数据库镜像的频率\nrdbcompression：在进行镜像备份时，是否进行压缩\ndbfilename：镜像备份文件的文件名\ndir：数据库镜像备份的文件放置的路径\nslaveof：设置该数据库为其他数据库的从数据库\nmasterauth：当主数据库连接需要密码验证时，在这里设定\nrequirepass：设置客户端连接后进行任何其他指定前需要使用的密码\nmaxclients：限制同时连接的客户端数量\nmaxmemory：设置redis能够使用的最大内存\nappendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态\nappendfsync：设置appendonly.aof文件进行同步的频率\nvm_enabled：是否开启虚拟内存支持\nvm_swap_file：设置虚拟内存的交换文件的路径\nvm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0\nvm_page_size：设置虚拟内存页的大小\nvm_pages：设置交换文件的总的page数量\nvm_max_thrrads：设置vm IO同时使用的线程数量\n```","source":"_posts/Redis/install.md","raw":"---\ntitle: Redis安装\ndate: 2017-07-10 11:23:47\ntags: [Redis]\ncategories: [Redis]\n---\n<p align='center'>\n![](https://redis.io/images/redis-white.png)\n</p>\n\n## 下载Redis-3.2.9\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhen4vklu1j20re0ehmyz.jpg)\n```\nwget -c http://download.redis.io/releases/redis-3.2.9.tar.gz\n```\n## 解压\n```\ntar xzf redis-3.2.9.tar.gz -C /usr/local\n```\n## 安装\n```\ncd /usr/local/redis-3.2.9 \t#进入redis安装目录\nmake \t\t\t\t\t\t#编译\nmake install \t\t\t\t#安装\n```\n\n## 启动\n```\n/usr/local/redis-3.2.9/src/redis-server\t# 已默认配置启动\n```\n\n如果出现一下内容，说明启动成功：\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhen8mi51xj20u808d74b.jpg)\n\n## 后台启动\n\n默认的方式不是后台启动，如果这个控制台关闭的话，Redis服务也会随之关闭。\n1. 修改配置\n```\nvim /usr/local/redis-3.2.9/redis.conf\n```\n将**daemonize**的值改为**yes**,\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhenbizd5cj20g002smx1.jpg)\n\n2. 重新启动\n```\n/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf\t# 已特定配置启动\n```\n\n## 停止Redis实例\n```\n/usr/local/redis-3.2.9/src/redis-cli shutdown   # Redis自带命令\npkill redis-server\t\t\t\t\t\t\t\t# 杀死Redis进程\n```\n\n## Redis开机启动\n```\nvim /etc/rc.local\n```\n加入以下内容：\n```\n/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhenhb3tfrj20eu06kt8t.jpg)\n\n\n## Redis配置文件说明\n```\ndaemonize：如需要在后台运行，把该项的值改为yes\npdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址\nbind：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项\nport：监听端口，默认为6379\ntimeout：设置客户端连接时的超时时间，单位为秒\nloglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice\nlogfile：配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上\ndatabase：设置数据库的个数，默认使用的数据库是0\nsave：设置redis进行数据库镜像的频率\nrdbcompression：在进行镜像备份时，是否进行压缩\ndbfilename：镜像备份文件的文件名\ndir：数据库镜像备份的文件放置的路径\nslaveof：设置该数据库为其他数据库的从数据库\nmasterauth：当主数据库连接需要密码验证时，在这里设定\nrequirepass：设置客户端连接后进行任何其他指定前需要使用的密码\nmaxclients：限制同时连接的客户端数量\nmaxmemory：设置redis能够使用的最大内存\nappendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态\nappendfsync：设置appendonly.aof文件进行同步的频率\nvm_enabled：是否开启虚拟内存支持\nvm_swap_file：设置虚拟内存的交换文件的路径\nvm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0\nvm_page_size：设置虚拟内存页的大小\nvm_pages：设置交换文件的总的page数量\nvm_max_thrrads：设置vm IO同时使用的线程数量\n```","slug":"Redis/install","published":1,"updated":"2018-03-10T14:50:11.764Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k31000lhkwcnusyqiqr","content":"<p align=\"center\"><br><img src=\"https://redis.io/images/redis-white.png\" alt=\"\"><br></p>\n\n<h2 id=\"下载Redis-3-2-9\"><a href=\"#下载Redis-3-2-9\" class=\"headerlink\" title=\"下载Redis-3.2.9\"></a>下载Redis-3.2.9</h2><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhen4vklu1j20re0ehmyz.jpg\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-3.2.9.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/redis-3.2.9 \t#进入redis安装目录</span><br><span class=\"line\">make \t\t\t\t\t\t#编译</span><br><span class=\"line\">make install \t\t\t\t#安装</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-server\t# 已默认配置启动</span><br></pre></td></tr></table></figure>\n<p>如果出现一下内容，说明启动成功：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhen8mi51xj20u808d74b.jpg\" alt=\"\"></p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><p>默认的方式不是后台启动，如果这个控制台关闭的话，Redis服务也会随之关闭。</p>\n<ol>\n<li>修改配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/redis-3.2.9/redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将<strong>daemonize</strong>的值改为<strong>yes</strong>,<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhenbizd5cj20g002smx1.jpg\" alt=\"\"></p>\n<ol>\n<li>重新启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf\t# 已特定配置启动</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"停止Redis实例\"><a href=\"#停止Redis实例\" class=\"headerlink\" title=\"停止Redis实例\"></a>停止Redis实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-cli shutdown   # Redis自带命令</span><br><span class=\"line\">pkill redis-server\t\t\t\t\t\t\t\t# 杀死Redis进程</span><br></pre></td></tr></table></figure>\n<h2 id=\"Redis开机启动\"><a href=\"#Redis开机启动\" class=\"headerlink\" title=\"Redis开机启动\"></a>Redis开机启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/rc.local</span><br></pre></td></tr></table></figure>\n<p>加入以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhenhb3tfrj20eu06kt8t.jpg\" alt=\"\"></p>\n<h2 id=\"Redis配置文件说明\"><a href=\"#Redis配置文件说明\" class=\"headerlink\" title=\"Redis配置文件说明\"></a>Redis配置文件说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize：如需要在后台运行，把该项的值改为yes</span><br><span class=\"line\">pdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址</span><br><span class=\"line\">bind：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</span><br><span class=\"line\">port：监听端口，默认为6379</span><br><span class=\"line\">timeout：设置客户端连接时的超时时间，单位为秒</span><br><span class=\"line\">loglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</span><br><span class=\"line\">logfile：配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上</span><br><span class=\"line\">database：设置数据库的个数，默认使用的数据库是0</span><br><span class=\"line\">save：设置redis进行数据库镜像的频率</span><br><span class=\"line\">rdbcompression：在进行镜像备份时，是否进行压缩</span><br><span class=\"line\">dbfilename：镜像备份文件的文件名</span><br><span class=\"line\">dir：数据库镜像备份的文件放置的路径</span><br><span class=\"line\">slaveof：设置该数据库为其他数据库的从数据库</span><br><span class=\"line\">masterauth：当主数据库连接需要密码验证时，在这里设定</span><br><span class=\"line\">requirepass：设置客户端连接后进行任何其他指定前需要使用的密码</span><br><span class=\"line\">maxclients：限制同时连接的客户端数量</span><br><span class=\"line\">maxmemory：设置redis能够使用的最大内存</span><br><span class=\"line\">appendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态</span><br><span class=\"line\">appendfsync：设置appendonly.aof文件进行同步的频率</span><br><span class=\"line\">vm_enabled：是否开启虚拟内存支持</span><br><span class=\"line\">vm_swap_file：设置虚拟内存的交换文件的路径</span><br><span class=\"line\">vm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</span><br><span class=\"line\">vm_page_size：设置虚拟内存页的大小</span><br><span class=\"line\">vm_pages：设置交换文件的总的page数量</span><br><span class=\"line\">vm_max_thrrads：设置vm IO同时使用的线程数量</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"https://redis.io/images/redis-white.png\" alt=\"\"><br></p>\n\n<h2 id=\"下载Redis-3-2-9\"><a href=\"#下载Redis-3-2-9\" class=\"headerlink\" title=\"下载Redis-3.2.9\"></a>下载Redis-3.2.9</h2><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhen4vklu1j20re0ehmyz.jpg\" alt=\"\"><br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget -c http://download.redis.io/releases/redis-3.2.9.tar.gz</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar xzf redis-3.2.9.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd /usr/local/redis-3.2.9 \t#进入redis安装目录</span><br><span class=\"line\">make \t\t\t\t\t\t#编译</span><br><span class=\"line\">make install \t\t\t\t#安装</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-server\t# 已默认配置启动</span><br></pre></td></tr></table></figure>\n<p>如果出现一下内容，说明启动成功：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhen8mi51xj20u808d74b.jpg\" alt=\"\"></p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><p>默认的方式不是后台启动，如果这个控制台关闭的话，Redis服务也会随之关闭。</p>\n<ol>\n<li>修改配置<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /usr/local/redis-3.2.9/redis.conf</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>将<strong>daemonize</strong>的值改为<strong>yes</strong>,<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhenbizd5cj20g002smx1.jpg\" alt=\"\"></p>\n<ol>\n<li>重新启动<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf\t# 已特定配置启动</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"停止Redis实例\"><a href=\"#停止Redis实例\" class=\"headerlink\" title=\"停止Redis实例\"></a>停止Redis实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-cli shutdown   # Redis自带命令</span><br><span class=\"line\">pkill redis-server\t\t\t\t\t\t\t\t# 杀死Redis进程</span><br></pre></td></tr></table></figure>\n<h2 id=\"Redis开机启动\"><a href=\"#Redis开机启动\" class=\"headerlink\" title=\"Redis开机启动\"></a>Redis开机启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim /etc/rc.local</span><br></pre></td></tr></table></figure>\n<p>加入以下内容：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/usr/local/redis-3.2.9/src/redis-server\t/usr/local/redis-3.2.9/redis.conf</span><br></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhenhb3tfrj20eu06kt8t.jpg\" alt=\"\"></p>\n<h2 id=\"Redis配置文件说明\"><a href=\"#Redis配置文件说明\" class=\"headerlink\" title=\"Redis配置文件说明\"></a>Redis配置文件说明</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">daemonize：如需要在后台运行，把该项的值改为yes</span><br><span class=\"line\">pdifile：把pid文件放在/var/run/redis.pid，可以配置到其他地址</span><br><span class=\"line\">bind：指定redis只接收来自该IP的请求，如果不设置，那么将处理所有请求，在生产环节中最好设置该项</span><br><span class=\"line\">port：监听端口，默认为6379</span><br><span class=\"line\">timeout：设置客户端连接时的超时时间，单位为秒</span><br><span class=\"line\">loglevel：等级分为4级，debug，revbose，notice和warning。生产环境下一般开启notice</span><br><span class=\"line\">logfile：配置log文件地址，默认使用标准输出，即打印在命令行终端的端口上</span><br><span class=\"line\">database：设置数据库的个数，默认使用的数据库是0</span><br><span class=\"line\">save：设置redis进行数据库镜像的频率</span><br><span class=\"line\">rdbcompression：在进行镜像备份时，是否进行压缩</span><br><span class=\"line\">dbfilename：镜像备份文件的文件名</span><br><span class=\"line\">dir：数据库镜像备份的文件放置的路径</span><br><span class=\"line\">slaveof：设置该数据库为其他数据库的从数据库</span><br><span class=\"line\">masterauth：当主数据库连接需要密码验证时，在这里设定</span><br><span class=\"line\">requirepass：设置客户端连接后进行任何其他指定前需要使用的密码</span><br><span class=\"line\">maxclients：限制同时连接的客户端数量</span><br><span class=\"line\">maxmemory：设置redis能够使用的最大内存</span><br><span class=\"line\">appendonly：开启appendonly模式后，redis会把每一次所接收到的写操作都追加到appendonly.aof文件中，当redis重新启动时，会从该文件恢复出之前的状态</span><br><span class=\"line\">appendfsync：设置appendonly.aof文件进行同步的频率</span><br><span class=\"line\">vm_enabled：是否开启虚拟内存支持</span><br><span class=\"line\">vm_swap_file：设置虚拟内存的交换文件的路径</span><br><span class=\"line\">vm_max_momery：设置开启虚拟内存后，redis将使用的最大物理内存的大小，默认为0</span><br><span class=\"line\">vm_page_size：设置虚拟内存页的大小</span><br><span class=\"line\">vm_pages：设置交换文件的总的page数量</span><br><span class=\"line\">vm_max_thrrads：设置vm IO同时使用的线程数量</span><br></pre></td></tr></table></figure>"},{"title":"SpringMVC源码分析--核心分发器DispatcherServlet（请求转发）","date":"2017-05-27T06:15:02.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。\n\n原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。\n以下是 Servlet 遵循的过程：\n1. Servlet 通过调用 init () 方法进行初始化。\n2. Servlet 调用 service() 方法来处理客户端的请求。\n3. Servlet 通过调用 destroy() 方法终止（结束）。\n\n最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\n\nSpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。\n\n## SpringMVC请求流程图\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg)\n\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg)\nSpringMVC核心处理流程：\n1. DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器\n\n2. HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）\n\n3. HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）\n\n4. ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图\n\n5. 然后再将Model模型中的数据渲染到View上\n\n这些过程都是以DispatcherServlet为中轴线进行的.","source":"_posts/SpringMVC/dispatcherServlet-forward.md","raw":"---\ntitle: SpringMVC源码分析--核心分发器DispatcherServlet（请求转发）\ndate: 2017-05-27 14:15:02\ncategories: [SpringMVC]\ntags: [SpringMVC源码分析]\n---\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。\n\n原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。\n以下是 Servlet 遵循的过程：\n1. Servlet 通过调用 init () 方法进行初始化。\n2. Servlet 调用 service() 方法来处理客户端的请求。\n3. Servlet 通过调用 destroy() 方法终止（结束）。\n\n最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\n\nSpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。\n\n## SpringMVC请求流程图\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg)\n\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg)\nSpringMVC核心处理流程：\n1. DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器\n\n2. HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）\n\n3. HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）\n\n4. ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图\n\n5. 然后再将Model模型中的数据渲染到View上\n\n这些过程都是以DispatcherServlet为中轴线进行的.","slug":"SpringMVC/dispatcherServlet-forward","published":1,"updated":"2018-03-10T14:50:11.765Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k33000qhkwchzhitbcw","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p><br>本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。<p></p>\n<p>原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。<br>以下是 Servlet 遵循的过程：</p>\n<ol>\n<li>Servlet 通过调用 init () 方法进行初始化。</li>\n<li>Servlet 调用 service() 方法来处理客户端的请求。</li>\n<li>Servlet 通过调用 destroy() 方法终止（结束）。</li>\n</ol>\n<p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p>\n<p>SpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。</p>\n<h2 id=\"SpringMVC请求流程图\"><a href=\"#SpringMVC请求流程图\" class=\"headerlink\" title=\"SpringMVC请求流程图\"></a>SpringMVC请求流程图</h2><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg\" alt=\"\"><br>SpringMVC核心处理流程：</p>\n<ol>\n<li><p>DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器</p>\n</li>\n<li><p>HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）</p>\n</li>\n<li><p>HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）</p>\n</li>\n<li><p>ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图</p>\n</li>\n<li><p>然后再将Model模型中的数据渲染到View上</p>\n</li>\n</ol>\n<p>这些过程都是以DispatcherServlet为中轴线进行的.</p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p><br>本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。<p></p>\n<p>原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。<br>以下是 Servlet 遵循的过程：</p>\n<ol>\n<li>Servlet 通过调用 init () 方法进行初始化。</li>\n<li>Servlet 调用 service() 方法来处理客户端的请求。</li>\n<li>Servlet 通过调用 destroy() 方法终止（结束）。</li>\n</ol>\n<p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p>\n<p>SpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。</p>\n<h2 id=\"SpringMVC请求流程图\"><a href=\"#SpringMVC请求流程图\" class=\"headerlink\" title=\"SpringMVC请求流程图\"></a>SpringMVC请求流程图</h2><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg\" alt=\"\"><br>SpringMVC核心处理流程：</p>\n<ol>\n<li><p>DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器</p>\n</li>\n<li><p>HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）</p>\n</li>\n<li><p>HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）</p>\n</li>\n<li><p>ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图</p>\n</li>\n<li><p>然后再将Model模型中的数据渲染到View上</p>\n</li>\n</ol>\n<p>这些过程都是以DispatcherServlet为中轴线进行的.</p>\n"},{"title":"SpringMVC源码分析--核心分发器DispatcherServlet（初始化）","date":"2017-05-17T10:31:23.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n\n本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。\n\n## SpringMVC配置\n1. 指明Servlet，在配置文件web.xml中如下配置：\t\n```xml\n<!-- Spring MVC servlet -->\n<servlet>\n    <servlet-name>springMVC</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath*:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springMVC</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n> load-on-startup：表示启动容器时初始化该Servlet；\n> url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。\n \n2. 配置SpringMVC信息 \n\t```xml\n\t<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->\n\t<context:component-scan base-package=\"com.springmvc.example\"/>\n\t\n\t<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->\n\t<bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n\t</bean>\n\t\n\t<!-- 定义跳转的文件的前后缀，视图模式配置-->\n\t<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 -->\n\t    <property name=\"prefix\" value=\"/jsp/\"/>\n\t    <property name=\"suffix\" value=\".jsp\"/>\n\t</bean>\n\t```\n\t2.1. **配置扫描路径**\n\t2.2. **启用注解功能**\n\t2.3. **视图配置信息：前缀和后缀**\n\n\n至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。\n\n## SpringMVC初始化流程图\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg)\n</p>\n\n## DispatcherServlet初始化流程分析\n```java\n\t/**\n\t * This implementation calls {@link #initStrategies}.\n\t */\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t//初始化请求地址\n\t\tinitHandlerMappings(context);\n\t\t//初始化请求解析器\n\t\tinitHandlerAdapters(context);\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n初始化流程在FrameworkServlet类中流转，建立了上下文后，通过**onRefresh(ApplicationContext context)**方法的回调，进入到DispatcherServlet类中。\n\n以其中**initHandlerMappings(context)**方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。\n### 关键代码片段\n```java\n\t/**\n\t * Create a List of default strategy objects for the given strategy interface.\n\t * <p>The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n\t * package as the DispatcherServlet class) to determine the class names. It instantiates\n\t * the strategy objects through the context's BeanFactory.\n\t * @param context the current WebApplicationContext\n\t * @param strategyInterface the strategy interface\n\t * @return the List of corresponding strategy objects\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {\n\t\tString key = strategyInterface.getName();\n\t\tString value = defaultStrategies.getProperty(key);\n\t\tif (value != null) {\n\t\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);\n\t\t\tList<T> strategies = new ArrayList<T>(classNames.length);\n\t\t\tfor (String className : classNames) {\n\t\t\t\ttry {\n\t\t\t\t\t//通过反射，得到传入参数的Class对象\n\t\t\t\t\tClass<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());\n\t\t\t\t\t//关键\n\t\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);\n\t\t\t\t\tstrategies.add((T) strategy);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Could not find DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]\", ex);\n\t\t\t\t}\n\t\t\t\tcatch (LinkageError err) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Error loading DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]: problem with class file or dependent class\", err);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strategies;\n\t\t}\n\t\telse {\n\t\t\treturn new LinkedList<T>();\n\t\t}\n\t}\n```\n\n**DefaultAnnotationHandlerMapping.determineUrlsForHandler**：\n```java\n\t/**\n\t * Checks for presence of the {@link org.springframework.web.bind.annotation.RequestMapping}\n\t * annotation on the handler class and on any of its methods.\n\t */\n\t@Override\n\tprotected String[] determineUrlsForHandler(String beanName) {\n\t\tApplicationContext context = getApplicationContext();\n\t\tClass<?> handlerType = context.getType(beanName);\n\t\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);\n\t\tif (mapping != null) {\n\t\t\t// @RequestMapping found at type level\n\t\t\tthis.cachedMappings.put(handlerType, mapping);\n\t\t\tSet<String> urls = new LinkedHashSet<String>();\n\t\t\tString[] typeLevelPatterns = mapping.value();\n\t\t\tif (typeLevelPatterns.length > 0) {\n\t\t\t\t// @RequestMapping specifies paths at type level\n\t\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, true);\n\t\t\t\tfor (String typeLevelPattern : typeLevelPatterns) {\n\t\t\t\t\tif (!typeLevelPattern.startsWith(\"/\")) {\n\t\t\t\t\t\ttypeLevelPattern = \"/\" + typeLevelPattern;\n\t\t\t\t\t}\n\t\t\t\t\tboolean hasEmptyMethodLevelMappings = false;\n\t\t\t\t\tfor (String methodLevelPattern : methodLevelPatterns) {\n\t\t\t\t\t\tif (methodLevelPattern == null) {\n\t\t\t\t\t\t\thasEmptyMethodLevelMappings = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);\n\t\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (hasEmptyMethodLevelMappings ||\n\t\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) {\n\t\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn StringUtils.toStringArray(urls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// actual paths specified by @RequestMapping at method level\n\t\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t\t}\n\t\t}\n\t\telse if (AnnotationUtils.findAnnotation(handlerType, Controller.class) != null) {\n\t\t\t// @RequestMapping to be introspected at method level\n\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n```\n\n通过遍历每一个类，查找**RequestMapping**注解，得到了所有controller层的请求Url。\n最后讲Url和handle存入Map<String, Object>集合中，以备解析请求的时候快速找到controller。\n**initHandlerMappings**的流程大概就是以上这些。\n\n其他方法和**initHandlerMappings**类似，就不废话了。\n\n## 总结\n回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，\nSpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。\n其中：\n- HttpServletBean完成的是<init-param>配置元素的依赖注入，\n- FrameworkServlet完成的是容器上下文的建立，\n- DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。","source":"_posts/SpringMVC/dispatcherServlet-init.md","raw":"---\ntitle: SpringMVC源码分析--核心分发器DispatcherServlet（初始化）\ndate: 2017-05-17 18:31:23\ncategories: [SpringMVC]\ntags: [SpringMVC源码分析]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n\n本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。\n\n## SpringMVC配置\n1. 指明Servlet，在配置文件web.xml中如下配置：\t\n```xml\n<!-- Spring MVC servlet -->\n<servlet>\n    <servlet-name>springMVC</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath*:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springMVC</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n> load-on-startup：表示启动容器时初始化该Servlet；\n> url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。\n \n2. 配置SpringMVC信息 \n\t```xml\n\t<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->\n\t<context:component-scan base-package=\"com.springmvc.example\"/>\n\t\n\t<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->\n\t<bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n\t</bean>\n\t\n\t<!-- 定义跳转的文件的前后缀，视图模式配置-->\n\t<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 -->\n\t    <property name=\"prefix\" value=\"/jsp/\"/>\n\t    <property name=\"suffix\" value=\".jsp\"/>\n\t</bean>\n\t```\n\t2.1. **配置扫描路径**\n\t2.2. **启用注解功能**\n\t2.3. **视图配置信息：前缀和后缀**\n\n\n至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。\n\n## SpringMVC初始化流程图\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg)\n</p>\n\n## DispatcherServlet初始化流程分析\n```java\n\t/**\n\t * This implementation calls {@link #initStrategies}.\n\t */\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t//初始化请求地址\n\t\tinitHandlerMappings(context);\n\t\t//初始化请求解析器\n\t\tinitHandlerAdapters(context);\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n初始化流程在FrameworkServlet类中流转，建立了上下文后，通过**onRefresh(ApplicationContext context)**方法的回调，进入到DispatcherServlet类中。\n\n以其中**initHandlerMappings(context)**方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。\n### 关键代码片段\n```java\n\t/**\n\t * Create a List of default strategy objects for the given strategy interface.\n\t * <p>The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n\t * package as the DispatcherServlet class) to determine the class names. It instantiates\n\t * the strategy objects through the context's BeanFactory.\n\t * @param context the current WebApplicationContext\n\t * @param strategyInterface the strategy interface\n\t * @return the List of corresponding strategy objects\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {\n\t\tString key = strategyInterface.getName();\n\t\tString value = defaultStrategies.getProperty(key);\n\t\tif (value != null) {\n\t\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);\n\t\t\tList<T> strategies = new ArrayList<T>(classNames.length);\n\t\t\tfor (String className : classNames) {\n\t\t\t\ttry {\n\t\t\t\t\t//通过反射，得到传入参数的Class对象\n\t\t\t\t\tClass<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());\n\t\t\t\t\t//关键\n\t\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);\n\t\t\t\t\tstrategies.add((T) strategy);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Could not find DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]\", ex);\n\t\t\t\t}\n\t\t\t\tcatch (LinkageError err) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Error loading DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]: problem with class file or dependent class\", err);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strategies;\n\t\t}\n\t\telse {\n\t\t\treturn new LinkedList<T>();\n\t\t}\n\t}\n```\n\n**DefaultAnnotationHandlerMapping.determineUrlsForHandler**：\n```java\n\t/**\n\t * Checks for presence of the {@link org.springframework.web.bind.annotation.RequestMapping}\n\t * annotation on the handler class and on any of its methods.\n\t */\n\t@Override\n\tprotected String[] determineUrlsForHandler(String beanName) {\n\t\tApplicationContext context = getApplicationContext();\n\t\tClass<?> handlerType = context.getType(beanName);\n\t\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);\n\t\tif (mapping != null) {\n\t\t\t// @RequestMapping found at type level\n\t\t\tthis.cachedMappings.put(handlerType, mapping);\n\t\t\tSet<String> urls = new LinkedHashSet<String>();\n\t\t\tString[] typeLevelPatterns = mapping.value();\n\t\t\tif (typeLevelPatterns.length > 0) {\n\t\t\t\t// @RequestMapping specifies paths at type level\n\t\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, true);\n\t\t\t\tfor (String typeLevelPattern : typeLevelPatterns) {\n\t\t\t\t\tif (!typeLevelPattern.startsWith(\"/\")) {\n\t\t\t\t\t\ttypeLevelPattern = \"/\" + typeLevelPattern;\n\t\t\t\t\t}\n\t\t\t\t\tboolean hasEmptyMethodLevelMappings = false;\n\t\t\t\t\tfor (String methodLevelPattern : methodLevelPatterns) {\n\t\t\t\t\t\tif (methodLevelPattern == null) {\n\t\t\t\t\t\t\thasEmptyMethodLevelMappings = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);\n\t\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (hasEmptyMethodLevelMappings ||\n\t\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) {\n\t\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn StringUtils.toStringArray(urls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// actual paths specified by @RequestMapping at method level\n\t\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t\t}\n\t\t}\n\t\telse if (AnnotationUtils.findAnnotation(handlerType, Controller.class) != null) {\n\t\t\t// @RequestMapping to be introspected at method level\n\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n```\n\n通过遍历每一个类，查找**RequestMapping**注解，得到了所有controller层的请求Url。\n最后讲Url和handle存入Map<String, Object>集合中，以备解析请求的时候快速找到controller。\n**initHandlerMappings**的流程大概就是以上这些。\n\n其他方法和**initHandlerMappings**类似，就不废话了。\n\n## 总结\n回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，\nSpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。\n其中：\n- HttpServletBean完成的是<init-param>配置元素的依赖注入，\n- FrameworkServlet完成的是容器上下文的建立，\n- DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。","slug":"SpringMVC/dispatcherServlet-init","published":1,"updated":"2018-03-10T14:50:11.766Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k34000shkwc46hk225w","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p>\n\n<p>本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。</p>\n<h2 id=\"SpringMVC配置\"><a href=\"#SpringMVC配置\" class=\"headerlink\" title=\"SpringMVC配置\"></a>SpringMVC配置</h2><ol>\n<li>指明Servlet，在配置文件web.xml中如下配置：    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Spring MVC servlet --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath*:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>load-on-startup：表示启动容器时初始化该Servlet；<br>url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。</p>\n</blockquote>\n<ol>\n<li><p>配置SpringMVC信息 </p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.springmvc.example\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义跳转的文件的前后缀，视图模式配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/jsp/\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 2.1. <strong>配置扫描路径</strong><br> 2.2. <strong>启用注解功能</strong><br> 2.3. <strong>视图配置信息：前缀和后缀</strong></p>\n</li>\n</ol>\n<p>至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。</p>\n<h2 id=\"SpringMVC初始化流程图\"><a href=\"#SpringMVC初始化流程图\" class=\"headerlink\" title=\"SpringMVC初始化流程图\"></a>SpringMVC初始化流程图</h2><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"DispatcherServlet初始化流程分析\"><a href=\"#DispatcherServlet初始化流程分析\" class=\"headerlink\" title=\"DispatcherServlet初始化流程分析\"></a>DispatcherServlet初始化流程分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This implementation calls &#123;<span class=\"doctag\">@link</span> #initStrategies&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefresh</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\tinitStrategies(context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize the strategy objects that this servlet uses.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\tinitMultipartResolver(context);</span><br><span class=\"line\">\tinitLocaleResolver(context);</span><br><span class=\"line\">\tinitThemeResolver(context);</span><br><span class=\"line\">\t<span class=\"comment\">//初始化请求地址</span></span><br><span class=\"line\">\tinitHandlerMappings(context);</span><br><span class=\"line\">\t<span class=\"comment\">//初始化请求解析器</span></span><br><span class=\"line\">\tinitHandlerAdapters(context);</span><br><span class=\"line\">\tinitHandlerExceptionResolvers(context);</span><br><span class=\"line\">\tinitRequestToViewNameTranslator(context);</span><br><span class=\"line\">\tinitViewResolvers(context);</span><br><span class=\"line\">\tinitFlashMapManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化流程在FrameworkServlet类中流转，建立了上下文后，通过<strong>onRefresh(ApplicationContext context)</strong>方法的回调，进入到DispatcherServlet类中。</p>\n<p>以其中<strong>initHandlerMappings(context)</strong>方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。</p>\n<h3 id=\"关键代码片段\"><a href=\"#关键代码片段\" class=\"headerlink\" title=\"关键代码片段\"></a>关键代码片段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create a List of default strategy objects for the given strategy interface.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The default implementation uses the \"DispatcherServlet.properties\" file (in the same</span></span><br><span class=\"line\"><span class=\"comment\"> * package as the DispatcherServlet class) to determine the class names. It instantiates</span></span><br><span class=\"line\"><span class=\"comment\"> * the strategy objects through the context's BeanFactory.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context the current WebApplicationContext</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> strategyInterface the strategy interface</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the List of corresponding strategy objects</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">getDefaultStrategies</span><span class=\"params\">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</span><br><span class=\"line\">\tString key = strategyInterface.getName();</span><br><span class=\"line\">\tString value = defaultStrategies.getProperty(key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);</span><br><span class=\"line\">\t\tList&lt;T&gt; strategies = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;(classNames.length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : classNames) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//通过反射，得到传入参数的Class对象</span></span><br><span class=\"line\">\t\t\t\tClass&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//关键</span></span><br><span class=\"line\">\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);</span><br><span class=\"line\">\t\t\t\tstrategies.add((T) strategy);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Could not find DispatcherServlet's default strategy class [\"</span> + className +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (LinkageError err) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Error loading DispatcherServlet's default strategy class [\"</span> + className +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]: problem with class file or dependent class\"</span>, err);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strategies;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>DefaultAnnotationHandlerMapping.determineUrlsForHandler</strong>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks for presence of the &#123;<span class=\"doctag\">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * annotation on the handler class and on any of its methods.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</span><br><span class=\"line\">\tApplicationContext context = getApplicationContext();</span><br><span class=\"line\">\tClass&lt;?&gt; handlerType = context.getType(beanName);</span><br><span class=\"line\">\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mapping != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// @RequestMapping found at type level</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.cachedMappings.put(handlerType, mapping);</span><br><span class=\"line\">\t\tSet&lt;String&gt; urls = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class=\"line\">\t\tString[] typeLevelPatterns = mapping.value();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (typeLevelPatterns.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// @RequestMapping specifies paths at type level</span></span><br><span class=\"line\">\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String typeLevelPattern : typeLevelPatterns) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!typeLevelPattern.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\ttypeLevelPattern = <span class=\"string\">\"/\"</span> + typeLevelPattern;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> hasEmptyMethodLevelMappings = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String methodLevelPattern : methodLevelPatterns) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (methodLevelPattern == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\thasEmptyMethodLevelMappings = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);</span><br><span class=\"line\">\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (hasEmptyMethodLevelMappings ||</span><br><span class=\"line\">\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) &#123;</span><br><span class=\"line\">\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(urls);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// actual paths specified by @RequestMapping at method level</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (AnnotationUtils.findAnnotation(handlerType, Controller.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// @RequestMapping to be introspected at method level</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过遍历每一个类，查找<strong>RequestMapping</strong>注解，得到了所有controller层的请求Url。<br>最后讲Url和handle存入Map&lt;String, Object&gt;集合中，以备解析请求的时候快速找到controller。<br><strong>initHandlerMappings</strong>的流程大概就是以上这些。</p>\n<p>其他方法和<strong>initHandlerMappings</strong>类似，就不废话了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，<br>SpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。<br>其中：</p>\n<ul>\n<li>HttpServletBean完成的是<init-param>配置元素的依赖注入，</init-param></li>\n<li>FrameworkServlet完成的是容器上下文的建立，</li>\n<li>DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p>\n\n<p>本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。</p>\n<h2 id=\"SpringMVC配置\"><a href=\"#SpringMVC配置\" class=\"headerlink\" title=\"SpringMVC配置\"></a>SpringMVC配置</h2><ol>\n<li>指明Servlet，在配置文件web.xml中如下配置：    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- Spring MVC servlet --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></span><br><span class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath*:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>load-on-startup：表示启动容器时初始化该Servlet；<br>url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。</p>\n</blockquote>\n<ol>\n<li><p>配置SpringMVC信息 </p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.springmvc.example\"</span>/&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"</span>&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">&lt;!-- 定义跳转的文件的前后缀，视图模式配置--&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></span><br><span class=\"line\">    <span class=\"comment\">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 --&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/jsp/\"</span>/&gt;</span></span><br><span class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></span><br><span class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>\n<p> 2.1. <strong>配置扫描路径</strong><br> 2.2. <strong>启用注解功能</strong><br> 2.3. <strong>视图配置信息：前缀和后缀</strong></p>\n</li>\n</ol>\n<p>至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。</p>\n<h2 id=\"SpringMVC初始化流程图\"><a href=\"#SpringMVC初始化流程图\" class=\"headerlink\" title=\"SpringMVC初始化流程图\"></a>SpringMVC初始化流程图</h2><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"DispatcherServlet初始化流程分析\"><a href=\"#DispatcherServlet初始化流程分析\" class=\"headerlink\" title=\"DispatcherServlet初始化流程分析\"></a>DispatcherServlet初始化流程分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * This implementation calls &#123;<span class=\"doctag\">@link</span> #initStrategies&#125;.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefresh</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\tinitStrategies(context);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Initialize the strategy objects that this servlet uses.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</span><br><span class=\"line\">\tinitMultipartResolver(context);</span><br><span class=\"line\">\tinitLocaleResolver(context);</span><br><span class=\"line\">\tinitThemeResolver(context);</span><br><span class=\"line\">\t<span class=\"comment\">//初始化请求地址</span></span><br><span class=\"line\">\tinitHandlerMappings(context);</span><br><span class=\"line\">\t<span class=\"comment\">//初始化请求解析器</span></span><br><span class=\"line\">\tinitHandlerAdapters(context);</span><br><span class=\"line\">\tinitHandlerExceptionResolvers(context);</span><br><span class=\"line\">\tinitRequestToViewNameTranslator(context);</span><br><span class=\"line\">\tinitViewResolvers(context);</span><br><span class=\"line\">\tinitFlashMapManager(context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>初始化流程在FrameworkServlet类中流转，建立了上下文后，通过<strong>onRefresh(ApplicationContext context)</strong>方法的回调，进入到DispatcherServlet类中。</p>\n<p>以其中<strong>initHandlerMappings(context)</strong>方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。</p>\n<h3 id=\"关键代码片段\"><a href=\"#关键代码片段\" class=\"headerlink\" title=\"关键代码片段\"></a>关键代码片段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Create a List of default strategy objects for the given strategy interface.</span></span><br><span class=\"line\"><span class=\"comment\"> * &lt;p&gt;The default implementation uses the \"DispatcherServlet.properties\" file (in the same</span></span><br><span class=\"line\"><span class=\"comment\"> * package as the DispatcherServlet class) to determine the class names. It instantiates</span></span><br><span class=\"line\"><span class=\"comment\"> * the strategy objects through the context's BeanFactory.</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> context the current WebApplicationContext</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@param</span> strategyInterface the strategy interface</span></span><br><span class=\"line\"><span class=\"comment\"> * <span class=\"doctag\">@return</span> the List of corresponding strategy objects</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</span><br><span class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">getDefaultStrategies</span><span class=\"params\">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</span><br><span class=\"line\">\tString key = strategyInterface.getName();</span><br><span class=\"line\">\tString value = defaultStrategies.getProperty(key);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);</span><br><span class=\"line\">\t\tList&lt;T&gt; strategies = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;(classNames.length);</span><br><span class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : classNames) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//通过反射，得到传入参数的Class对象</span></span><br><span class=\"line\">\t\t\t\tClass&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</span><br><span class=\"line\">\t\t\t\t<span class=\"comment\">//关键</span></span><br><span class=\"line\">\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);</span><br><span class=\"line\">\t\t\t\tstrategies.add((T) strategy);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Could not find DispatcherServlet's default strategy class [\"</span> + className +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]\"</span>, ex);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (LinkageError err) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</span><br><span class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Error loading DispatcherServlet's default strategy class [\"</span> + className +</span><br><span class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]: problem with class file or dependent class\"</span>, err);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> strategies;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p><strong>DefaultAnnotationHandlerMapping.determineUrlsForHandler</strong>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">/**</span></span><br><span class=\"line\"><span class=\"comment\"> * Checks for presence of the &#123;<span class=\"doctag\">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125;</span></span><br><span class=\"line\"><span class=\"comment\"> * annotation on the handler class and on any of its methods.</span></span><br><span class=\"line\"><span class=\"comment\"> */</span></span><br><span class=\"line\"><span class=\"meta\">@Override</span></span><br><span class=\"line\"><span class=\"keyword\">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</span><br><span class=\"line\">\tApplicationContext context = getApplicationContext();</span><br><span class=\"line\">\tClass&lt;?&gt; handlerType = context.getType(beanName);</span><br><span class=\"line\">\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);</span><br><span class=\"line\">\t<span class=\"keyword\">if</span> (mapping != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// @RequestMapping found at type level</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">this</span>.cachedMappings.put(handlerType, mapping);</span><br><span class=\"line\">\t\tSet&lt;String&gt; urls = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;();</span><br><span class=\"line\">\t\tString[] typeLevelPatterns = mapping.value();</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (typeLevelPatterns.length &gt; <span class=\"number\">0</span>) &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// @RequestMapping specifies paths at type level</span></span><br><span class=\"line\">\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">true</span>);</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String typeLevelPattern : typeLevelPatterns) &#123;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!typeLevelPattern.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</span><br><span class=\"line\">\t\t\t\t\ttypeLevelPattern = <span class=\"string\">\"/\"</span> + typeLevelPattern;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> hasEmptyMethodLevelMappings = <span class=\"keyword\">false</span>;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String methodLevelPattern : methodLevelPatterns) &#123;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (methodLevelPattern == <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t\t\t\t\thasEmptyMethodLevelMappings = <span class=\"keyword\">true</span>;</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);</span><br><span class=\"line\">\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);</span><br><span class=\"line\">\t\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (hasEmptyMethodLevelMappings ||</span><br><span class=\"line\">\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) &#123;</span><br><span class=\"line\">\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(urls);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t\t<span class=\"comment\">// actual paths specified by @RequestMapping at method level</span></span><br><span class=\"line\">\t\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (AnnotationUtils.findAnnotation(handlerType, Controller.class) != <span class=\"keyword\">null</span>) &#123;</span><br><span class=\"line\">\t\t<span class=\"comment\">// @RequestMapping to be introspected at method level</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t<span class=\"keyword\">else</span> &#123;</span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>通过遍历每一个类，查找<strong>RequestMapping</strong>注解，得到了所有controller层的请求Url。<br>最后讲Url和handle存入Map&lt;String, Object&gt;集合中，以备解析请求的时候快速找到controller。<br><strong>initHandlerMappings</strong>的流程大概就是以上这些。</p>\n<p>其他方法和<strong>initHandlerMappings</strong>类似，就不废话了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，<br>SpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。<br>其中：</p>\n<ul>\n<li>HttpServletBean完成的是<init-param>配置元素的依赖注入，</init-param></li>\n<li>FrameworkServlet完成的是容器上下文的建立，</li>\n<li>DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。</li>\n</ul>\n"},{"title":"Resilio Sync共享工具","date":"2017-02-06T06:15:02.000Z","_content":"\n当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。\n\n不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：\n\n* 对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；\n* 容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；\n* 影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；\n* 安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。\n\n[**Resilio Sync**](https://www.resilio.com)，原名：BitTorrent Sync，\n采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。\n\n资源网站：[http://wherebt.com/](http://wherebt.com/)\n\n# 使用介绍\n\n## 共享文件\n1. 添加分享文件夹\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2)\n  **分享文件夹有三种**：\n  * 标准文件夹\n  * 高级文件夹\n  * 加密文件夹\n\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n\n> 经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。\n\n2. 设置共享文件夹属性\n * 普通文件夹属性：\n\n      + 链接分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6)\n      + 二维码分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp)\n * 加密文件夹属性：\n    ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy)\n\n## 下载文件\n1. 点击“输入秘钥或链接”\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n2. 输入相应秘钥或链接\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi)\n\n\n​\t\n","source":"_posts/Utils/sync.md","raw":"---\ntitle: Resilio Sync共享工具\ndate: 2017-02-06 14:15:02\ntags: [工具]\n---\n\n当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。\n\n不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：\n\n* 对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；\n* 容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；\n* 影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；\n* 安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。\n\n[**Resilio Sync**](https://www.resilio.com)，原名：BitTorrent Sync，\n采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。\n\n资源网站：[http://wherebt.com/](http://wherebt.com/)\n\n# 使用介绍\n\n## 共享文件\n1. 添加分享文件夹\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2)\n  **分享文件夹有三种**：\n  * 标准文件夹\n  * 高级文件夹\n  * 加密文件夹\n\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n\n> 经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。\n\n2. 设置共享文件夹属性\n * 普通文件夹属性：\n\n      + 链接分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6)\n      + 二维码分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp)\n * 加密文件夹属性：\n    ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy)\n\n## 下载文件\n1. 点击“输入秘钥或链接”\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n2. 输入相应秘钥或链接\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi)\n\n\n​\t\n","slug":"Utils/sync","published":1,"updated":"2018-03-10T14:50:11.767Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k36000xhkwczuv8mvuo","content":"<p>当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。</p>\n<p>不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：</p>\n<ul>\n<li>对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；</li>\n<li>容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；</li>\n<li>影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；</li>\n<li>安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。</li>\n</ul>\n<p><a href=\"https://www.resilio.com\" target=\"_blank\" rel=\"noopener\"><strong>Resilio Sync</strong></a>，原名：BitTorrent Sync，<br>采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。</p>\n<p>资源网站：<a href=\"http://wherebt.com/\" target=\"_blank\" rel=\"noopener\">http://wherebt.com/</a></p>\n<h1 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h1><h2 id=\"共享文件\"><a href=\"#共享文件\" class=\"headerlink\" title=\"共享文件\"></a>共享文件</h2><ol>\n<li><p>添加分享文件夹<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2\" alt=\"\"><br><strong>分享文件夹有三种</strong>：</p>\n<ul>\n<li>标准文件夹</li>\n<li>高级文件夹</li>\n<li>加密文件夹</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p>经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。</p>\n</blockquote>\n<ol>\n<li><p>设置共享文件夹属性</p>\n<ul>\n<li><p>普通文件夹属性：</p>\n<ul>\n<li>链接分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6\" alt=\"\"></li>\n<li>二维码分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp\" alt=\"\"></li>\n</ul>\n</li>\n<li>加密文件夹属性：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h2><ol>\n<li>点击“输入秘钥或链接”<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></li>\n<li>输入相应秘钥或链接<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi\" alt=\"\"></li>\n</ol>\n<p>​    </p>\n","site":{"data":{}},"excerpt":"","more":"<p>当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。</p>\n<p>不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：</p>\n<ul>\n<li>对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；</li>\n<li>容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；</li>\n<li>影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；</li>\n<li>安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。</li>\n</ul>\n<p><a href=\"https://www.resilio.com\" target=\"_blank\" rel=\"noopener\"><strong>Resilio Sync</strong></a>，原名：BitTorrent Sync，<br>采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。</p>\n<p>资源网站：<a href=\"http://wherebt.com/\" target=\"_blank\" rel=\"noopener\">http://wherebt.com/</a></p>\n<h1 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h1><h2 id=\"共享文件\"><a href=\"#共享文件\" class=\"headerlink\" title=\"共享文件\"></a>共享文件</h2><ol>\n<li><p>添加分享文件夹<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2\" alt=\"\"><br><strong>分享文件夹有三种</strong>：</p>\n<ul>\n<li>标准文件夹</li>\n<li>高级文件夹</li>\n<li>加密文件夹</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p>经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。</p>\n</blockquote>\n<ol>\n<li><p>设置共享文件夹属性</p>\n<ul>\n<li><p>普通文件夹属性：</p>\n<ul>\n<li>链接分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6\" alt=\"\"></li>\n<li>二维码分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp\" alt=\"\"></li>\n</ul>\n</li>\n<li>加密文件夹属性：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h2><ol>\n<li>点击“输入秘钥或链接”<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></li>\n<li>输入相应秘钥或链接<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi\" alt=\"\"></li>\n</ol>\n<p>​    </p>\n"},{"title":"Kafka安装","date":"2017-07-10T07:14:52.000Z","_content":"<p  align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheu4yvaqvj20r308374g.jpg)\n</p>\n## 下载\n```\nwget http://mirror.bit.edu.cn/apache/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgz\n```\n\n## 解压\n```\ntar zxvf kafka_2.11-0.11.0.0.tgz -C /usr/local/\n```\n\n## 配置Zookeeper\n```\nvim config/server.properties\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheu8w245kj20ep03nq2w.jpg)\n\n## 启动服务\n```\nbin/kafka-server-start.sh config/server.properties\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheualpfihj210h04wdgh.jpg)\n\n## 后台启动\n```\nbin/kafka-server-start.sh config/server.properties 1>/dev/null 2>&1 &\n```\n\n## 创建Topic\n```\nbin/kafka-topics.sh --create --zookeeper localhost:3001 --replication-factor 1 --partitions 1 --topic \n```\n\n可以通过**list**命令查看创建的topic：\n```\nbin/kafka-topics.sh --list --zookeeper localhost:3001\n```\n除了手动创建topic，还可以配置broker让它自动创建topic。\n\n## 发送消息\n运行producer并在控制台中输一些消息，这些消息将被发送到服务端：\n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test\n```\n\n## 接收消息\nKafka也有一个命令行consumer可以读取消息并输出到标准输出：\n```\nbin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n```","source":"_posts/kafka/install.md","raw":"---\ntitle: Kafka安装\ndate: 2017-07-10 15:14:52\ntags: [kafka]\ncategories: [kafka]\n---\n<p  align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheu4yvaqvj20r308374g.jpg)\n</p>\n## 下载\n```\nwget http://mirror.bit.edu.cn/apache/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgz\n```\n\n## 解压\n```\ntar zxvf kafka_2.11-0.11.0.0.tgz -C /usr/local/\n```\n\n## 配置Zookeeper\n```\nvim config/server.properties\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheu8w245kj20ep03nq2w.jpg)\n\n## 启动服务\n```\nbin/kafka-server-start.sh config/server.properties\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheualpfihj210h04wdgh.jpg)\n\n## 后台启动\n```\nbin/kafka-server-start.sh config/server.properties 1>/dev/null 2>&1 &\n```\n\n## 创建Topic\n```\nbin/kafka-topics.sh --create --zookeeper localhost:3001 --replication-factor 1 --partitions 1 --topic \n```\n\n可以通过**list**命令查看创建的topic：\n```\nbin/kafka-topics.sh --list --zookeeper localhost:3001\n```\n除了手动创建topic，还可以配置broker让它自动创建topic。\n\n## 发送消息\n运行producer并在控制台中输一些消息，这些消息将被发送到服务端：\n```\nbin/kafka-console-producer.sh --broker-list localhost:9092 --topic test\n```\n\n## 接收消息\nKafka也有一个命令行consumer可以读取消息并输出到标准输出：\n```\nbin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning\n```","slug":"kafka/install","published":1,"updated":"2018-03-10T14:50:11.768Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k380010hkwc6oksg2ck","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheu4yvaqvj20r308374g.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.bit.edu.cn/apache/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgz</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf kafka_2.11-0.11.0.0.tgz -C /usr/local/</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Zookeeper\"><a href=\"#配置Zookeeper\" class=\"headerlink\" title=\"配置Zookeeper\"></a>配置Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config/server.properties</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheu8w245kj20ep03nq2w.jpg\" alt=\"\"></p>\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheualpfihj210h04wdgh.jpg\" alt=\"\"></p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建Topic\"><a href=\"#创建Topic\" class=\"headerlink\" title=\"创建Topic\"></a>创建Topic</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:3001 --replication-factor 1 --partitions 1 --topic</span><br></pre></td></tr></table></figure>\n<p>可以通过<strong>list</strong>命令查看创建的topic：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:3001</span><br></pre></td></tr></table></figure></p>\n<p>除了手动创建topic，还可以配置broker让它自动创建topic。</p>\n<h2 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h2><p>运行producer并在控制台中输一些消息，这些消息将被发送到服务端：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接收消息\"><a href=\"#接收消息\" class=\"headerlink\" title=\"接收消息\"></a>接收消息</h2><p>Kafka也有一个命令行consumer可以读取消息并输出到标准输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure></p>\n","site":{"data":{}},"excerpt":"","more":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheu4yvaqvj20r308374g.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.bit.edu.cn/apache/kafka/0.11.0.0/kafka_2.11-0.11.0.0.tgz</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf kafka_2.11-0.11.0.0.tgz -C /usr/local/</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置Zookeeper\"><a href=\"#配置Zookeeper\" class=\"headerlink\" title=\"配置Zookeeper\"></a>配置Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">vim config/server.properties</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheu8w245kj20ep03nq2w.jpg\" alt=\"\"></p>\n<h2 id=\"启动服务\"><a href=\"#启动服务\" class=\"headerlink\" title=\"启动服务\"></a>启动服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server.properties</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheualpfihj210h04wdgh.jpg\" alt=\"\"></p>\n<h2 id=\"后台启动\"><a href=\"#后台启动\" class=\"headerlink\" title=\"后台启动\"></a>后台启动</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-server-start.sh config/server.properties 1&gt;/dev/null 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure>\n<h2 id=\"创建Topic\"><a href=\"#创建Topic\" class=\"headerlink\" title=\"创建Topic\"></a>创建Topic</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --create --zookeeper localhost:3001 --replication-factor 1 --partitions 1 --topic</span><br></pre></td></tr></table></figure>\n<p>可以通过<strong>list</strong>命令查看创建的topic：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-topics.sh --list --zookeeper localhost:3001</span><br></pre></td></tr></table></figure></p>\n<p>除了手动创建topic，还可以配置broker让它自动创建topic。</p>\n<h2 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h2><p>运行producer并在控制台中输一些消息，这些消息将被发送到服务端：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-producer.sh --broker-list localhost:9092 --topic test</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"接收消息\"><a href=\"#接收消息\" class=\"headerlink\" title=\"接收消息\"></a>接收消息</h2><p>Kafka也有一个命令行consumer可以读取消息并输出到标准输出：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/kafka-console-consumer.sh --zookeeper localhost:2181 --topic test --from-beginning</span><br></pre></td></tr></table></figure></p>\n"},{"title":"CentOS7安装Memcached","date":"2017-06-02T03:02:56.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fgmvdrwp23j20lt041wf8.jpg)\n</p>\n\n1. #查找Memcached\n```\nyum search memcached\n```\n2. #安装Memcached\n```\nyum -y install memcached\n```\n3. #验证安装\n```\nmemcached -h\n```\n4. #查看配置文件\n```\ncat /etc/sysconfig/memcached\n```\n可以根据情况修改相关配置参数：\n```\nPORT=\"11211\"\nUSER=\"memcached\"\nMAXCONN=\"1024\"\nCACHESIZE=\"64\"\nOPTIONS=\"\"\n```\n5. #memcached命令\n    1. 启动命令\n    ```\n    systemctl start memcache\n    ```\n    2. 停止命令\n    ```\n    systemctl stop memcache\n    ```\n    3. 查看状态命令\n    ```\n    systemctl status memcache\n    ```\n    4. 开机自动启动命令\n    ```\n    systemctl enable memcached.service\n    ```\n\n","source":"_posts/memcache/memcached.md","raw":"---\ntitle: CentOS7安装Memcached\ndate: 2017-06-02 11:02:56\ntags: [Memcache]\ncategories: [内存数据库]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fgmvdrwp23j20lt041wf8.jpg)\n</p>\n\n1. #查找Memcached\n```\nyum search memcached\n```\n2. #安装Memcached\n```\nyum -y install memcached\n```\n3. #验证安装\n```\nmemcached -h\n```\n4. #查看配置文件\n```\ncat /etc/sysconfig/memcached\n```\n可以根据情况修改相关配置参数：\n```\nPORT=\"11211\"\nUSER=\"memcached\"\nMAXCONN=\"1024\"\nCACHESIZE=\"64\"\nOPTIONS=\"\"\n```\n5. #memcached命令\n    1. 启动命令\n    ```\n    systemctl start memcache\n    ```\n    2. 停止命令\n    ```\n    systemctl stop memcache\n    ```\n    3. 查看状态命令\n    ```\n    systemctl status memcache\n    ```\n    4. 开机自动启动命令\n    ```\n    systemctl enable memcached.service\n    ```\n\n","slug":"memcache/memcached","published":1,"updated":"2018-03-10T14:50:11.769Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k390014hkwcq1z84q2r","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fgmvdrwp23j20lt041wf8.jpg\" alt=\"\"><br></p>\n\n<ol>\n<li><p>#查找Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#安装Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#验证安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memcached -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#查看配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/sysconfig/memcached</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以根据情况修改相关配置参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORT=&quot;11211&quot;</span><br><span class=\"line\">USER=&quot;memcached&quot;</span><br><span class=\"line\">MAXCONN=&quot;1024&quot;</span><br><span class=\"line\">CACHESIZE=&quot;64&quot;</span><br><span class=\"line\">OPTIONS=&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>#memcached命令</p>\n<ol>\n<li><p>启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start memcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop memcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看状态命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status memcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开机自动启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable memcached.service</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fgmvdrwp23j20lt041wf8.jpg\" alt=\"\"><br></p>\n\n<ol>\n<li><p>#查找Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum search memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#安装Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">yum -y install memcached</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#验证安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">memcached -h</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>#查看配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cat /etc/sysconfig/memcached</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以根据情况修改相关配置参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">PORT=&quot;11211&quot;</span><br><span class=\"line\">USER=&quot;memcached&quot;</span><br><span class=\"line\">MAXCONN=&quot;1024&quot;</span><br><span class=\"line\">CACHESIZE=&quot;64&quot;</span><br><span class=\"line\">OPTIONS=&quot;&quot;</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li><p>#memcached命令</p>\n<ol>\n<li><p>启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl start memcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>停止命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl stop memcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看状态命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl status memcache</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>开机自动启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">systemctl enable memcached.service</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"Zookeeper配置优化","date":"2017-07-10T06:44:19.000Z","_content":"<p align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg)\n</p>\n\n# 配置文件属性说明\n1. tickTime：Client-Server通信心跳时间\n\tZookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。tickTime以毫秒为单位。\n\t```\n\ttickTime=2000\n\t```\n2. initLimit：Leader-Follower初始通信时限\n\t集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。\n\t```\n\tinitLimit=5\n\t```\n3. syncLimit：Leader-Follower同步通信时限\n\t集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。\n\t```\n\tsyncLimit=2 \n\t```\n4. dataDir：数据文件目录\n\tZookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。\n\t```\n\tdataDir=/opt/zookeeper/data\n\t```\n5. clientPort：客户端连接端口\n\t客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。\n\t```\n\tclientPort=2181\n\t```\n6. 服务器名称与地址：集群信息（服务器编号，服务器地址，LF通信端口，选举端口）\n这个配置项的书写格式比较特殊，规则如下：\n\t```\n\tserver.N=YYY:A:B\n\tserver.1=itcast05:2888:3888\n\tserver.2=itcast06:2888:3888\n\tserver.3=itcast07:2888:3888\n\t```\n7. ZK为什么设置为奇数个？\n\t\n\tzookeeper有这样一个特性：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。\n\t\n\t也就是说如果有2个zookeeper，那么只要有1个死了zookeeper就不能用了，因为1没有过半，所以2个zookeeper的死亡容忍度为0；\n\t\n\t同理，要是有3个zookeeper，一个死了，还剩下2个正常的，过半了，所以3个zookeeper的容忍度为1；\n\t\n\t同理你多列举几个：2 -> 0; 3 -> 1; 4 - >1; 5 -> 2; 6 -> 2会发现一个规律，2n和2n-1的容忍度是一样的，都是n-1，\n\t\n\t所以为了更加高效，何必增加那一个不必要的zookeeper呢。\n\n# 优化操作说明\n1. 默认jvm没有配置Xmx、Xms等信息，可以在conf目录下创建java.env文件\n```\nexport JVMFLAGS=\"-Xms512m -Xmx512m   $JVMFLAGS\"\n```\n2. log4j配置，由于zk是通过nohup启动的，会有一个zookeeper.out日志文件，该文件中记录的是输出到console的日志。\nlog4j中只要配置输出到console即可，zookeeper.out日积月累会不断变大，要放在容量大的磁盘上。\n\t```\n\tzookeeper.root.logger=INFO, CONSOLE\n\tzookeeper.console.threshold=INFO\n\tlog4j.rootLogger=${zookeeper.root.logger}\n\t \n\tlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n\tlog4j.appender.CONSOLE.Threshold=${zookeeper.console.threshold}\n\tlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n\tlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n\n\t```\n\n3. zoo.cfg文件中，dataDir是存放快照数据的，dataLogDir是存放写前日志的。\n这两个目录不要配置成一个路径，要配置到不同的磁盘上。\n如果磁盘是使用了raid，系统就一块磁盘，那配置到一块磁盘上也可以。\n写前日志的部分对写请求的性能影响很大，保证dataLogDir所在磁盘性能良好。\n\n4. zoo.cfg文件中skipACL=yes，忽略ACL验证，可以减少权限验证的相关操作，提升一点性能。\n\n5. zoo.cfg文件中forceSync=no，这个对写请求的性能提升很有帮助，是指每次写请求的数据都要从pagecache中固化到磁盘上，才算是写成功返回。\n当写请求数量到达一定程度的时候，后续写请求会等待前面写请求的forceSync操作，造成一定延时。\n如果追求低延时的写请求，配置forceSync=no，数据写到pagecache后就返回。但是机器断电的时候，pagecache中的数据有可能丢失。\n\n6. zk的dataDir和dataLogDir路径下，如果没有配置zk自动清理，会不断的新增数据文件。可配置成zk系统自动清理数据文件，但是最求系统最高性能的话，建议人工手动清理文件：\n\t```\n\tzkCleanup.sh -n 3  #这样保留三份文件。\n\t```\n7. 查看zk节点状态。重新启动zk节点前后，一定要查看状态\n\t```\n\techo ruok | nc host port\n\techo stat | nc host port\n\t```\n8. 配置fsync.warningthresholdms=20，单位是毫秒，在forceSync=yes的时候，如果数据固化到磁盘的操作fsync超过20ms的时候，将会在zookeeper.out中输出一条warn日志。\n这个目前zk的3.4.5和3.5版本有bug，在zoo.cfg中配置不生效。我的做法是在conf/java.env中添加java系统属性：\n\t```\n\texport JVMFLAGS=\"-Dfsync.warningthresholdms=20 $JVMFLAGS\"\n\t```","source":"_posts/zookeeper/optimum.md","raw":"---\ntitle: Zookeeper配置优化\ndate: 2017-07-10 14:44:19\ntags: [zookeeper]\ncategories: [zookeeper]\n---\n<p align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg)\n</p>\n\n# 配置文件属性说明\n1. tickTime：Client-Server通信心跳时间\n\tZookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。tickTime以毫秒为单位。\n\t```\n\ttickTime=2000\n\t```\n2. initLimit：Leader-Follower初始通信时限\n\t集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。\n\t```\n\tinitLimit=5\n\t```\n3. syncLimit：Leader-Follower同步通信时限\n\t集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。\n\t```\n\tsyncLimit=2 \n\t```\n4. dataDir：数据文件目录\n\tZookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。\n\t```\n\tdataDir=/opt/zookeeper/data\n\t```\n5. clientPort：客户端连接端口\n\t客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。\n\t```\n\tclientPort=2181\n\t```\n6. 服务器名称与地址：集群信息（服务器编号，服务器地址，LF通信端口，选举端口）\n这个配置项的书写格式比较特殊，规则如下：\n\t```\n\tserver.N=YYY:A:B\n\tserver.1=itcast05:2888:3888\n\tserver.2=itcast06:2888:3888\n\tserver.3=itcast07:2888:3888\n\t```\n7. ZK为什么设置为奇数个？\n\t\n\tzookeeper有这样一个特性：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。\n\t\n\t也就是说如果有2个zookeeper，那么只要有1个死了zookeeper就不能用了，因为1没有过半，所以2个zookeeper的死亡容忍度为0；\n\t\n\t同理，要是有3个zookeeper，一个死了，还剩下2个正常的，过半了，所以3个zookeeper的容忍度为1；\n\t\n\t同理你多列举几个：2 -> 0; 3 -> 1; 4 - >1; 5 -> 2; 6 -> 2会发现一个规律，2n和2n-1的容忍度是一样的，都是n-1，\n\t\n\t所以为了更加高效，何必增加那一个不必要的zookeeper呢。\n\n# 优化操作说明\n1. 默认jvm没有配置Xmx、Xms等信息，可以在conf目录下创建java.env文件\n```\nexport JVMFLAGS=\"-Xms512m -Xmx512m   $JVMFLAGS\"\n```\n2. log4j配置，由于zk是通过nohup启动的，会有一个zookeeper.out日志文件，该文件中记录的是输出到console的日志。\nlog4j中只要配置输出到console即可，zookeeper.out日积月累会不断变大，要放在容量大的磁盘上。\n\t```\n\tzookeeper.root.logger=INFO, CONSOLE\n\tzookeeper.console.threshold=INFO\n\tlog4j.rootLogger=${zookeeper.root.logger}\n\t \n\tlog4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender\n\tlog4j.appender.CONSOLE.Threshold=${zookeeper.console.threshold}\n\tlog4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout\n\tlog4j.appender.CONSOLE.layout.ConversionPattern=%d{ISO8601} [myid:%X{myid}] - %-5p [%t:%C{1}@%L] - %m%n\n\t```\n\n3. zoo.cfg文件中，dataDir是存放快照数据的，dataLogDir是存放写前日志的。\n这两个目录不要配置成一个路径，要配置到不同的磁盘上。\n如果磁盘是使用了raid，系统就一块磁盘，那配置到一块磁盘上也可以。\n写前日志的部分对写请求的性能影响很大，保证dataLogDir所在磁盘性能良好。\n\n4. zoo.cfg文件中skipACL=yes，忽略ACL验证，可以减少权限验证的相关操作，提升一点性能。\n\n5. zoo.cfg文件中forceSync=no，这个对写请求的性能提升很有帮助，是指每次写请求的数据都要从pagecache中固化到磁盘上，才算是写成功返回。\n当写请求数量到达一定程度的时候，后续写请求会等待前面写请求的forceSync操作，造成一定延时。\n如果追求低延时的写请求，配置forceSync=no，数据写到pagecache后就返回。但是机器断电的时候，pagecache中的数据有可能丢失。\n\n6. zk的dataDir和dataLogDir路径下，如果没有配置zk自动清理，会不断的新增数据文件。可配置成zk系统自动清理数据文件，但是最求系统最高性能的话，建议人工手动清理文件：\n\t```\n\tzkCleanup.sh -n 3  #这样保留三份文件。\n\t```\n7. 查看zk节点状态。重新启动zk节点前后，一定要查看状态\n\t```\n\techo ruok | nc host port\n\techo stat | nc host port\n\t```\n8. 配置fsync.warningthresholdms=20，单位是毫秒，在forceSync=yes的时候，如果数据固化到磁盘的操作fsync超过20ms的时候，将会在zookeeper.out中输出一条warn日志。\n这个目前zk的3.4.5和3.5版本有bug，在zoo.cfg中配置不生效。我的做法是在conf/java.env中添加java系统属性：\n\t```\n\texport JVMFLAGS=\"-Dfsync.warningthresholdms=20 $JVMFLAGS\"\n\t```","slug":"zookeeper/optimum","published":1,"updated":"2018-03-10T14:50:11.772Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k3b0017hkwcbpe85nm6","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg\" alt=\"\"><br></p>\n\n<h1 id=\"配置文件属性说明\"><a href=\"#配置文件属性说明\" class=\"headerlink\" title=\"配置文件属性说明\"></a>配置文件属性说明</h1><ol>\n<li><p>tickTime：Client-Server通信心跳时间<br> Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。tickTime以毫秒为单位。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime=2000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>initLimit：Leader-Follower初始通信时限<br> 集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLimit=5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>syncLimit：Leader-Follower同步通信时限<br> 集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syncLimit=2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dataDir：数据文件目录<br> Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataDir=/opt/zookeeper/data</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>clientPort：客户端连接端口<br> 客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clientPort=2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务器名称与地址：集群信息（服务器编号，服务器地址，LF通信端口，选举端口）<br>这个配置项的书写格式比较特殊，规则如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.N=YYY:A:B</span><br><span class=\"line\">server.1=itcast05:2888:3888</span><br><span class=\"line\">server.2=itcast06:2888:3888</span><br><span class=\"line\">server.3=itcast07:2888:3888</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ZK为什么设置为奇数个？</p>\n<p> zookeeper有这样一个特性：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。</p>\n<p> 也就是说如果有2个zookeeper，那么只要有1个死了zookeeper就不能用了，因为1没有过半，所以2个zookeeper的死亡容忍度为0；</p>\n<p> 同理，要是有3个zookeeper，一个死了，还剩下2个正常的，过半了，所以3个zookeeper的容忍度为1；</p>\n<p> 同理你多列举几个：2 -&gt; 0; 3 -&gt; 1; 4 - &gt;1; 5 -&gt; 2; 6 -&gt; 2会发现一个规律，2n和2n-1的容忍度是一样的，都是n-1，</p>\n<p> 所以为了更加高效，何必增加那一个不必要的zookeeper呢。</p>\n</li>\n</ol>\n<h1 id=\"优化操作说明\"><a href=\"#优化操作说明\" class=\"headerlink\" title=\"优化操作说明\"></a>优化操作说明</h1><ol>\n<li><p>默认jvm没有配置Xmx、Xms等信息，可以在conf目录下创建java.env文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JVMFLAGS=&quot;-Xms512m -Xmx512m   $JVMFLAGS&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>log4j配置，由于zk是通过nohup启动的，会有一个zookeeper.out日志文件，该文件中记录的是输出到console的日志。<br>log4j中只要配置输出到console即可，zookeeper.out日积月累会不断变大，要放在容量大的磁盘上。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.root.logger=INFO, CONSOLE</span><br><span class=\"line\">zookeeper.console.threshold=INFO</span><br><span class=\"line\">log4j.rootLogger=$&#123;zookeeper.root.logger&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.CONSOLE.Threshold=$&#123;zookeeper.console.threshold&#125;</span><br><span class=\"line\">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zoo.cfg文件中，dataDir是存放快照数据的，dataLogDir是存放写前日志的。<br>这两个目录不要配置成一个路径，要配置到不同的磁盘上。<br>如果磁盘是使用了raid，系统就一块磁盘，那配置到一块磁盘上也可以。<br>写前日志的部分对写请求的性能影响很大，保证dataLogDir所在磁盘性能良好。</p>\n</li>\n<li><p>zoo.cfg文件中skipACL=yes，忽略ACL验证，可以减少权限验证的相关操作，提升一点性能。</p>\n</li>\n<li><p>zoo.cfg文件中forceSync=no，这个对写请求的性能提升很有帮助，是指每次写请求的数据都要从pagecache中固化到磁盘上，才算是写成功返回。<br>当写请求数量到达一定程度的时候，后续写请求会等待前面写请求的forceSync操作，造成一定延时。<br>如果追求低延时的写请求，配置forceSync=no，数据写到pagecache后就返回。但是机器断电的时候，pagecache中的数据有可能丢失。</p>\n</li>\n<li><p>zk的dataDir和dataLogDir路径下，如果没有配置zk自动清理，会不断的新增数据文件。可配置成zk系统自动清理数据文件，但是最求系统最高性能的话，建议人工手动清理文件：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zkCleanup.sh -n 3  #这样保留三份文件。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看zk节点状态。重新启动zk节点前后，一定要查看状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo ruok | nc host port</span><br><span class=\"line\">echo stat | nc host port</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置fsync.warningthresholdms=20，单位是毫秒，在forceSync=yes的时候，如果数据固化到磁盘的操作fsync超过20ms的时候，将会在zookeeper.out中输出一条warn日志。<br>这个目前zk的3.4.5和3.5版本有bug，在zoo.cfg中配置不生效。我的做法是在conf/java.env中添加java系统属性：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JVMFLAGS=&quot;-Dfsync.warningthresholdms=20 $JVMFLAGS&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg\" alt=\"\"><br></p>\n\n<h1 id=\"配置文件属性说明\"><a href=\"#配置文件属性说明\" class=\"headerlink\" title=\"配置文件属性说明\"></a>配置文件属性说明</h1><ol>\n<li><p>tickTime：Client-Server通信心跳时间<br> Zookeeper 服务器之间或客户端与服务器之间维持心跳的时间间隔，也就是每个 tickTime 时间就会发送一个心跳。tickTime以毫秒为单位。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tickTime=2000</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>initLimit：Leader-Follower初始通信时限<br> 集群中的follower服务器(F)与leader服务器(L)之间初始连接时能容忍的最多心跳数（tickTime的数量）。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initLimit=5</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>syncLimit：Leader-Follower同步通信时限<br> 集群中的follower服务器与leader服务器之间请求和应答之间能容忍的最多心跳数（tickTime的数量）。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">syncLimit=2</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>dataDir：数据文件目录<br> Zookeeper保存数据的目录，默认情况下，Zookeeper将写数据的日志文件也保存在这个目录里。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">dataDir=/opt/zookeeper/data</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>clientPort：客户端连接端口<br> 客户端连接 Zookeeper 服务器的端口，Zookeeper 会监听这个端口，接受客户端的访问请求。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clientPort=2181</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>服务器名称与地址：集群信息（服务器编号，服务器地址，LF通信端口，选举端口）<br>这个配置项的书写格式比较特殊，规则如下：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">server.N=YYY:A:B</span><br><span class=\"line\">server.1=itcast05:2888:3888</span><br><span class=\"line\">server.2=itcast06:2888:3888</span><br><span class=\"line\">server.3=itcast07:2888:3888</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ZK为什么设置为奇数个？</p>\n<p> zookeeper有这样一个特性：集群中只要有过半的机器是正常工作的，那么整个集群对外就是可用的。</p>\n<p> 也就是说如果有2个zookeeper，那么只要有1个死了zookeeper就不能用了，因为1没有过半，所以2个zookeeper的死亡容忍度为0；</p>\n<p> 同理，要是有3个zookeeper，一个死了，还剩下2个正常的，过半了，所以3个zookeeper的容忍度为1；</p>\n<p> 同理你多列举几个：2 -&gt; 0; 3 -&gt; 1; 4 - &gt;1; 5 -&gt; 2; 6 -&gt; 2会发现一个规律，2n和2n-1的容忍度是一样的，都是n-1，</p>\n<p> 所以为了更加高效，何必增加那一个不必要的zookeeper呢。</p>\n</li>\n</ol>\n<h1 id=\"优化操作说明\"><a href=\"#优化操作说明\" class=\"headerlink\" title=\"优化操作说明\"></a>优化操作说明</h1><ol>\n<li><p>默认jvm没有配置Xmx、Xms等信息，可以在conf目录下创建java.env文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JVMFLAGS=&quot;-Xms512m -Xmx512m   $JVMFLAGS&quot;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>log4j配置，由于zk是通过nohup启动的，会有一个zookeeper.out日志文件，该文件中记录的是输出到console的日志。<br>log4j中只要配置输出到console即可，zookeeper.out日积月累会不断变大，要放在容量大的磁盘上。</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zookeeper.root.logger=INFO, CONSOLE</span><br><span class=\"line\">zookeeper.console.threshold=INFO</span><br><span class=\"line\">log4j.rootLogger=$&#123;zookeeper.root.logger&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">log4j.appender.CONSOLE=org.apache.log4j.ConsoleAppender</span><br><span class=\"line\">log4j.appender.CONSOLE.Threshold=$&#123;zookeeper.console.threshold&#125;</span><br><span class=\"line\">log4j.appender.CONSOLE.layout=org.apache.log4j.PatternLayout</span><br><span class=\"line\">log4j.appender.CONSOLE.layout.ConversionPattern=%d&#123;ISO8601&#125; [myid:%X&#123;myid&#125;] - %-5p [%t:%C&#123;1&#125;@%L] - %m%n</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>zoo.cfg文件中，dataDir是存放快照数据的，dataLogDir是存放写前日志的。<br>这两个目录不要配置成一个路径，要配置到不同的磁盘上。<br>如果磁盘是使用了raid，系统就一块磁盘，那配置到一块磁盘上也可以。<br>写前日志的部分对写请求的性能影响很大，保证dataLogDir所在磁盘性能良好。</p>\n</li>\n<li><p>zoo.cfg文件中skipACL=yes，忽略ACL验证，可以减少权限验证的相关操作，提升一点性能。</p>\n</li>\n<li><p>zoo.cfg文件中forceSync=no，这个对写请求的性能提升很有帮助，是指每次写请求的数据都要从pagecache中固化到磁盘上，才算是写成功返回。<br>当写请求数量到达一定程度的时候，后续写请求会等待前面写请求的forceSync操作，造成一定延时。<br>如果追求低延时的写请求，配置forceSync=no，数据写到pagecache后就返回。但是机器断电的时候，pagecache中的数据有可能丢失。</p>\n</li>\n<li><p>zk的dataDir和dataLogDir路径下，如果没有配置zk自动清理，会不断的新增数据文件。可配置成zk系统自动清理数据文件，但是最求系统最高性能的话，建议人工手动清理文件：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">zkCleanup.sh -n 3  #这样保留三份文件。</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>查看zk节点状态。重新启动zk节点前后，一定要查看状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo ruok | nc host port</span><br><span class=\"line\">echo stat | nc host port</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>配置fsync.warningthresholdms=20，单位是毫秒，在forceSync=yes的时候，如果数据固化到磁盘的操作fsync超过20ms的时候，将会在zookeeper.out中输出一条warn日志。<br>这个目前zk的3.4.5和3.5版本有bug，在zoo.cfg中配置不生效。我的做法是在conf/java.env中添加java系统属性：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export JVMFLAGS=&quot;-Dfsync.warningthresholdms=20 $JVMFLAGS&quot;</span><br></pre></td></tr></table></figure></li>\n</ol>\n"},{"title":"Zookeeper集群","date":"2017-07-10T06:44:19.000Z","_content":"<p align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg)\n</p>\n\nZookeeper集群部署有两种方式：\n1. 伪集群部署\n2. 真集群部署\n\n\n## 伪集群部署\n\n这里所谓的“伪”，指的是Zookeeper的服务全部在一台服务器上。一旦服务器出现问题，所有Zookeeper服务全部都会收到影响，脱离了分布式的宗旨。\n\n### 创建一个集群文件夹\n```\nmkdir /usr/local/zkcluster\n```\n然后分别创建三个子文件夹，作为Zookeeper的服务路径\n> 由于Zookeeper的选举特殊性，这里请创建单数个数的Zookeeper服务\n\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesobu63ej209k025glg.jpg)\n\n### 分别复制Zookeeper的文件\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesq0we1cj20e60bgjry.jpg)\n> 3002和3003文件夹里面文件和3001一样\n\n### 修改Zookeeper默认配置\n```\ncp zoo_sample.cfg zoo.cfg\nvim zoo.cfg\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhest8k290j20fb0dkwf0.jpg)\n\n在设置的**dataDir**目录创建**myid**，并填入相应值：\n```\necho \"1\" > ./tmp/zookeeper/data/myid\n```\n\n> 保证每个zookeeper的启动端口不一样\n> myid文件的值，与zoo.cfg中server.x中x的值对应\n\n### 启动Zookeeper\n分别启动zookeeper\n```\nbin/zkServer.sh start\n```\n\n### 查看Zookeeper状态\n```\nbin/zkServer.sh status\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesz1kyvbj20ec057mxb.jpg)\n\n> 如果输出内容报错，请检查myid的值和zoo.cfg的server的值是否一样。\n\n## 真集群部署\n\n大致配置和**伪集群部署**一样，只是不需要配置端口不一致，当然也可一致，纯粹看个人喜好。\n> 注意各台服务器防火墙是否工作，zookeeper相应端口是否被开放。","source":"_posts/zookeeper/cluster.md","raw":"---\ntitle: Zookeeper集群\ndate: 2017-07-10 14:44:19\ntags: [zookeeper]\ncategories: [zookeeper]\n---\n<p align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg)\n</p>\n\nZookeeper集群部署有两种方式：\n1. 伪集群部署\n2. 真集群部署\n\n\n## 伪集群部署\n\n这里所谓的“伪”，指的是Zookeeper的服务全部在一台服务器上。一旦服务器出现问题，所有Zookeeper服务全部都会收到影响，脱离了分布式的宗旨。\n\n### 创建一个集群文件夹\n```\nmkdir /usr/local/zkcluster\n```\n然后分别创建三个子文件夹，作为Zookeeper的服务路径\n> 由于Zookeeper的选举特殊性，这里请创建单数个数的Zookeeper服务\n\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesobu63ej209k025glg.jpg)\n\n### 分别复制Zookeeper的文件\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesq0we1cj20e60bgjry.jpg)\n> 3002和3003文件夹里面文件和3001一样\n\n### 修改Zookeeper默认配置\n```\ncp zoo_sample.cfg zoo.cfg\nvim zoo.cfg\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhest8k290j20fb0dkwf0.jpg)\n\n在设置的**dataDir**目录创建**myid**，并填入相应值：\n```\necho \"1\" > ./tmp/zookeeper/data/myid\n```\n\n> 保证每个zookeeper的启动端口不一样\n> myid文件的值，与zoo.cfg中server.x中x的值对应\n\n### 启动Zookeeper\n分别启动zookeeper\n```\nbin/zkServer.sh start\n```\n\n### 查看Zookeeper状态\n```\nbin/zkServer.sh status\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesz1kyvbj20ec057mxb.jpg)\n\n> 如果输出内容报错，请检查myid的值和zoo.cfg的server的值是否一样。\n\n## 真集群部署\n\n大致配置和**伪集群部署**一样，只是不需要配置端口不一致，当然也可一致，纯粹看个人喜好。\n> 注意各台服务器防火墙是否工作，zookeeper相应端口是否被开放。","slug":"zookeeper/cluster","published":1,"updated":"2018-03-10T14:50:11.770Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k3c0019hkwcz7ihj825","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg\" alt=\"\"><br></p>\n\n<p>Zookeeper集群部署有两种方式：</p>\n<ol>\n<li>伪集群部署</li>\n<li>真集群部署</li>\n</ol>\n<h2 id=\"伪集群部署\"><a href=\"#伪集群部署\" class=\"headerlink\" title=\"伪集群部署\"></a>伪集群部署</h2><p>这里所谓的“伪”，指的是Zookeeper的服务全部在一台服务器上。一旦服务器出现问题，所有Zookeeper服务全部都会收到影响，脱离了分布式的宗旨。</p>\n<h3 id=\"创建一个集群文件夹\"><a href=\"#创建一个集群文件夹\" class=\"headerlink\" title=\"创建一个集群文件夹\"></a>创建一个集群文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/zkcluster</span><br></pre></td></tr></table></figure>\n<p>然后分别创建三个子文件夹，作为Zookeeper的服务路径</p>\n<blockquote>\n<p>由于Zookeeper的选举特殊性，这里请创建单数个数的Zookeeper服务</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesobu63ej209k025glg.jpg\" alt=\"\"></p>\n<h3 id=\"分别复制Zookeeper的文件\"><a href=\"#分别复制Zookeeper的文件\" class=\"headerlink\" title=\"分别复制Zookeeper的文件\"></a>分别复制Zookeeper的文件</h3><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesq0we1cj20e60bgjry.jpg\" alt=\"\"></p>\n<blockquote>\n<p>3002和3003文件夹里面文件和3001一样</p>\n</blockquote>\n<h3 id=\"修改Zookeeper默认配置\"><a href=\"#修改Zookeeper默认配置\" class=\"headerlink\" title=\"修改Zookeeper默认配置\"></a>修改Zookeeper默认配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vim zoo.cfg</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhest8k290j20fb0dkwf0.jpg\" alt=\"\"></p>\n<p>在设置的<strong>dataDir</strong>目录创建<strong>myid</strong>，并填入相应值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;1&quot; &gt; ./tmp/zookeeper/data/myid</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>保证每个zookeeper的启动端口不一样<br>myid文件的值，与zoo.cfg中server.x中x的值对应</p>\n</blockquote>\n<h3 id=\"启动Zookeeper\"><a href=\"#启动Zookeeper\" class=\"headerlink\" title=\"启动Zookeeper\"></a>启动Zookeeper</h3><p>分别启动zookeeper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看Zookeeper状态\"><a href=\"#查看Zookeeper状态\" class=\"headerlink\" title=\"查看Zookeeper状态\"></a>查看Zookeeper状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh status</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesz1kyvbj20ec057mxb.jpg\" alt=\"\"></p>\n<blockquote>\n<p>如果输出内容报错，请检查myid的值和zoo.cfg的server的值是否一样。</p>\n</blockquote>\n<h2 id=\"真集群部署\"><a href=\"#真集群部署\" class=\"headerlink\" title=\"真集群部署\"></a>真集群部署</h2><p>大致配置和<strong>伪集群部署</strong>一样，只是不需要配置端口不一致，当然也可一致，纯粹看个人喜好。</p>\n<blockquote>\n<p>注意各台服务器防火墙是否工作，zookeeper相应端口是否被开放。</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg\" alt=\"\"><br></p>\n\n<p>Zookeeper集群部署有两种方式：</p>\n<ol>\n<li>伪集群部署</li>\n<li>真集群部署</li>\n</ol>\n<h2 id=\"伪集群部署\"><a href=\"#伪集群部署\" class=\"headerlink\" title=\"伪集群部署\"></a>伪集群部署</h2><p>这里所谓的“伪”，指的是Zookeeper的服务全部在一台服务器上。一旦服务器出现问题，所有Zookeeper服务全部都会收到影响，脱离了分布式的宗旨。</p>\n<h3 id=\"创建一个集群文件夹\"><a href=\"#创建一个集群文件夹\" class=\"headerlink\" title=\"创建一个集群文件夹\"></a>创建一个集群文件夹</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir /usr/local/zkcluster</span><br></pre></td></tr></table></figure>\n<p>然后分别创建三个子文件夹，作为Zookeeper的服务路径</p>\n<blockquote>\n<p>由于Zookeeper的选举特殊性，这里请创建单数个数的Zookeeper服务</p>\n</blockquote>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesobu63ej209k025glg.jpg\" alt=\"\"></p>\n<h3 id=\"分别复制Zookeeper的文件\"><a href=\"#分别复制Zookeeper的文件\" class=\"headerlink\" title=\"分别复制Zookeeper的文件\"></a>分别复制Zookeeper的文件</h3><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesq0we1cj20e60bgjry.jpg\" alt=\"\"></p>\n<blockquote>\n<p>3002和3003文件夹里面文件和3001一样</p>\n</blockquote>\n<h3 id=\"修改Zookeeper默认配置\"><a href=\"#修改Zookeeper默认配置\" class=\"headerlink\" title=\"修改Zookeeper默认配置\"></a>修改Zookeeper默认配置</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp zoo_sample.cfg zoo.cfg</span><br><span class=\"line\">vim zoo.cfg</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhest8k290j20fb0dkwf0.jpg\" alt=\"\"></p>\n<p>在设置的<strong>dataDir</strong>目录创建<strong>myid</strong>，并填入相应值：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">echo &quot;1&quot; &gt; ./tmp/zookeeper/data/myid</span><br></pre></td></tr></table></figure></p>\n<blockquote>\n<p>保证每个zookeeper的启动端口不一样<br>myid文件的值，与zoo.cfg中server.x中x的值对应</p>\n</blockquote>\n<h3 id=\"启动Zookeeper\"><a href=\"#启动Zookeeper\" class=\"headerlink\" title=\"启动Zookeeper\"></a>启动Zookeeper</h3><p>分别启动zookeeper<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure></p>\n<h3 id=\"查看Zookeeper状态\"><a href=\"#查看Zookeeper状态\" class=\"headerlink\" title=\"查看Zookeeper状态\"></a>查看Zookeeper状态</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh status</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesz1kyvbj20ec057mxb.jpg\" alt=\"\"></p>\n<blockquote>\n<p>如果输出内容报错，请检查myid的值和zoo.cfg的server的值是否一样。</p>\n</blockquote>\n<h2 id=\"真集群部署\"><a href=\"#真集群部署\" class=\"headerlink\" title=\"真集群部署\"></a>真集群部署</h2><p>大致配置和<strong>伪集群部署</strong>一样，只是不需要配置端口不一致，当然也可一致，纯粹看个人喜好。</p>\n<blockquote>\n<p>注意各台服务器防火墙是否工作，zookeeper相应端口是否被开放。</p>\n</blockquote>\n"},{"title":"Zookeeper安装","date":"2017-07-10T05:46:35.000Z","_content":"<p align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg)\n</p>\n\n## 下载Zookeeper\n```\nwget http://mirror.bit.edu.cn/apache/zookeeper/ \n```\n\n## 解压\n```\ntar zxvf zookeeper-3.4.10.tar.gz -C /usr/local \n```\n\n## 配置文件\n```\ncp zoo_sample.cfg zoo.cfg\t\t# 拷贝配置文件\n```\n\n## 启动Zookeeper\n```\nbin/zkServer.sh start\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheqzbr1qvj20cl01p3yd.jpg)\n\n## 关闭Zookeeper\n```\nbin/zkServer.sh stop\n```","source":"_posts/zookeeper/install.md","raw":"---\ntitle: Zookeeper安装\ndate: 2017-07-10 13:46:35\ntags: [zookeeper]\ncategories: [zookeeper]\n---\n<p align='center'>\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg)\n</p>\n\n## 下载Zookeeper\n```\nwget http://mirror.bit.edu.cn/apache/zookeeper/ \n```\n\n## 解压\n```\ntar zxvf zookeeper-3.4.10.tar.gz -C /usr/local \n```\n\n## 配置文件\n```\ncp zoo_sample.cfg zoo.cfg\t\t# 拷贝配置文件\n```\n\n## 启动Zookeeper\n```\nbin/zkServer.sh start\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1fheqzbr1qvj20cl01p3yd.jpg)\n\n## 关闭Zookeeper\n```\nbin/zkServer.sh stop\n```","slug":"zookeeper/install","published":1,"updated":"2018-03-10T14:50:11.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjelm4k3e001dhkwct37imvcl","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"下载Zookeeper\"><a href=\"#下载Zookeeper\" class=\"headerlink\" title=\"下载Zookeeper\"></a>下载Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.bit.edu.cn/apache/zookeeper/</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf zookeeper-3.4.10.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp zoo_sample.cfg zoo.cfg\t\t# 拷贝配置文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动Zookeeper\"><a href=\"#启动Zookeeper\" class=\"headerlink\" title=\"启动Zookeeper\"></a>启动Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheqzbr1qvj20cl01p3yd.jpg\" alt=\"\"></p>\n<h2 id=\"关闭Zookeeper\"><a href=\"#关闭Zookeeper\" class=\"headerlink\" title=\"关闭Zookeeper\"></a>关闭Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh stop</span><br></pre></td></tr></table></figure>","site":{"data":{}},"excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fhesd5w1p1j20nr03bzkm.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"下载Zookeeper\"><a href=\"#下载Zookeeper\" class=\"headerlink\" title=\"下载Zookeeper\"></a>下载Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wget http://mirror.bit.edu.cn/apache/zookeeper/</span><br></pre></td></tr></table></figure>\n<h2 id=\"解压\"><a href=\"#解压\" class=\"headerlink\" title=\"解压\"></a>解压</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">tar zxvf zookeeper-3.4.10.tar.gz -C /usr/local</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置文件\"><a href=\"#配置文件\" class=\"headerlink\" title=\"配置文件\"></a>配置文件</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cp zoo_sample.cfg zoo.cfg\t\t# 拷贝配置文件</span><br></pre></td></tr></table></figure>\n<h2 id=\"启动Zookeeper\"><a href=\"#启动Zookeeper\" class=\"headerlink\" title=\"启动Zookeeper\"></a>启动Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh start</span><br></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fheqzbr1qvj20cl01p3yd.jpg\" alt=\"\"></p>\n<h2 id=\"关闭Zookeeper\"><a href=\"#关闭Zookeeper\" class=\"headerlink\" title=\"关闭Zookeeper\"></a>关闭Zookeeper</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">bin/zkServer.sh stop</span><br></pre></td></tr></table></figure>"}],"PostAsset":[],"PostCategory":[{"post_id":"cjelm4k1l0003hkwc01thxj53","category_id":"cjelm4k1m0004hkwcldicinq5","_id":"cjelm4k1p0007hkwctbxbfl6y"},{"post_id":"cjelm4k2q000ahkwcte90uqg8","category_id":"cjelm4k2s000chkwchfg7qoo1","_id":"cjelm4k32000mhkwcmf24yako"},{"post_id":"cjelm4k2y000khkwca9o08n1g","category_id":"cjelm4k2x000hhkwcufwob5aq","_id":"cjelm4k35000thkwcnrg5mtd9"},{"post_id":"cjelm4k2r000bhkwcv1sctfan","category_id":"cjelm4k2x000hhkwcufwob5aq","_id":"cjelm4k37000yhkwcb9kkjpyr"},{"post_id":"cjelm4k31000lhkwcnusyqiqr","category_id":"cjelm4k1m0004hkwcldicinq5","_id":"cjelm4k380011hkwcuie6iwzm"},{"post_id":"cjelm4k2t000ehkwcmhixr60s","category_id":"cjelm4k32000nhkwc431omlx2","_id":"cjelm4k3a0015hkwc5zlkw0v6"},{"post_id":"cjelm4k2v000fhkwc3n0sbw3v","category_id":"cjelm4k35000uhkwce407ffus","_id":"cjelm4k3c0018hkwc5qzr0ihf"},{"post_id":"cjelm4k2w000ghkwcnidhk7gl","category_id":"cjelm4k390012hkwck4ct2u7p","_id":"cjelm4k3f001ehkwce1e61adv"},{"post_id":"cjelm4k33000qhkwchzhitbcw","category_id":"cjelm4k3d001ahkwcdf39mxh0","_id":"cjelm4k3j001jhkwc4ofq1fpy"},{"post_id":"cjelm4k34000shkwc46hk225w","category_id":"cjelm4k3d001ahkwcdf39mxh0","_id":"cjelm4k3k001mhkwc3qd7n1fb"},{"post_id":"cjelm4k380010hkwc6oksg2ck","category_id":"cjelm4k3i001ihkwcj8ozcpx5","_id":"cjelm4k3l001qhkwcow68d7lb"},{"post_id":"cjelm4k390014hkwcq1z84q2r","category_id":"cjelm4k3k001nhkwcrz5f0now","_id":"cjelm4k3m001uhkwcgpo5uf8b"},{"post_id":"cjelm4k3b0017hkwcbpe85nm6","category_id":"cjelm4k3l001rhkwcb7c8yi9d","_id":"cjelm4k3o001zhkwc7281bg85"},{"post_id":"cjelm4k3c0019hkwcz7ihj825","category_id":"cjelm4k3l001rhkwcb7c8yi9d","_id":"cjelm4k3p0022hkwc6cge6us3"},{"post_id":"cjelm4k3e001dhkwct37imvcl","category_id":"cjelm4k3l001rhkwcb7c8yi9d","_id":"cjelm4k3q0025hkwc9pwwlyks"}],"PostTag":[{"post_id":"cjelm4k1l0003hkwc01thxj53","tag_id":"cjelm4k1n0005hkwcuvxgm3td","_id":"cjelm4k1o0006hkwcfl1m3gok"},{"post_id":"cjelm4k2q000ahkwcte90uqg8","tag_id":"cjelm4k2t000dhkwcelwl0ozf","_id":"cjelm4k2y000jhkwcprf84fc4"},{"post_id":"cjelm4k2y000khkwca9o08n1g","tag_id":"cjelm4k2y000ihkwcrjrmmssa","_id":"cjelm4k32000phkwcp8hbvgm3"},{"post_id":"cjelm4k2r000bhkwcv1sctfan","tag_id":"cjelm4k2y000ihkwcrjrmmssa","_id":"cjelm4k34000rhkwc1z9r8d9y"},{"post_id":"cjelm4k31000lhkwcnusyqiqr","tag_id":"cjelm4k1n0005hkwcuvxgm3td","_id":"cjelm4k36000whkwcywayzxpu"},{"post_id":"cjelm4k2t000ehkwcmhixr60s","tag_id":"cjelm4k32000ohkwcrhueow9u","_id":"cjelm4k37000zhkwcfw4pxky8"},{"post_id":"cjelm4k2v000fhkwc3n0sbw3v","tag_id":"cjelm4k36000vhkwc2ftf7g6l","_id":"cjelm4k3a0016hkwcnt2a593k"},{"post_id":"cjelm4k2w000ghkwcnidhk7gl","tag_id":"cjelm4k390013hkwcd58v6c52","_id":"cjelm4k3e001chkwcjk0cw4iy"},{"post_id":"cjelm4k33000qhkwchzhitbcw","tag_id":"cjelm4k3d001bhkwcmh6lb1yn","_id":"cjelm4k3i001hhkwccoszt3f0"},{"post_id":"cjelm4k34000shkwc46hk225w","tag_id":"cjelm4k3d001bhkwcmh6lb1yn","_id":"cjelm4k3j001lhkwcpuagtxsg"},{"post_id":"cjelm4k36000xhkwczuv8mvuo","tag_id":"cjelm4k3j001khkwczhyeymcg","_id":"cjelm4k3l001phkwcwzo6h7he"},{"post_id":"cjelm4k380010hkwc6oksg2ck","tag_id":"cjelm4k3k001ohkwcknb7owg7","_id":"cjelm4k3m001thkwca3i72m0d"},{"post_id":"cjelm4k390014hkwcq1z84q2r","tag_id":"cjelm4k3m001shkwcr0hgswrb","_id":"cjelm4k3n001xhkwcihu42mgt"},{"post_id":"cjelm4k3b0017hkwcbpe85nm6","tag_id":"cjelm4k3n001whkwc0ptvd7ne","_id":"cjelm4k3p0021hkwcoolw5plc"},{"post_id":"cjelm4k3c0019hkwcz7ihj825","tag_id":"cjelm4k3n001whkwc0ptvd7ne","_id":"cjelm4k3q0024hkwcbdk5uhmu"},{"post_id":"cjelm4k3e001dhkwct37imvcl","tag_id":"cjelm4k3n001whkwc0ptvd7ne","_id":"cjelm4k3q0026hkwcrks7bgcy"}],"Tag":[{"name":"Redis","_id":"cjelm4k1n0005hkwcuvxgm3td"},{"name":"LeetCode","_id":"cjelm4k2t000dhkwcelwl0ozf"},{"name":"Mysql","_id":"cjelm4k2y000ihkwcrjrmmssa"},{"name":"HarhDisk","_id":"cjelm4k32000ohkwcrhueow9u"},{"name":"Maven","_id":"cjelm4k36000vhkwc2ftf7g6l"},{"name":"Git","_id":"cjelm4k390013hkwcd58v6c52"},{"name":"SpringMVC源码分析","_id":"cjelm4k3d001bhkwcmh6lb1yn"},{"name":"工具","_id":"cjelm4k3j001khkwczhyeymcg"},{"name":"kafka","_id":"cjelm4k3k001ohkwcknb7owg7"},{"name":"Memcache","_id":"cjelm4k3m001shkwcr0hgswrb"},{"name":"zookeeper","_id":"cjelm4k3n001whkwc0ptvd7ne"}]}}