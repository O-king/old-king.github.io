{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/Staticfile","path":"Staticfile","modified":0,"renderable":0},{"_id":"source/CNAME","path":"CNAME","modified":0,"renderable":0},{"_id":"source/bitbug_favicon.ico","path":"bitbug_favicon.ico","modified":0,"renderable":0},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","path":"css/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/maupassant/source/css/style.scss","path":"css/style.scss","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","path":"fancybox/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","path":"fancybox/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","path":"fancybox/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/blank.gif","path":"fancybox/blank.gif","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","path":"js/codeblock-resizer.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/share.js","path":"js/share.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/fancybox.js","path":"js/fancybox.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/smartresize.js","path":"js/smartresize.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/js/totop.js","path":"js/totop.js","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","path":"fancybox/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","path":"fancybox/fancybox_overlay.png","modified":0,"renderable":1}],"Cache":[{"_id":"source/Staticfile","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1496977869206},{"_id":"source/CNAME","hash":"7e5d739cda9871289e5aa7107da34f043d9eef62","modified":1492572824755},{"_id":"themes/maupassant/.travis.yml","hash":"f8da426b97088e4caa5226cff219a5d95087961f","modified":1496980157388},{"_id":"themes/maupassant/LICENSE","hash":"0663fd3a7ea9fc4f4c634b4d73e2da426b536f86","modified":1496980157391},{"_id":"themes/maupassant/_config.yml","hash":"01e880c7defb82bc233d3df0f1e3614269b91446","modified":1496729341131},{"_id":"themes/maupassant/README.md","hash":"3a0a67b3afc676d7080c3c68e6accecfeab05303","modified":1496980157395},{"_id":"themes/maupassant/package.json","hash":"04ca87ea475f37841d3610fe5806feb8022416c3","modified":1496980157497},{"_id":"source/bitbug_favicon.ico","hash":"07fba3d1f93c3e221c7e03bebe9393031f4657dc","modified":1492572824762},{"_id":"source/about/index.md","hash":"99162822beec02a63043052b223552c46b299a0d","modified":1492572824760},{"_id":"themes/maupassant/.git/config","hash":"6be4dc35328ba778446df77b222023def63f1ed8","modified":1496980157384},{"_id":"themes/maupassant/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1496980157372},{"_id":"themes/maupassant/.git/index","hash":"4d396974278c8657c57df8edd5db75034fc7558e","modified":1496980157546},{"_id":"themes/maupassant/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1496980138396},{"_id":"themes/maupassant/.git/packed-refs","hash":"5090160a4a75b22305a00a98080305d6ee1a97cc","modified":1496980157364},{"_id":"themes/maupassant/languages/en.yml","hash":"c95e556f265f6747a6cbcc9b9ce2cb4d820d94dc","modified":1496980157403},{"_id":"themes/maupassant/languages/de-DE.yml","hash":"25d1d8cd8113045a7603c14af1ea1539fc6456ed","modified":1496980157401},{"_id":"themes/maupassant/languages/es-ES.yml","hash":"3cc9312fbdba4a8f8e8254804121e4724c719bcc","modified":1496980157406},{"_id":"themes/maupassant/languages/fr-FR.yml","hash":"3a50568f200b9c1258415b53727e42c6b6c7ea0b","modified":1496980157408},{"_id":"themes/maupassant/languages/ko.yml","hash":"a454bcec60113507bc1d593a699849822386c196","modified":1496980157410},{"_id":"themes/maupassant/languages/ru.yml","hash":"36edc014c6aaef367d58929089bf7915375e71a6","modified":1496980157414},{"_id":"themes/maupassant/languages/zh-CN.yml","hash":"667788fba1b74a543c8cc673bf6c6702445f840c","modified":1496980157416},{"_id":"themes/maupassant/languages/zh-TW.yml","hash":"46d17868c373d21ebde917ae81a3d3566c855e38","modified":1496980157419},{"_id":"themes/maupassant/layout/archive.jade","hash":"d70d1ed241b1a431a2434768d02bb2de03070f70","modified":1496980157474},{"_id":"themes/maupassant/layout/base-without-sidebar.jade","hash":"5901de9f23358158079a02c6470a491cf36ffbf2","modified":1496980157476},{"_id":"themes/maupassant/layout/base.jade","hash":"513c2b66a327fc281917f4a5c567f93a39ecb96e","modified":1496980157480},{"_id":"themes/maupassant/layout/index.jade","hash":"78f9e07a019ea641d891590c02196a6c4d710233","modified":1496980157483},{"_id":"themes/maupassant/layout/page.jade","hash":"1e98aa785073dc1bbfe70f2863bc19fe287483b9","modified":1496980157486},{"_id":"themes/maupassant/layout/post.jade","hash":"d8b12b2152602682ae368ea7f9fc2292f74c2081","modified":1496980438197},{"_id":"themes/maupassant/layout/single-column.jade","hash":"4be14ac93c154216e174fe0c4c05608c26f59c42","modified":1496980157492},{"_id":"themes/maupassant/layout/timeline.jade","hash":"31f2826d86201c9a86e00d42690f26473ab14363","modified":1496980157494},{"_id":"source/_posts/CentOS/CentOS挂载硬盘操作说明.md","hash":"2286a22b04787edd75d66cadcd91243a7ad0d9b3","modified":1496824627894},{"_id":"source/_posts/Git操作说明/Git撤销操作说明.md","hash":"1ad672640f60de274cf320a695b2ccf3cdc703cb","modified":1496824697248},{"_id":"source/_posts/Maven/多模块工程的打包.md","hash":"be57becba6b612266b0c96ef75c81a52d520e9ef","modified":1496824714963},{"_id":"source/_posts/Mysql/Mysql的Master-Slave主从复制配置.md","hash":"6333b95a5c1a51a8c0449621df51e734c78ebad6","modified":1496824732571},{"_id":"source/_posts/Mysql/Mysql数据库软件安装与配置.md","hash":"a9dada35c1951579c6f2b40fbb4f24acf3b7a89f","modified":1496824754918},{"_id":"source/_posts/SpringMVC源码分析/SpringMVC源码分析-核心分发器DispatcherServlet（初始化）.md","hash":"0e8bca1db78f1f3c41b76fd82d8064e0b8c7a73d","modified":1496824537111},{"_id":"source/_posts/SpringMVC源码分析/SpringMVC源码分析-核心分发器DispatcherServlet（请求转发）.md","hash":"a638e9a1f7b00b641380f6298ff020fa35279dcd","modified":1496824651361},{"_id":"source/_posts/共享工具/sync.md","hash":"fd164bb37e3e501d6adef1cb9f93c45d54931f27","modified":1492573143183},{"_id":"source/_posts/内存数据库/CentOS7安装Memcached.md","hash":"a3cd080b611411e82cb44966fb68d5028d61f580","modified":1496824827435},{"_id":"themes/maupassant/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1496980138449},{"_id":"themes/maupassant/.git/hooks/applypatch-msg.sample","hash":"4de88eb95a5e93fd27e78b5fb3b5231a8d8917dd","modified":1496980138406},{"_id":"themes/maupassant/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1496980138418},{"_id":"themes/maupassant/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1496980138425},{"_id":"themes/maupassant/.git/hooks/pre-push.sample","hash":"5c8518bfd1d1d3d2c1a7194994c0a16d8a313a41","modified":1496980138429},{"_id":"themes/maupassant/.git/hooks/pre-receive.sample","hash":"705a17d259e7896f0082fe2e9f2c0c3b127be5ac","modified":1496980138437},{"_id":"themes/maupassant/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1496980138441},{"_id":"themes/maupassant/.git/hooks/update.sample","hash":"e729cd61b27c128951d139de8e7c63d1a3758dde","modified":1496980138446},{"_id":"themes/maupassant/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1496980138414},{"_id":"themes/maupassant/layout/_partial/after_footer.jade","hash":"d81fae25f977d91d9922b34bff4df5fa88a6efb0","modified":1496986644719},{"_id":"themes/maupassant/layout/_partial/comments.jade","hash":"8c3beefef216f1f45fdde96433554a7505832fef","modified":1496980157432},{"_id":"themes/maupassant/layout/_partial/footer.jade","hash":"92aa15e813bfb411803cc54218feb5410469a9c2","modified":1496980157434},{"_id":"themes/maupassant/layout/_partial/helpers.jade","hash":"9e44f6d32f2449b4109c33118f8285fa2fc7b023","modified":1496980157441},{"_id":"themes/maupassant/layout/_partial/mathjax.jade","hash":"ac6e3a92bf18ab6bbd0e041b6796b295bae963ee","modified":1496980157443},{"_id":"themes/maupassant/layout/_partial/head.jade","hash":"855ab59e813d0e8eab2387d587a58b0ebbc330b1","modified":1496980157438},{"_id":"themes/maupassant/layout/_partial/mathjax2.jade","hash":"234a792e64ba208fa97d2f99772ece23056a53ec","modified":1496980157445},{"_id":"themes/maupassant/layout/_partial/paginator.jade","hash":"03ad0c49ae6f8a999ae35b38d08e25775f51f52a","modified":1496980157448},{"_id":"themes/maupassant/layout/_partial/post_nav.jade","hash":"b11d9e6000449838b17f508429f29ffb60f53096","modified":1496980157451},{"_id":"themes/maupassant/layout/_partial/totop.jade","hash":"eb91a3baf9411188c7c8130f63a674f541ca9c81","modified":1496980157455},{"_id":"themes/maupassant/.git/hooks/pre-applypatch.sample","hash":"f208287c1a92525de9f5462e905a9d31de1e2d75","modified":1496980138422},{"_id":"themes/maupassant/layout/_partial/tag.jade","hash":"6145b483b271bba05ad1db7c039fe352a768215b","modified":1496980157453},{"_id":"themes/maupassant/layout/_widget/category.jade","hash":"7707b4c718a935882ee986d0bb0078e50cdbea64","modified":1496980157458},{"_id":"themes/maupassant/.git/logs/HEAD","hash":"16d3b75714fd5d36883dddb0dee06523b20fc497","modified":1496980157377},{"_id":"themes/maupassant/layout/_widget/links.jade","hash":"2a1dd6a0e2befd073e3347347994d8dcd2047879","modified":1496980157461},{"_id":"themes/maupassant/layout/_widget/recent_comments.jade","hash":"0b9e78e7f20bc69690e05f2e0c956bded9058a84","modified":1496980157463},{"_id":"themes/maupassant/layout/_widget/recent_posts.jade","hash":"770b6c41cbf7969ed33adf87eec3be6f50a0911b","modified":1496980157466},{"_id":"themes/maupassant/layout/_widget/search.jade","hash":"c5301ca7f2ec24d790fd7f35f69f8fd8acbdb725","modified":1496980157468},{"_id":"themes/maupassant/layout/_widget/tag.jade","hash":"37f236365b153fc40324391e5a602d6d50014e18","modified":1496980157471},{"_id":"themes/maupassant/.git/hooks/pre-rebase.sample","hash":"5885a56ab4fca8075a05a562d005e922cde9853b","modified":1496980138434},{"_id":"themes/maupassant/source/css/jquery.fancybox.css","hash":"0d142e11e27e9de1a325c32369c42254101ddd34","modified":1496980157500},{"_id":"themes/maupassant/source/css/style.scss","hash":"5b5d7b1ede00e589353c9518f2890e1fe64bf644","modified":1496980157503},{"_id":"themes/maupassant/source/fancybox/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1492572824931},{"_id":"themes/maupassant/source/fancybox/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1492572824931},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1492572824933},{"_id":"themes/maupassant/source/fancybox/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1492572824930},{"_id":"themes/maupassant/source/js/codeblock-resizer.js","hash":"c77270e684a60babc1abb7353e700ecdc5a66d30","modified":1496980157511},{"_id":"themes/maupassant/source/js/search.js","hash":"dbda07a03e6edc73f1dc28a068c24a6037b97b56","modified":1496980157526},{"_id":"themes/maupassant/source/js/share.js","hash":"60fa9e1da0fcf47381ea31275b9c010006225d7a","modified":1496980157533},{"_id":"themes/maupassant/source/js/fancybox.js","hash":"8a993c1c4ad40789d2960b682cb2130382a0f26a","modified":1496980157517},{"_id":"themes/maupassant/source/js/smartresize.js","hash":"150ab1cad40d7ae081b0896b13f7d7cbac4e6338","modified":1496980157539},{"_id":"themes/maupassant/source/js/totop.js","hash":"15de186b089c245fe60766d509b587919f05ff23","modified":1496980157544},{"_id":"themes/maupassant/source/fancybox/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1492572824934},{"_id":"themes/maupassant/source/fancybox/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1492572824933},{"_id":"themes/maupassant/.git/refs/heads/master","hash":"7a344ca9ef8cc2104c69581d3eb6193d72128abb","modified":1496980157376},{"_id":"themes/maupassant/.git/objects/pack/pack-d9507ef0ce6711d6e54b39ac1164938c1fb43470.idx","hash":"25fda98b0d4392ca2e2145c6a3ed121a1a673e09","modified":1496980156976},{"_id":"themes/maupassant/.git/logs/refs/heads/master","hash":"16d3b75714fd5d36883dddb0dee06523b20fc497","modified":1496980157378},{"_id":"themes/maupassant/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1496980157371},{"_id":"themes/maupassant/.git/logs/refs/remotes/origin/HEAD","hash":"16d3b75714fd5d36883dddb0dee06523b20fc497","modified":1496980157370},{"_id":"themes/maupassant/.git/objects/pack/pack-d9507ef0ce6711d6e54b39ac1164938c1fb43470.pack","hash":"ca1b20c879555f21d53e2b5246f4bdc4f017e636","modified":1496980157043}],"Category":[{"name":"Git","_id":"cj3pbg21d000314ve3co6irtd"},{"name":"Maven","_id":"cj3pbg21l000814ven4kumzb2"},{"name":"CentOS","_id":"cj3pbg21q000e14vecg9y0vv0"},{"name":"Mysql","_id":"cj3pbg21s000k14veurzltv0u"},{"name":"内存数据库","_id":"cj3pbg21v000o14vetbkzhou6"},{"name":"SpringMVC","_id":"cj3pbg21x000s14vecpec2i3y"}],"Data":[],"Page":[{"title":"about","date":"2016-11-11T06:13:07.000Z","_content":"\nStay hungry. Stay foolish!\n","source":"about/index.md","raw":"---\ntitle: about\ndate: 2016-11-11 14:13:07\n---\n\nStay hungry. Stay foolish!\n","updated":"2017-04-19T03:33:44.760Z","path":"about/index.html","comments":1,"layout":"page","_id":"cj3pbg1yh000014vezig65jdh","content":"<p>Stay hungry. Stay foolish!</p>\n","excerpt":"","more":"<p>Stay hungry. Stay foolish!</p>\n"}],"Post":[{"title":"Git操作说明---回滚文件","date":"2017-05-18T10:31:23.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg)\n</p>\n\n## 本文将记录Git使用过程中回滚文件的操作说明。\n\n## 情况假设\n1. 改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.\n2. 改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.\n\n\n**这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.**\n\n## 解决方案\n\n1. **没有commit到本地仓库**\n\t\tgit checkout fileName\n\t\t\n\t命令执行过后，文件会恢复到上次commit后的内容\n\n\t**小结：**\n\t- git checkout file1 （回滚单个文件）\n\t- git checkout file1 file2 ... fileN （一次回滚多个文件，中间用空格隔开即可）\n\t- git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）\n\n2. **已经commit到本地仓库**\n\t1. 查看提交记录\n\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg)\n\t2. 执行回滚操作\n\t\t- 命令说明\n\t\t\t```\n\t\t\tgit reset [--soft | --mixed | --hard]\n\t\t\t```\n\t\t1. \\--soft\t\t \n\t\t\t\t保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg)\n\t\n\t\t **本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区**\n\t\t\n\t\t2. \\-- mixed\n\t\t\t\t会保留源码,只是将git commit和index 信息回退到了某个版本.\n\n\t\t\t```\n\t\t\tgit reset 默认是 --mixed 模式 \n\t\t\tgit reset --mixed  等价于  git reset\n\t\t\t```\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg)\n\t\n\t \t**本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区**\n\n\t\t3. \\--hard\t\t \n\t\t\t\t源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg)\n\n\t\t **本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容**\n\n\t**小结：**\t\n\t- HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n\t- 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n\t- 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\t\t\n\n3. **已经push到远程仓库**\n\t```\n\tgit revert HEAD                     //撤销最近一次提交\n\tgit revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始\n\tgit revert 0ffaacc                  //撤销0ffaacc这次提交\n\t```\n\t**小结：**\n\t- revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交\t\t\n\t- 使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的\t\t\n\t- 使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。\t\n\t- 如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.\n\n## 总结\n```\t\ngit checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录\ngit reset commitId\t\t\t//回退工作区文件，版本号会回退\ngit revert commitId\t\t\t//回退远程仓库，会产生新的版本号\n```\n  \t\t\t\n\t\t\t\t\n\n\n\n","source":"_posts/Git操作说明/Git撤销操作说明.md","raw":"---\ntitle: Git操作说明---回滚文件\ndate: 2017-05-18 18:31:23\ncategories: [Git]\ntags: [Git]\n---\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg)\n</p>\n\n## 本文将记录Git使用过程中回滚文件的操作说明。\n\n## 情况假设\n1. 改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.\n2. 改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.\n\n\n**这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.**\n\n## 解决方案\n\n1. **没有commit到本地仓库**\n\t\tgit checkout fileName\n\t\t\n\t命令执行过后，文件会恢复到上次commit后的内容\n\n\t**小结：**\n\t- git checkout file1 （回滚单个文件）\n\t- git checkout file1 file2 ... fileN （一次回滚多个文件，中间用空格隔开即可）\n\t- git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）\n\n2. **已经commit到本地仓库**\n\t1. 查看提交记录\n\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg)\n\t2. 执行回滚操作\n\t\t- 命令说明\n\t\t\t```\n\t\t\tgit reset [--soft | --mixed | --hard]\n\t\t\t```\n\t\t1. \\--soft\t\t \n\t\t\t\t保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg)\n\t\n\t\t **本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区**\n\t\t\n\t\t2. \\-- mixed\n\t\t\t\t会保留源码,只是将git commit和index 信息回退到了某个版本.\n\n\t\t\t```\n\t\t\tgit reset 默认是 --mixed 模式 \n\t\t\tgit reset --mixed  等价于  git reset\n\t\t\t```\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg)\n\t\n\t \t**本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区**\n\n\t\t3. \\--hard\t\t \n\t\t\t\t源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n\t\t\t![](http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg)\n\n\t\t **本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容**\n\n\t**小结：**\t\n\t- HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset --hard commit_id。\n\t- 穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。\n\t- 要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。\t\t\n\n3. **已经push到远程仓库**\n\t```\n\tgit revert HEAD                     //撤销最近一次提交\n\tgit revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始\n\tgit revert 0ffaacc                  //撤销0ffaacc这次提交\n\t```\n\t**小结：**\n\t- revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交\t\t\n\t- 使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的\t\t\n\t- 使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。\t\n\t- 如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.\n\n## 总结\n```\t\ngit checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录\ngit reset commitId\t\t\t//回退工作区文件，版本号会回退\ngit revert commitId\t\t\t//回退远程仓库，会产生新的版本号\n```\n  \t\t\t\n\t\t\t\t\n\n\n\n","slug":"Git操作说明/Git撤销操作说明","published":1,"updated":"2017-06-07T08:38:17.248Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg218000114vesv4jrsp0","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"本文将记录Git使用过程中回滚文件的操作说明。\"><a href=\"#本文将记录Git使用过程中回滚文件的操作说明。\" class=\"headerlink\" title=\"本文将记录Git使用过程中回滚文件的操作说明。\"></a>本文将记录Git使用过程中回滚文件的操作说明。</h2><h2 id=\"情况假设\"><a href=\"#情况假设\" class=\"headerlink\" title=\"情况假设\"></a>情况假设</h2><ol>\n<li>改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.</li>\n<li>改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</li>\n</ol>\n<p><strong>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</strong></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><p><strong>没有commit到本地仓库</strong></p>\n<pre><code>git checkout fileName\n</code></pre><p> 命令执行过后，文件会恢复到上次commit后的内容</p>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>git checkout file1 （回滚单个文件）</li>\n<li>git checkout file1 file2 … fileN （一次回滚多个文件，中间用空格隔开即可）</li>\n<li>git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）</li>\n</ul>\n</li>\n<li><p><strong>已经commit到本地仓库</strong></p>\n<ol>\n<li>查看提交记录<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg\" alt=\"\"></li>\n<li><p>执行回滚操作</p>\n<ul>\n<li>命令说明  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset [--soft | --mixed | --hard]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>--soft         </p>\n<pre><code>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>-- mixed</p>\n<pre><code>会保留源码,只是将git commit和index 信息回退到了某个版本.\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset 默认是 --mixed 模式 </div><div class=\"line\">git reset --mixed  等价于  git reset</div></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>--hard         </p>\n<pre><code>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容</strong></p>\n</li>\n</ol>\n<p><strong>小结：</strong>    </p>\n</li>\n</ol>\n<ul>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</li>\n<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。        </li>\n</ul>\n</li>\n<li><p><strong>已经push到远程仓库</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git revert HEAD                     //撤销最近一次提交</div><div class=\"line\">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</div><div class=\"line\">git revert 0ffaacc                  //撤销0ffaacc这次提交</div></pre></td></tr></table></figure>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交        </li>\n<li>使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的        </li>\n<li>使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。    </li>\n<li>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录</div><div class=\"line\">git reset commitId\t\t\t//回退工作区文件，版本号会回退</div><div class=\"line\">git revert commitId\t\t\t//回退远程仓库，会产生新的版本号</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffwerjv3qyj20hy0b4jrr.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"本文将记录Git使用过程中回滚文件的操作说明。\"><a href=\"#本文将记录Git使用过程中回滚文件的操作说明。\" class=\"headerlink\" title=\"本文将记录Git使用过程中回滚文件的操作说明。\"></a>本文将记录Git使用过程中回滚文件的操作说明。</h2><h2 id=\"情况假设\"><a href=\"#情况假设\" class=\"headerlink\" title=\"情况假设\"></a>情况假设</h2><ol>\n<li>改完代码匆忙提交,上线发现有问题,怎么办? 赶紧回滚.</li>\n<li>改完代码测试也没有问题,但是上线发现你的修改影响了之前运行正常的代码报错,必须回滚.</li>\n</ol>\n<p><strong>这些开发中很常见的问题,所以git的取消提交,回退甚至返回上一版本都是特别重要的.</strong></p>\n<h2 id=\"解决方案\"><a href=\"#解决方案\" class=\"headerlink\" title=\"解决方案\"></a>解决方案</h2><ol>\n<li><p><strong>没有commit到本地仓库</strong></p>\n<pre><code>git checkout fileName\n</code></pre><p> 命令执行过后，文件会恢复到上次commit后的内容</p>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>git checkout file1 （回滚单个文件）</li>\n<li>git checkout file1 file2 … fileN （一次回滚多个文件，中间用空格隔开即可）</li>\n<li>git checkout . （直接回滚当前目录一下的所有working tree内的修改，会递归扫描当前目录下的所有子目录）</li>\n</ul>\n</li>\n<li><p><strong>已经commit到本地仓库</strong></p>\n<ol>\n<li>查看提交记录<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpbxiuph0j20b102vq2w.jpg\" alt=\"\"></li>\n<li><p>执行回滚操作</p>\n<ul>\n<li>命令说明  <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset [--soft | --mixed | --hard]</div></pre></td></tr></table></figure>\n</li>\n</ul>\n<ol>\n<li><p>--soft         </p>\n<pre><code>保留源码,只回退到commit 信息到某个版本.不涉及index的回退,如果还需要提交,直接commit即可.\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpc6lxk5yj20gz0az75b.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件已经处于暂存区，只需要执行commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>-- mixed</p>\n<pre><code>会保留源码,只是将git commit和index 信息回退到了某个版本.\n</code></pre> <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">git reset 默认是 --mixed 模式 </div><div class=\"line\">git reset --mixed  等价于  git reset</div></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpci3ohgoj20hi04iq2y.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件不在暂存区，还需要执行add、commit命令，就可提交到工作区</strong></p>\n</li>\n<li><p>--hard         </p>\n<pre><code>源码也会回退到某个版本,commit和index 都回回退到某个版本.(注意,这种方式是改变本地代码仓库源码)\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffpcod2n0bj209k03q744.jpg\" alt=\"\"></p>\n<p><strong>本地仓库版本已经回退到选择的版本号,该文件同时也恢复到该版本号的内容</strong></p>\n</li>\n</ol>\n<p><strong>小结：</strong>    </p>\n</li>\n</ol>\n<ul>\n<li>HEAD指向的版本就是当前版本，因此，Git允许我们在版本的历史之间穿梭，使用命令git reset –hard commit_id。</li>\n<li>穿梭前，用git log可以查看提交历史，以便确定要回退到哪个版本。</li>\n<li>要重返未来，用git reflog查看命令历史，以便确定要回到未来的哪个版本。        </li>\n</ul>\n</li>\n<li><p><strong>已经push到远程仓库</strong></p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git revert HEAD                     //撤销最近一次提交</div><div class=\"line\">git revert HEAD~1                   //撤销上上次的提交，注意：数字从0开始</div><div class=\"line\">git revert 0ffaacc                  //撤销0ffaacc这次提交</div></pre></td></tr></table></figure>\n<p> <strong>小结：</strong></p>\n<ul>\n<li>revert 是撤销一次提交，所以后面的commit id是你需要回滚到的版本的前一次提交        </li>\n<li>使用revert HEAD是撤销最近的一次提交，如果你最近一次提交是用revert命令产生的，那么你再执行一次，就相当于撤销了上次的撤销操作，换句话说，你连续执行两次revert HEAD命令，就跟没执行是一样的        </li>\n<li>使用revert HEAD~1 表示撤销最近2次提交，这个数字是从0开始的，如果你之前撤销过产生了commi id，那么也会计算在内的。    </li>\n<li>如果使用 revert 撤销的不是最近一次提交，那么一定会有代码冲突，需要你合并代码，合并代码只需要把当前的代码全部去掉，保留之前版本的代码就可以了.</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">git checkout file  \t\t\t//回退没有commit的文件，多个文件以空格隔开，本目录用.表示,会递归回退本级目录以及所有子目录</div><div class=\"line\">git reset commitId\t\t\t//回退工作区文件，版本号会回退</div><div class=\"line\">git revert commitId\t\t\t//回退远程仓库，会产生新的版本号</div></pre></td></tr></table></figure>\n"},{"title":"多模块工程的打包命令","date":"2017-05-17T02:15:02.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg)\n</p>\n## 命令：\n```java\n-am --also-make 同时构建所列模块的依赖模块；\n\n-amd -also-make-dependents 同时构建依赖于所列模块的模块；\n\n-pl --projects <arg> 构建制定的模块，模块间用逗号分隔；\n\n-rf -resume-from <arg> 从指定的模块恢复反应堆。\n```\n\n看英文的更助于理解：\n```\n-am,--also-make\t\n \tIf project list is specified, also build projects required by the list\n\n-amd,--also-make-dependents\t\n\tIf project list is specified, also build projects that depend on projects on the list\n\n-pl,--projects <arg>\t\n\tComma-delimited list of specified reactor projects to build instead of all projects.\n\tA project can be specified by [groupId]:\t\n \t\tartifactId or by its relative path.\n\n-rf,--resume-frome <arg>\n \tResume reactor from specified project\n```\n## 实例\n```\nmvn clean install package -pl A -am\n```\n\n上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。\n","source":"_posts/Maven/多模块工程的打包.md","raw":"title: 多模块工程的打包命令\ndate: 2017-05-17 10:15:02\ncategories: [Maven]\ntags: [Maven]\n\n------------\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg)\n</p>\n## 命令：\n```java\n-am --also-make 同时构建所列模块的依赖模块；\n\n-amd -also-make-dependents 同时构建依赖于所列模块的模块；\n\n-pl --projects <arg> 构建制定的模块，模块间用逗号分隔；\n\n-rf -resume-from <arg> 从指定的模块恢复反应堆。\n```\n\n看英文的更助于理解：\n```\n-am,--also-make\t\n \tIf project list is specified, also build projects required by the list\n\n-amd,--also-make-dependents\t\n\tIf project list is specified, also build projects that depend on projects on the list\n\n-pl,--projects <arg>\t\n\tComma-delimited list of specified reactor projects to build instead of all projects.\n\tA project can be specified by [groupId]:\t\n \t\tartifactId or by its relative path.\n\n-rf,--resume-frome <arg>\n \tResume reactor from specified project\n```\n## 实例\n```\nmvn clean install package -pl A -am\n```\n\n上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。\n","slug":"Maven/多模块工程的打包","published":1,"updated":"2017-06-07T08:38:34.963Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21b000214ve1tj1i0qm","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"命令：\"><a href=\"#命令：\" class=\"headerlink\" title=\"命令：\"></a>命令：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-am --also-make 同时构建所列模块的依赖模块；</div><div class=\"line\"></div><div class=\"line\">-amd -also-make-dependents 同时构建依赖于所列模块的模块；</div><div class=\"line\"></div><div class=\"line\">-pl --projects &lt;arg&gt; 构建制定的模块，模块间用逗号分隔；</div><div class=\"line\"></div><div class=\"line\">-rf -resume-from &lt;arg&gt; 从指定的模块恢复反应堆。</div></pre></td></tr></table></figure>\n<p>看英文的更助于理解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-am,--also-make\t</div><div class=\"line\"> \tIf project list is specified, also build projects required by the list</div><div class=\"line\"></div><div class=\"line\">-amd,--also-make-dependents\t</div><div class=\"line\">\tIf project list is specified, also build projects that depend on projects on the list</div><div class=\"line\"></div><div class=\"line\">-pl,--projects &lt;arg&gt;\t</div><div class=\"line\">\tComma-delimited list of specified reactor projects to build instead of all projects.</div><div class=\"line\">\tA project can be specified by [groupId]:\t</div><div class=\"line\"> \t\tartifactId or by its relative path.</div><div class=\"line\"></div><div class=\"line\">-rf,--resume-frome &lt;arg&gt;</div><div class=\"line\"> \tResume reactor from specified project</div></pre></td></tr></table></figure></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean install package -pl A -am</div></pre></td></tr></table></figure>\n<p>上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。</p>\n","excerpt":"","more":"<p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvgc7tv1j209g02egll.jpg\" alt=\"\"><br></p></p>\n<h2 id=\"命令：\"><a href=\"#命令：\" class=\"headerlink\" title=\"命令：\"></a>命令：</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">-am --also-make 同时构建所列模块的依赖模块；</div><div class=\"line\"></div><div class=\"line\">-amd -also-make-dependents 同时构建依赖于所列模块的模块；</div><div class=\"line\"></div><div class=\"line\">-pl --projects &lt;arg&gt; 构建制定的模块，模块间用逗号分隔；</div><div class=\"line\"></div><div class=\"line\">-rf -resume-from &lt;arg&gt; 从指定的模块恢复反应堆。</div></pre></td></tr></table></figure>\n<p>看英文的更助于理解：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">-am,--also-make\t</div><div class=\"line\"> \tIf project list is specified, also build projects required by the list</div><div class=\"line\"></div><div class=\"line\">-amd,--also-make-dependents\t</div><div class=\"line\">\tIf project list is specified, also build projects that depend on projects on the list</div><div class=\"line\"></div><div class=\"line\">-pl,--projects &lt;arg&gt;\t</div><div class=\"line\">\tComma-delimited list of specified reactor projects to build instead of all projects.</div><div class=\"line\">\tA project can be specified by [groupId]:\t</div><div class=\"line\"> \t\tartifactId or by its relative path.</div><div class=\"line\"></div><div class=\"line\">-rf,--resume-frome &lt;arg&gt;</div><div class=\"line\"> \tResume reactor from specified project</div></pre></td></tr></table></figure></p>\n<h2 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mvn clean install package -pl A -am</div></pre></td></tr></table></figure>\n<p>上述命令的意思是指定构建Module A, 同时依据依赖树的路径，构建A的依赖（无论是直接还是间接的）。</p>\n"},{"title":"Mysql数据库软件安装与配置","date":"2017-04-19T02:25:45.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n## centos7下快速安装mysql\n\n CentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载\n\n ```shell\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n ```\n\n​\n\n## 重启mysql服务\n\n```shell\nsystemctl start mysqld\n```\n\n​\n\n## 设置root用户密码\n\n​\n\n* 连接mysql(初次安装mysql，root默认无密码)\n\n```shell\nmysql -uroot\n```\n\n* 设置root用户密码为root\n\n```shell\nset password for ‘root’@‘localhost’ = password('root');\n```\n\n* 远程连接授权\n\n```shell\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;\nFLUSH   PRIVILEGES;\n```","source":"_posts/Mysql/Mysql数据库软件安装与配置.md","raw":"---\ntitle: Mysql数据库软件安装与配置\ndate: 2017-04-19 10:25:45\ntags: [Mysql]\n---\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n## centos7下快速安装mysql\n\n CentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载\n\n ```shell\nwget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm\nrpm -ivh mysql-community-release-el7-5.noarch.rpm\nyum install mysql-community-server\n ```\n\n​\n\n## 重启mysql服务\n\n```shell\nsystemctl start mysqld\n```\n\n​\n\n## 设置root用户密码\n\n​\n\n* 连接mysql(初次安装mysql，root默认无密码)\n\n```shell\nmysql -uroot\n```\n\n* 设置root用户密码为root\n\n```shell\nset password for ‘root’@‘localhost’ = password('root');\n```\n\n* 远程连接授权\n\n```shell\nGRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY 'root' WITH GRANT OPTION;\nFLUSH   PRIVILEGES;\n```","slug":"Mysql/Mysql数据库软件安装与配置","published":1,"updated":"2017-06-07T08:39:14.918Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21g000514vebuphthrz","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><p></p>\n<h2 id=\"centos7下快速安装mysql\"><a href=\"#centos7下快速安装mysql\" class=\"headerlink\" title=\"centos7下快速安装mysql\"></a>centos7下快速安装mysql</h2><p> CentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class=\"line\">yum install mysql-community-server</div></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start mysqld</div></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"设置root用户密码\"><a href=\"#设置root用户密码\" class=\"headerlink\" title=\"设置root用户密码\"></a>设置root用户密码</h2><p>​</p>\n<ul>\n<li>连接mysql(初次安装mysql，root默认无密码)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot</div></pre></td></tr></table></figure>\n<ul>\n<li>设置root用户密码为root</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">set password for ‘root’@‘localhost’ = password(&apos;root&apos;);</div></pre></td></tr></table></figure>\n<ul>\n<li>远程连接授权</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div><div class=\"line\">FLUSH   PRIVILEGES;</div></pre></td></tr></table></figure>","excerpt":"","more":"<p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p></p>\n<h2 id=\"centos7下快速安装mysql\"><a href=\"#centos7下快速安装mysql\" class=\"headerlink\" title=\"centos7下快速安装mysql\"></a>centos7下快速安装mysql</h2><p> CentOS 7的yum源中貌似没有正常安装MySQL时的mysql-sever文件，需要去官网上下载</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">wget http://dev.mysql.com/get/mysql-community-release-el7-5.noarch.rpm</div><div class=\"line\">rpm -ivh mysql-community-release-el7-5.noarch.rpm</div><div class=\"line\">yum install mysql-community-server</div></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"重启mysql服务\"><a href=\"#重启mysql服务\" class=\"headerlink\" title=\"重启mysql服务\"></a>重启mysql服务</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start mysqld</div></pre></td></tr></table></figure>\n<p>​</p>\n<h2 id=\"设置root用户密码\"><a href=\"#设置root用户密码\" class=\"headerlink\" title=\"设置root用户密码\"></a>设置root用户密码</h2><p>​</p>\n<ul>\n<li>连接mysql(初次安装mysql，root默认无密码)</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot</div></pre></td></tr></table></figure>\n<ul>\n<li>设置root用户密码为root</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">set password for ‘root’@‘localhost’ = password(&apos;root&apos;);</div></pre></td></tr></table></figure>\n<ul>\n<li>远程连接授权</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;root&apos; WITH GRANT OPTION;</div><div class=\"line\">FLUSH   PRIVILEGES;</div></pre></td></tr></table></figure>"},{"title":"resilio sync共享工具","date":"2017-02-06T06:15:02.000Z","_content":"\n当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。\n\n不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：\n\n* 对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；\n* 容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；\n* 影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；\n* 安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。\n\n[**Resilio Sync**](https://www.resilio.com)，原名：BitTorrent Sync，\n采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。\n\n资源网站：[http://wherebt.com/](http://wherebt.com/)\n\n# 使用介绍\n\n## 共享文件\n1. 添加分享文件夹\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2)\n  **分享文件夹有三种**：\n  * 标准文件夹\n  * 高级文件夹\n  * 加密文件夹\n\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n\n> 经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。\n\n2. 设置共享文件夹属性\n * 普通文件夹属性：\n\n      + 链接分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6)\n      + 二维码分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp)\n * 加密文件夹属性：\n    ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy)\n\n## 下载文件\n1. 点击“输入秘钥或链接”\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n2. 输入相应秘钥或链接\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi)\n\n\n​\t\n","source":"_posts/共享工具/sync.md","raw":"---\ntitle: resilio sync共享工具\ndate: 2017-02-06 14:15:02\ntags: [工具]\n---\n\n当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。\n\n不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：\n\n* 对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；\n* 容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；\n* 影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；\n* 安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。\n\n[**Resilio Sync**](https://www.resilio.com)，原名：BitTorrent Sync，\n采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。\n\n资源网站：[http://wherebt.com/](http://wherebt.com/)\n\n# 使用介绍\n\n## 共享文件\n1. 添加分享文件夹\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2)\n  **分享文件夹有三种**：\n  * 标准文件夹\n  * 高级文件夹\n  * 加密文件夹\n\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n\n> 经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。\n\n2. 设置共享文件夹属性\n * 普通文件夹属性：\n\n      + 链接分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6)\n      + 二维码分享\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp)\n * 加密文件夹属性：\n    ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy)\n\n## 下载文件\n1. 点击“输入秘钥或链接”\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q)\n2. 输入相应秘钥或链接\n  ![](http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi)\n\n\n​\t\n","slug":"共享工具/sync","published":1,"updated":"2017-04-19T03:39:03.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21j000614verpupn5ol","content":"<p>当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。</p>\n<p>不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：</p>\n<ul>\n<li>对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；</li>\n<li>容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；</li>\n<li>影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；</li>\n<li>安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。</li>\n</ul>\n<p><a href=\"https://www.resilio.com\" target=\"_blank\" rel=\"external\"><strong>Resilio Sync</strong></a>，原名：BitTorrent Sync，<br>采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。</p>\n<p>资源网站：<a href=\"http://wherebt.com/\" target=\"_blank\" rel=\"external\">http://wherebt.com/</a></p>\n<h1 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h1><h2 id=\"共享文件\"><a href=\"#共享文件\" class=\"headerlink\" title=\"共享文件\"></a>共享文件</h2><ol>\n<li><p>添加分享文件夹<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2\" alt=\"\"><br><strong>分享文件夹有三种</strong>：</p>\n<ul>\n<li>标准文件夹</li>\n<li>高级文件夹</li>\n<li>加密文件夹</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p>经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。</p>\n</blockquote>\n<ol>\n<li><p>设置共享文件夹属性</p>\n<ul>\n<li><p>普通文件夹属性：</p>\n<ul>\n<li>链接分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6\" alt=\"\"></li>\n<li>二维码分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp\" alt=\"\"></li>\n</ul>\n</li>\n<li>加密文件夹属性：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h2><ol>\n<li>点击“输入秘钥或链接”<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></li>\n<li>输入相应秘钥或链接<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi\" alt=\"\"></li>\n</ol>\n<p>​    </p>\n","excerpt":"","more":"<p>当自己需要多设备同步或与同事需要频繁共享文件时，QQ 或微信的文件传输相对是不够用的，使用 Dropbox 或百度云这样的网盘服务，来保持文件始终最新会是更省事的方法。</p>\n<p>不过，通过这些网盘传文件，基本都需要把文件上传到服务器，由此会产生这几个问题：</p>\n<ul>\n<li>对网络环境依赖较高。你需要先把文件上传到服务器，之后再由服务器分发到其它设备上，即使在局域网下，上传下载速度仍取决于网速；</li>\n<li>容量和传输速度受限。网盘都会有空间大小限制，如果达到上限，只能付费扩容；国内的百度云更是会对传输速度进行限制；</li>\n<li>影响文档结构。这些服务会在设备上创建一个文件夹，且只会对该文件夹内的内容进行同步，如果你习惯整理文档，这种同步方式势必会影响你的文档结构；</li>\n<li>安全问题。这也是很多人最关心的一点，国内网盘隐私保护没保障，还有随时关停的风险；国外大厂虽值得信赖，但因访问困难，也不适合所有人。</li>\n</ul>\n<p><a href=\"https://www.resilio.com\"><strong>Resilio Sync</strong></a>，原名：BitTorrent Sync，<br>采用了不一样的解决方法：不需要把文件上传到云端服务器，而是通过 P2P 的方式，直接将文件从你的设备传到对方设备上，它不限速、不限文件大小、不需要注册账号。</p>\n<p>资源网站：<a href=\"http://wherebt.com/\">http://wherebt.com/</a></p>\n<h1 id=\"使用介绍\"><a href=\"#使用介绍\" class=\"headerlink\" title=\"使用介绍\"></a>使用介绍</h1><h2 id=\"共享文件\"><a href=\"#共享文件\" class=\"headerlink\" title=\"共享文件\"></a>共享文件</h2><ol>\n<li><p>添加分享文件夹<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsbkwu13j20l8077js2\" alt=\"\"><br><strong>分享文件夹有三种</strong>：</p>\n<ul>\n<li>标准文件夹</li>\n<li>高级文件夹</li>\n<li>加密文件夹</li>\n</ul>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></p>\n</li>\n</ol>\n<blockquote>\n<p>经过测试，只有加密文件夹可以通过秘钥分享，其他只能通过连接或者二维码的方式分享。</p>\n</blockquote>\n<ol>\n<li><p>设置共享文件夹属性</p>\n<ul>\n<li><p>普通文件夹属性：</p>\n<ul>\n<li>链接分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrmc303bj20le0htdh6\" alt=\"\"></li>\n<li>二维码分享<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsejx39aj20le0htwfp\" alt=\"\"></li>\n</ul>\n</li>\n<li>加密文件夹属性：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsi2w7mfj20le0htwfy\" alt=\"\"></li>\n</ul>\n</li>\n</ol>\n<h2 id=\"下载文件\"><a href=\"#下载文件\" class=\"headerlink\" title=\"下载文件\"></a>下载文件</h2><ol>\n<li>点击“输入秘钥或链接”<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgrygzsz6j20le0htq4q\" alt=\"\"></li>\n<li>输入相应秘钥或链接<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1fcgsko7ehtj20le0ht3zi\" alt=\"\"></li>\n</ol>\n<p>​    </p>\n"},{"title":"CentOS挂载硬盘操作说明","date":"2017-05-25T08:15:10.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg)\n</p>\n\n在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。\n\n而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted & GPT 磁盘成为了绝佳的搭配。\n## 查看磁盘信息 \n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg)\n\n从图可以看出 **/dev/sdb**这一块硬盘还没有被挂载。\n\n## 分区操作\n### 2T以下容量的硬盘（血的教训）\n```\nfdisk /dev/sdb\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg)\n\n对**/dev/sdb**这一块硬盘进行分区操作\n\n1. 进入fdisk命令后，输入**m**查看操作提示：\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg)\n\n2. 输入**n**,进入分区操作\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg)\n\n3. 选择分区类型,默认为主分区，输入**p**，或者回车；\n```    \np: 分为主分区\ne: 分为逻辑分区\n```\n4. 选择分区数，分区数在[1-4]之间，默认为：**1**,回车选择默认；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg)\n\n5. 选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg)\n6. 选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg)\n7. 写入分区，输入**w**,等待分区操作结束\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg)\n8. 分区操作结束。\n\n### 2T以上容量的硬盘\n1. 首先类似**fdisk**一样，先选择要分区的硬盘，此处为**/dev/sdb**：\n```\n[root@10.10.90.97 ~]# parted /dev/sdb\nGNU Parted 1.8.1\nUsing /dev/sdb\nWelcome to GNU Parted! Type 'help' to view a list of commands.\n```\n2. 选择了**/dev/sdb**作为我们操作的磁盘，接下来需要创建一个分区表(在**parted**中可以使用**help**命令打印帮助信息)：\n```\n(parted) mklabel\nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?\nYes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes\nNew disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt\n```\n3. 创建好分区表以后，接下来就可以进行分区操作了，执行**mkpart**命令，分别输入分区名称，文件系统和分区的起止位置\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n```\n4. 分好区后可以使用**print**命令打印分区信息，下面是一个**print**的样例\n```\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n```\n5. 如果分区错了，可以使用**rm**命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果\n```\n(parted)rm 1 #rm后面使用分区的号码\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n```\n6. 按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n(parted) mkpart\nPartition name? []? dp2\nFile system type? [ext2]? ext3\nStart? 500GB\nEnd? 2199GB\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n2 500GB 2199GB 1699GB dp2\n```\n7. 由于**parted**内建的**mkfs**还不够完善，所以完成以后我们可以使用**quit**命令退出**parted**并使用 系统的**mkfs**命令对分区进行格式化了，此时如果使用**fdisk -l**命令打印分区表会出现警告信息，这是正常的\n```\n[root@10.10.90.97 ~]# fdisk -l\nWARNING: GPT (GUID Partition Table) detected on '/dev/sdb'! The util fdisk doesn't support GPT. Use GNU Parted.\nDisk /dev/sdb: 2199.0 GB, 2199022206976 bytes\n255 heads, 63 sectors/track, 267349 cylinders\nUnits = cylinders of 16065 * 512 = 8225280 bytes\nDevice Boot Start End Blocks Id System\n/dev/sdb1 1 267350 2147482623+ ee EFI GPT\n```\n\n## 格式化分区\n1. 查看磁盘信息\n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg)\n从图可以看出，刚才的分区操作成功，新的分区名为**/dev/sdb1**\n2. 格式化分区\n```\nmkfs -t ext3 -c /dev/sdb1\n```\n上面这条命令执行速度比较慢，如果想象**Windows**的**快速格式化**操作的话，可以使用下面的命令：\n```\nmkfs ext3  -T largefile /dev/sdb1\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg)\n3. 格式化完毕！\n\n## 挂载分区\n1. 挂载分区\n```\nmount /dev/sdb1 /data\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg)\n将刚才的分区挂载到根目录下的**data**目录下，\n由于**data**目录不存在，所以第一次挂载失败。\n创建目录后，再次执行挂载命令，最后挂在成功！\n2. 查看系统磁盘信息\n```\ndf -TH\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg)\n上图显示，**/dev/sdb1**2T容量成功挂载到**/data**目录上。\n\n到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。\n\n## 永久挂载\n系统的**/etc/fstab**文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。\n```\n磁盘分区    mount目录     文件格式\n/dev/sdb1  /data         ext3        defaults    0   0 \n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg)\n\n输入**wq**,完成修改保存操作。\n\n### Tips:\nfstab中，每条配置信息都分为固定的6个部分\n```\n[1]:分区路径，或者UUID\n[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。\n[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。\n[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用\"defaults\"就可以满足需要。不多说。\n[5]:fs_dump  - 该选项被\"dump\"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0\n[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统\"/\"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0\n```\n\n----------\n\n## 总结\n```\n1. 分区操作                 fdisk /dev/xxx\n2. 格式化分区                mkfs -t ext3 -c /dev/xxx\n3. 挂载分区                  mount /dev/xxx /xxx\n4. 写入系统文件              vim /etc/fstab\n```\n","source":"_posts/CentOS/CentOS挂载硬盘操作说明.md","raw":"---\ntitle: CentOS挂载硬盘操作说明\ndate: 2017-05-25 16:15:10\ntags: [挂载硬盘]\ncategories: [CentOS]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg)\n</p>\n\n在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。\n\n而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted & GPT 磁盘成为了绝佳的搭配。\n## 查看磁盘信息 \n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg)\n\n从图可以看出 **/dev/sdb**这一块硬盘还没有被挂载。\n\n## 分区操作\n### 2T以下容量的硬盘（血的教训）\n```\nfdisk /dev/sdb\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg)\n\n对**/dev/sdb**这一块硬盘进行分区操作\n\n1. 进入fdisk命令后，输入**m**查看操作提示：\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg)\n\n2. 输入**n**,进入分区操作\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg)\n\n3. 选择分区类型,默认为主分区，输入**p**，或者回车；\n```    \np: 分为主分区\ne: 分为逻辑分区\n```\n4. 选择分区数，分区数在[1-4]之间，默认为：**1**,回车选择默认；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg)\n\n5. 选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg)\n6. 选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg)\n7. 写入分区，输入**w**,等待分区操作结束\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg)\n8. 分区操作结束。\n\n### 2T以上容量的硬盘\n1. 首先类似**fdisk**一样，先选择要分区的硬盘，此处为**/dev/sdb**：\n```\n[root@10.10.90.97 ~]# parted /dev/sdb\nGNU Parted 1.8.1\nUsing /dev/sdb\nWelcome to GNU Parted! Type 'help' to view a list of commands.\n```\n2. 选择了**/dev/sdb**作为我们操作的磁盘，接下来需要创建一个分区表(在**parted**中可以使用**help**命令打印帮助信息)：\n```\n(parted) mklabel\nWarning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?\nYes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes\nNew disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt\n```\n3. 创建好分区表以后，接下来就可以进行分区操作了，执行**mkpart**命令，分别输入分区名称，文件系统和分区的起止位置\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n```\n4. 分好区后可以使用**print**命令打印分区信息，下面是一个**print**的样例\n```\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n```\n5. 如果分区错了，可以使用**rm**命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果\n```\n(parted)rm 1 #rm后面使用分区的号码\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n```\n6. 按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例\n```\n(parted) mkpart\nPartition name? []? dp1\nFile system type? [ext2]? ext3\nStart? 0\nEnd? 500GB\n(parted) mkpart\nPartition name? []? dp2\nFile system type? [ext2]? ext3\nStart? 500GB\nEnd? 2199GB\n(parted) print\nModel: VBOX HARDDISK (ide)\nDisk /dev/sdb: 2199GB\nSector size (logical/physical): 512B/512B\nPartition Table: gpt\nNumber Start End Size File system Name Flags\n1 17.4kB 500GB 500GB dp1\n2 500GB 2199GB 1699GB dp2\n```\n7. 由于**parted**内建的**mkfs**还不够完善，所以完成以后我们可以使用**quit**命令退出**parted**并使用 系统的**mkfs**命令对分区进行格式化了，此时如果使用**fdisk -l**命令打印分区表会出现警告信息，这是正常的\n```\n[root@10.10.90.97 ~]# fdisk -l\nWARNING: GPT (GUID Partition Table) detected on '/dev/sdb'! The util fdisk doesn't support GPT. Use GNU Parted.\nDisk /dev/sdb: 2199.0 GB, 2199022206976 bytes\n255 heads, 63 sectors/track, 267349 cylinders\nUnits = cylinders of 16065 * 512 = 8225280 bytes\nDevice Boot Start End Blocks Id System\n/dev/sdb1 1 267350 2147482623+ ee EFI GPT\n```\n\n## 格式化分区\n1. 查看磁盘信息\n```\nfdisk -l\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg)\n从图可以看出，刚才的分区操作成功，新的分区名为**/dev/sdb1**\n2. 格式化分区\n```\nmkfs -t ext3 -c /dev/sdb1\n```\n上面这条命令执行速度比较慢，如果想象**Windows**的**快速格式化**操作的话，可以使用下面的命令：\n```\nmkfs ext3  -T largefile /dev/sdb1\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg)\n3. 格式化完毕！\n\n## 挂载分区\n1. 挂载分区\n```\nmount /dev/sdb1 /data\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg)\n将刚才的分区挂载到根目录下的**data**目录下，\n由于**data**目录不存在，所以第一次挂载失败。\n创建目录后，再次执行挂载命令，最后挂在成功！\n2. 查看系统磁盘信息\n```\ndf -TH\n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg)\n上图显示，**/dev/sdb1**2T容量成功挂载到**/data**目录上。\n\n到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。\n\n## 永久挂载\n系统的**/etc/fstab**文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。\n```\n磁盘分区    mount目录     文件格式\n/dev/sdb1  /data         ext3        defaults    0   0 \n```\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg)\n\n输入**wq**,完成修改保存操作。\n\n### Tips:\nfstab中，每条配置信息都分为固定的6个部分\n```\n[1]:分区路径，或者UUID\n[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。\n[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。\n[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用\"defaults\"就可以满足需要。不多说。\n[5]:fs_dump  - 该选项被\"dump\"命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0\n[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统\"/\"对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0\n```\n\n----------\n\n## 总结\n```\n1. 分区操作                 fdisk /dev/xxx\n2. 格式化分区                mkfs -t ext3 -c /dev/xxx\n3. 挂载分区                  mount /dev/xxx /xxx\n4. 写入系统文件              vim /etc/fstab\n```\n","slug":"CentOS/CentOS挂载硬盘操作说明","published":1,"updated":"2017-06-07T08:37:07.894Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21k000714ve5g5uoxwi","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg\" alt=\"\"><br></p>\n\n<p>在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。</p>\n<p>而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted &amp; GPT 磁盘成为了绝佳的搭配。</p>\n<h2 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk -l</div></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg\" alt=\"\"></p>\n<p>从图可以看出 <strong>/dev/sdb</strong>这一块硬盘还没有被挂载。</p>\n<h2 id=\"分区操作\"><a href=\"#分区操作\" class=\"headerlink\" title=\"分区操作\"></a>分区操作</h2><h3 id=\"2T以下容量的硬盘（血的教训）\"><a href=\"#2T以下容量的硬盘（血的教训）\" class=\"headerlink\" title=\"2T以下容量的硬盘（血的教训）\"></a>2T以下容量的硬盘（血的教训）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk /dev/sdb</div></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg\" alt=\"\"></p>\n<p>对<strong>/dev/sdb</strong>这一块硬盘进行分区操作</p>\n<ol>\n<li><p>进入fdisk命令后，输入<strong>m</strong>查看操作提示：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg\" alt=\"\"></p>\n</li>\n<li><p>输入<strong>n</strong>,进入分区操作<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择分区类型,默认为主分区，输入<strong>p</strong>，或者回车；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">p: 分为主分区</div><div class=\"line\">e: 分为逻辑分区</div></pre></td></tr></table></figure>\n</li>\n<li><p>选择分区数，分区数在[1-4]之间，默认为：<strong>1</strong>,回车选择默认；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg\" alt=\"\"></p>\n</li>\n<li>选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg\" alt=\"\"></li>\n<li>写入分区，输入<strong>w</strong>,等待分区操作结束<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg\" alt=\"\"></li>\n<li>分区操作结束。</li>\n</ol>\n<h3 id=\"2T以上容量的硬盘\"><a href=\"#2T以上容量的硬盘\" class=\"headerlink\" title=\"2T以上容量的硬盘\"></a>2T以上容量的硬盘</h3><ol>\n<li><p>首先类似<strong>fdisk</strong>一样，先选择要分区的硬盘，此处为<strong>/dev/sdb</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@10.10.90.97 ~]# parted /dev/sdb</div><div class=\"line\">GNU Parted 1.8.1</div><div class=\"line\">Using /dev/sdb</div><div class=\"line\">Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands.</div></pre></td></tr></table></figure>\n</li>\n<li><p>选择了<strong>/dev/sdb</strong>作为我们操作的磁盘，接下来需要创建一个分区表(在<strong>parted</strong>中可以使用<strong>help</strong>命令打印帮助信息)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) mklabel</div><div class=\"line\">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?</div><div class=\"line\">Yes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes</div><div class=\"line\">New disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建好分区表以后，接下来就可以进行分区操作了，执行<strong>mkpart</strong>命令，分别输入分区名称，文件系统和分区的起止位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) mkpart</div><div class=\"line\">Partition name? []? dp1</div><div class=\"line\">File system type? [ext2]? ext3</div><div class=\"line\">Start? 0</div><div class=\"line\">End? 500GB</div></pre></td></tr></table></figure>\n</li>\n<li><p>分好区后可以使用<strong>print</strong>命令打印分区信息，下面是一个<strong>print</strong>的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) print</div><div class=\"line\">Model: VBOX HARDDISK (ide)</div><div class=\"line\">Disk /dev/sdb: 2199GB</div><div class=\"line\">Sector size (logical/physical): 512B/512B</div><div class=\"line\">Partition Table: gpt</div><div class=\"line\">Number Start End Size File system Name Flags</div><div class=\"line\">1 17.4kB 500GB 500GB dp1</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果分区错了，可以使用<strong>rm</strong>命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted)rm 1 #rm后面使用分区的号码</div><div class=\"line\">(parted) print</div><div class=\"line\">Model: VBOX HARDDISK (ide)</div><div class=\"line\">Disk /dev/sdb: 2199GB</div><div class=\"line\">Sector size (logical/physical): 512B/512B</div><div class=\"line\">Partition Table: gpt</div><div class=\"line\">Number Start End Size File system Name Flags</div></pre></td></tr></table></figure>\n</li>\n<li><p>按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) mkpart</div><div class=\"line\">Partition name? []? dp1</div><div class=\"line\">File system type? [ext2]? ext3</div><div class=\"line\">Start? 0</div><div class=\"line\">End? 500GB</div><div class=\"line\">(parted) mkpart</div><div class=\"line\">Partition name? []? dp2</div><div class=\"line\">File system type? [ext2]? ext3</div><div class=\"line\">Start? 500GB</div><div class=\"line\">End? 2199GB</div><div class=\"line\">(parted) print</div><div class=\"line\">Model: VBOX HARDDISK (ide)</div><div class=\"line\">Disk /dev/sdb: 2199GB</div><div class=\"line\">Sector size (logical/physical): 512B/512B</div><div class=\"line\">Partition Table: gpt</div><div class=\"line\">Number Start End Size File system Name Flags</div><div class=\"line\">1 17.4kB 500GB 500GB dp1</div><div class=\"line\">2 500GB 2199GB 1699GB dp2</div></pre></td></tr></table></figure>\n</li>\n<li><p>由于<strong>parted</strong>内建的<strong>mkfs</strong>还不够完善，所以完成以后我们可以使用<strong>quit</strong>命令退出<strong>parted</strong>并使用 系统的<strong>mkfs</strong>命令对分区进行格式化了，此时如果使用<strong>fdisk -l</strong>命令打印分区表会出现警告信息，这是正常的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@10.10.90.97 ~]# fdisk -l</div><div class=\"line\">WARNING: GPT (GUID Partition Table) detected on &apos;/dev/sdb&apos;! The util fdisk doesn&apos;t support GPT. Use GNU Parted.</div><div class=\"line\">Disk /dev/sdb: 2199.0 GB, 2199022206976 bytes</div><div class=\"line\">255 heads, 63 sectors/track, 267349 cylinders</div><div class=\"line\">Units = cylinders of 16065 * 512 = 8225280 bytes</div><div class=\"line\">Device Boot Start End Blocks Id System</div><div class=\"line\">/dev/sdb1 1 267350 2147482623+ ee EFI GPT</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h2><ol>\n<li>查看磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg\" alt=\"\"><br>从图可以看出，刚才的分区操作成功，新的分区名为<strong>/dev/sdb1</strong></p>\n<ol>\n<li>格式化分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkfs -t ext3 -c /dev/sdb1</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面这条命令执行速度比较慢，如果想象<strong>Windows</strong>的<strong>快速格式化</strong>操作的话，可以使用下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkfs ext3  -T largefile /dev/sdb1</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg\" alt=\"\"></p>\n<ol>\n<li>格式化完毕！</li>\n</ol>\n<h2 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h2><ol>\n<li>挂载分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount /dev/sdb1 /data</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg\" alt=\"\"><br>将刚才的分区挂载到根目录下的<strong>data</strong>目录下，<br>由于<strong>data</strong>目录不存在，所以第一次挂载失败。<br>创建目录后，再次执行挂载命令，最后挂在成功！</p>\n<ol>\n<li>查看系统磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">df -TH</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg\" alt=\"\"><br>上图显示，<strong>/dev/sdb1</strong>2T容量成功挂载到<strong>/data</strong>目录上。</p>\n<p>到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。</p>\n<h2 id=\"永久挂载\"><a href=\"#永久挂载\" class=\"headerlink\" title=\"永久挂载\"></a>永久挂载</h2><p>系统的<strong>/etc/fstab</strong>文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">磁盘分区    mount目录     文件格式</div><div class=\"line\">/dev/sdb1  /data         ext3        defaults    0   0</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg\" alt=\"\"></p>\n<p>输入<strong>wq</strong>,完成修改保存操作。</p>\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h3><p>fstab中，每条配置信息都分为固定的6个部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1]:分区路径，或者UUID</div><div class=\"line\">[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。</div><div class=\"line\">[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。</div><div class=\"line\">[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用&quot;defaults&quot;就可以满足需要。不多说。</div><div class=\"line\">[5]:fs_dump  - 该选项被&quot;dump&quot;命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0</div><div class=\"line\">[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统&quot;/&quot;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 分区操作                 fdisk /dev/xxx</div><div class=\"line\">2. 格式化分区                mkfs -t ext3 -c /dev/xxx</div><div class=\"line\">3. 挂载分区                  mount /dev/xxx /xxx</div><div class=\"line\">4. 写入系统文件              vim /etc/fstab</div></pre></td></tr></table></figure>\n","excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpsafg20j20sg0jqgmg.jpg\" alt=\"\"><br></p>\n\n<p>在 Linux 中，为磁盘分区通常使用 fdisk 和 parted 命令。通常情况下，使用 fdisk 可以满足日常的使用，但是它仅仅支持 2 TB 以下磁盘的分区，超出 2 TB 部分无法识别。</p>\n<p>而随着科技的进步，大容量硬盘已经步入我们的生活，10 TB 的 HDD、16 TB 的 SSD 也已面世，仅仅能识别 2 TB 的 fdisk 很明显无法满足需求了，于是乎，parted &amp; GPT 磁盘成为了绝佳的搭配。</p>\n<h2 id=\"查看磁盘信息\"><a href=\"#查看磁盘信息\" class=\"headerlink\" title=\"查看磁盘信息\"></a>查看磁盘信息</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk -l</div></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxojv7q0kj20hm0g5gm8.jpg\" alt=\"\"></p>\n<p>从图可以看出 <strong>/dev/sdb</strong>这一块硬盘还没有被挂载。</p>\n<h2 id=\"分区操作\"><a href=\"#分区操作\" class=\"headerlink\" title=\"分区操作\"></a>分区操作</h2><h3 id=\"2T以下容量的硬盘（血的教训）\"><a href=\"#2T以下容量的硬盘（血的教训）\" class=\"headerlink\" title=\"2T以下容量的硬盘（血的教训）\"></a>2T以下容量的硬盘（血的教训）</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk /dev/sdb</div></pre></td></tr></table></figure>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxonjnh16j20eq03ndfp.jpg\" alt=\"\"></p>\n<p>对<strong>/dev/sdb</strong>这一块硬盘进行分区操作</p>\n<ol>\n<li><p>进入fdisk命令后，输入<strong>m</strong>查看操作提示：<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoou2af5j20b709h0su.jpg\" alt=\"\"></p>\n</li>\n<li><p>输入<strong>n</strong>,进入分区操作<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxopp0oj7j20bd02i0sj.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择分区类型,默认为主分区，输入<strong>p</strong>，或者回车；</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">p: 分为主分区</div><div class=\"line\">e: 分为逻辑分区</div></pre></td></tr></table></figure>\n</li>\n<li><p>选择分区数，分区数在[1-4]之间，默认为：<strong>1</strong>,回车选择默认；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxotzy420j208e01amwx.jpg\" alt=\"\"></p>\n</li>\n<li><p>选择该分区的起始磁盘数，默认为磁盘最开始的磁盘数，若无相关要求，最好使用默认的起始数。回车选择默认数；<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxefllkj20bg00tdfl.jpg\" alt=\"\"></p>\n</li>\n<li>选择该分区结束磁盘数或者该分区容量大小，默认为磁盘全部容量。回车选择默认数（磁盘最大容量）;<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoxjveo5j20gu0120si.jpg\" alt=\"\"></li>\n<li>写入分区，输入<strong>w</strong>,等待分区操作结束<br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxoyqyb1pj20ad02b0sj.jpg\" alt=\"\"></li>\n<li>分区操作结束。</li>\n</ol>\n<h3 id=\"2T以上容量的硬盘\"><a href=\"#2T以上容量的硬盘\" class=\"headerlink\" title=\"2T以上容量的硬盘\"></a>2T以上容量的硬盘</h3><ol>\n<li><p>首先类似<strong>fdisk</strong>一样，先选择要分区的硬盘，此处为<strong>/dev/sdb</strong>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@10.10.90.97 ~]# parted /dev/sdb</div><div class=\"line\">GNU Parted 1.8.1</div><div class=\"line\">Using /dev/sdb</div><div class=\"line\">Welcome to GNU Parted! Type &apos;help&apos; to view a list of commands.</div></pre></td></tr></table></figure>\n</li>\n<li><p>选择了<strong>/dev/sdb</strong>作为我们操作的磁盘，接下来需要创建一个分区表(在<strong>parted</strong>中可以使用<strong>help</strong>命令打印帮助信息)：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) mklabel</div><div class=\"line\">Warning: The existing disk label on /dev/sdb will be destroyed and all data on this disk will be lost. Do you want to continue?</div><div class=\"line\">Yes/No?(警告用户磁盘上的数据将会被销毁，询问是否继续，我们这里是新的磁盘，输入yes后回车) yes</div><div class=\"line\">New disk label type? [msdos]? (默认为msdos形式的分区，我们要正确分区大于2TB的磁盘，应该使用gpt方式的分区表，输入gpt后回车)gpt</div></pre></td></tr></table></figure>\n</li>\n<li><p>创建好分区表以后，接下来就可以进行分区操作了，执行<strong>mkpart</strong>命令，分别输入分区名称，文件系统和分区的起止位置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) mkpart</div><div class=\"line\">Partition name? []? dp1</div><div class=\"line\">File system type? [ext2]? ext3</div><div class=\"line\">Start? 0</div><div class=\"line\">End? 500GB</div></pre></td></tr></table></figure>\n</li>\n<li><p>分好区后可以使用<strong>print</strong>命令打印分区信息，下面是一个<strong>print</strong>的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) print</div><div class=\"line\">Model: VBOX HARDDISK (ide)</div><div class=\"line\">Disk /dev/sdb: 2199GB</div><div class=\"line\">Sector size (logical/physical): 512B/512B</div><div class=\"line\">Partition Table: gpt</div><div class=\"line\">Number Start End Size File system Name Flags</div><div class=\"line\">1 17.4kB 500GB 500GB dp1</div></pre></td></tr></table></figure>\n</li>\n<li><p>如果分区错了，可以使用<strong>rm</strong>命令删除分区，比如我们要删除上面的分区，然后打印删除后的结果</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted)rm 1 #rm后面使用分区的号码</div><div class=\"line\">(parted) print</div><div class=\"line\">Model: VBOX HARDDISK (ide)</div><div class=\"line\">Disk /dev/sdb: 2199GB</div><div class=\"line\">Sector size (logical/physical): 512B/512B</div><div class=\"line\">Partition Table: gpt</div><div class=\"line\">Number Start End Size File system Name Flags</div></pre></td></tr></table></figure>\n</li>\n<li><p>按照上面的方法把整个硬盘都分好区，下面是一个分完后的样例</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div></pre></td><td class=\"code\"><pre><div class=\"line\">(parted) mkpart</div><div class=\"line\">Partition name? []? dp1</div><div class=\"line\">File system type? [ext2]? ext3</div><div class=\"line\">Start? 0</div><div class=\"line\">End? 500GB</div><div class=\"line\">(parted) mkpart</div><div class=\"line\">Partition name? []? dp2</div><div class=\"line\">File system type? [ext2]? ext3</div><div class=\"line\">Start? 500GB</div><div class=\"line\">End? 2199GB</div><div class=\"line\">(parted) print</div><div class=\"line\">Model: VBOX HARDDISK (ide)</div><div class=\"line\">Disk /dev/sdb: 2199GB</div><div class=\"line\">Sector size (logical/physical): 512B/512B</div><div class=\"line\">Partition Table: gpt</div><div class=\"line\">Number Start End Size File system Name Flags</div><div class=\"line\">1 17.4kB 500GB 500GB dp1</div><div class=\"line\">2 500GB 2199GB 1699GB dp2</div></pre></td></tr></table></figure>\n</li>\n<li><p>由于<strong>parted</strong>内建的<strong>mkfs</strong>还不够完善，所以完成以后我们可以使用<strong>quit</strong>命令退出<strong>parted</strong>并使用 系统的<strong>mkfs</strong>命令对分区进行格式化了，此时如果使用<strong>fdisk -l</strong>命令打印分区表会出现警告信息，这是正常的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div></pre></td><td class=\"code\"><pre><div class=\"line\">[root@10.10.90.97 ~]# fdisk -l</div><div class=\"line\">WARNING: GPT (GUID Partition Table) detected on &apos;/dev/sdb&apos;! The util fdisk doesn&apos;t support GPT. Use GNU Parted.</div><div class=\"line\">Disk /dev/sdb: 2199.0 GB, 2199022206976 bytes</div><div class=\"line\">255 heads, 63 sectors/track, 267349 cylinders</div><div class=\"line\">Units = cylinders of 16065 * 512 = 8225280 bytes</div><div class=\"line\">Device Boot Start End Blocks Id System</div><div class=\"line\">/dev/sdb1 1 267350 2147482623+ ee EFI GPT</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<h2 id=\"格式化分区\"><a href=\"#格式化分区\" class=\"headerlink\" title=\"格式化分区\"></a>格式化分区</h2><ol>\n<li>查看磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">fdisk -l</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp0pv7wfj20fq0gp74x.jpg\" alt=\"\"><br>从图可以看出，刚才的分区操作成功，新的分区名为<strong>/dev/sdb1</strong></p>\n<ol>\n<li>格式化分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkfs -t ext3 -c /dev/sdb1</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>上面这条命令执行速度比较慢，如果想象<strong>Windows</strong>的<strong>快速格式化</strong>操作的话，可以使用下面的命令：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mkfs ext3  -T largefile /dev/sdb1</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp6kawtuj20fz0a60sz.jpg\" alt=\"\"></p>\n<ol>\n<li>格式化完毕！</li>\n</ol>\n<h2 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区\"></a>挂载分区</h2><ol>\n<li>挂载分区<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mount /dev/sdb1 /data</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxp8g8o3lj20ab01tmwz.jpg\" alt=\"\"><br>将刚才的分区挂载到根目录下的<strong>data</strong>目录下，<br>由于<strong>data</strong>目录不存在，所以第一次挂载失败。<br>创建目录后，再次执行挂载命令，最后挂在成功！</p>\n<ol>\n<li>查看系统磁盘信息<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">df -TH</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpbab8kuj20dm04qweh.jpg\" alt=\"\"><br>上图显示，<strong>/dev/sdb1</strong>2T容量成功挂载到<strong>/data</strong>目录上。</p>\n<p>到此为此，挂载操作完美成功。但是如果系统重启后，本次挂载的磁盘就会失效。这是因为没有将挂载的信息告诉系统。</p>\n<h2 id=\"永久挂载\"><a href=\"#永久挂载\" class=\"headerlink\" title=\"永久挂载\"></a>永久挂载</h2><p>系统的<strong>/etc/fstab</strong>文件负责记录磁盘挂载信息，所以必须将本次的挂载内容写入到该文件中。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">磁盘分区    mount目录     文件格式</div><div class=\"line\">/dev/sdb1  /data         ext3        defaults    0   0</div></pre></td></tr></table></figure></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzw5fdg6yj20jq05swei.jpg\" alt=\"\"></p>\n<p>输入<strong>wq</strong>,完成修改保存操作。</p>\n<h3 id=\"Tips\"><a href=\"#Tips\" class=\"headerlink\" title=\"Tips:\"></a>Tips:</h3><p>fstab中，每条配置信息都分为固定的6个部分<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div></pre></td><td class=\"code\"><pre><div class=\"line\">[1]:分区路径，或者UUID</div><div class=\"line\">[2]:fs_file - 该字段描述希望的文件系统加载的目录点，对于swap设备，该字段为none；对于加载目录名包含空格的情况，用40来表示空格。</div><div class=\"line\">[3]:fs_type - 定义了该设备上的文件系统，一般常见的文件类型为ext4 (Linux设备的常用文件类型)、vfat(Windows系统的fat32格式)、NTFS、isoArray600等。在不确定的情况下可以使用auto。</div><div class=\"line\">[4]:fs_options - 指定加载该设备的文件系统是需要使用的特定参数选项，多个参数是由逗号分隔开来.对于大多数系统使用&quot;defaults&quot;就可以满足需要。不多说。</div><div class=\"line\">[5]:fs_dump  - 该选项被&quot;dump&quot;命令使用来检查一个文件系统应该以多快频率进行转储，若不需要转储就设置该字段为0</div><div class=\"line\">[6]:fs_pass - 该字段被fsck命令用来决定在启动时需要被扫描的文件系统的顺序，根文件系统&quot;/&quot;对应该字段的值应该为1，其他文件系统应该为2。若该文件系统无需在启动时扫描则设置该字段为0</div></pre></td></tr></table></figure></p>\n<hr>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div></pre></td><td class=\"code\"><pre><div class=\"line\">1. 分区操作                 fdisk /dev/xxx</div><div class=\"line\">2. 格式化分区                mkfs -t ext3 -c /dev/xxx</div><div class=\"line\">3. 挂载分区                  mount /dev/xxx /xxx</div><div class=\"line\">4. 写入系统文件              vim /etc/fstab</div></pre></td></tr></table></figure>\n"},{"title":"Mysql的Master-Slave主从复制配置","date":"2017-05-24T01:53:04.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n今天来说一下Mysql的主从复制配置方面的事情。\n\n手上有两台服务器，信息如下：\n\n名称         |       IP          |备注\n        -   |   -               |\n**Master**  |   192.168.0.1     | 主服务器\n**Slave**   |   192.168.0.2     | 节点服务器\n\n## Master-Slave主从配置\n\n1. **主服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[必须]启用二进制日志\nserver-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n2. **从服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[不是必须]启用二进制日志\nserver-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n3. **重启两台Mysql服务**\n```\n/etc/init.d/mysql restart\n```\n4. **在主服务器上建立账户并授权Slave**\n    1. 连接服务器\n        ```shell\n        mysql -uroot -p默认密码\n        ```\n    2. 建立账户\n        ```shell\n        GRANT REPLICATION SLAVE ON *.* to 'repl_user'@'%' identified by 'repl_user';\n        ```\n    3. 锁表操作\n        ```\n        flush tables with read lock;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg)\n    4. 查询Master的状态\n        ```shell\n        show master status;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)\n5. **配置从服务器**\n    1. 配置Master信息\n    \n            change master to\n                master_host='192.168.0.1',          //Master服务器IP\n                master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                master_log_pos=0;                   //数据库二进制日志文件开始位置\n\n    2. 检查Slave状态        \n            show slave status \\G;\n         \n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg) \n\n        **注意**： 这样标识从服务器配置成功                \n            Slave_IO_Running:Yes\n            Slave_SQL_Running:Yes           \n\n6. **解除Master的锁表状态**\n        UNLOCK TABLES;\n    \n## Master-Master主主配置\n\n上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。\n```\n    第一次的主机变为从机，\n    第一次的从机变为主机。\n```\n\nMysql配置文件如下：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\nbinlog_format = mixed                            //日志记录方式\nexpire_logs_days        = 7                      //binlog过期清理时间\nmax_binlog_size         = 100m                   //binlog每个日志文件大小    \nbinlog_cache_size       = 4m                     //binlog缓存大小   \nmax_binlog_cache_size   = 512m                   //最大binlog缓存大小  \nlog-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    \n\nreplicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句\n\nauto-increment-offset=2                          //自增主键从1开始计数 \nauto-increment-increment=2                       //自增主键每次加2\n```\n\n## 总结\n1. Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\n```\n2. 主从复制失败\n    1. 查看Master服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)  \n      \n    2. 查看Slave服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg)     \n        两个的二进制日志文件要相同，如果不同    \n        1. 重置Master服务器二进制日志文件\n                reset master; \n        2. 配置Slave服务器的Master连接信息\n                change master to\n                    master_host='192.168.0.1',          //Master服务器IP\n                    master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                    master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                    master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n\n3. 主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复\n   修改Mysql配置文件：\n    ```\n    auto-increment-offset=2                          //自增主键从1开始计数 \n    auto-increment-increment=2                       //自增主键每次加2\n    ```\n","source":"_posts/Mysql/Mysql的Master-Slave主从复制配置.md","raw":"---\ntitle: Mysql的Master-Slave主从复制配置\ndate: 2017-05-24 09:53:04\ntags: [Mysql]\ncategories: [Mysql]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg)\n</p>\n今天来说一下Mysql的主从复制配置方面的事情。\n\n手上有两台服务器，信息如下：\n\n名称         |       IP          |备注\n        -   |   -               |\n**Master**  |   192.168.0.1     | 主服务器\n**Slave**   |   192.168.0.2     | 节点服务器\n\n## Master-Slave主从配置\n\n1. **主服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[必须]启用二进制日志\nserver-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n2. **从服务器配置**\n编辑Mysql配置文件：\n** vi /usr/my.cnf**\n```shell\n[mysqld]\nlog-bin=mysql-bin   //[不是必须]启用二进制日志\nserver-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段\n```\n3. **重启两台Mysql服务**\n```\n/etc/init.d/mysql restart\n```\n4. **在主服务器上建立账户并授权Slave**\n    1. 连接服务器\n        ```shell\n        mysql -uroot -p默认密码\n        ```\n    2. 建立账户\n        ```shell\n        GRANT REPLICATION SLAVE ON *.* to 'repl_user'@'%' identified by 'repl_user';\n        ```\n    3. 锁表操作\n        ```\n        flush tables with read lock;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg)\n    4. 查询Master的状态\n        ```shell\n        show master status;\n        ```\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)\n5. **配置从服务器**\n    1. 配置Master信息\n    \n            change master to\n                master_host='192.168.0.1',          //Master服务器IP\n                master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                master_log_pos=0;                   //数据库二进制日志文件开始位置\n\n    2. 检查Slave状态        \n            show slave status \\G;\n         \n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg) \n\n        **注意**： 这样标识从服务器配置成功                \n            Slave_IO_Running:Yes\n            Slave_SQL_Running:Yes           \n\n6. **解除Master的锁表状态**\n        UNLOCK TABLES;\n    \n## Master-Master主主配置\n\n上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。\n```\n    第一次的主机变为从机，\n    第一次的从机变为主机。\n```\n\nMysql配置文件如下：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\nbinlog_format = mixed                            //日志记录方式\nexpire_logs_days        = 7                      //binlog过期清理时间\nmax_binlog_size         = 100m                   //binlog每个日志文件大小    \nbinlog_cache_size       = 4m                     //binlog缓存大小   \nmax_binlog_cache_size   = 512m                   //最大binlog缓存大小  \nlog-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    \n\nreplicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句\n\nauto-increment-offset=2                          //自增主键从1开始计数 \nauto-increment-increment=2                       //自增主键每次加2\n```\n\n## 总结\n1. Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：\n```\nserver_id = 2                                    //服务器id，在集群中此id不可重复\nlog-bin= mysql-bin                               //开启二进制日志文件\n```\n2. 主从复制失败\n    1. 查看Master服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg)  \n      \n    2. 查看Slave服务器状态\n        ![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg)     \n        两个的二进制日志文件要相同，如果不同    \n        1. 重置Master服务器二进制日志文件\n                reset master; \n        2. 配置Slave服务器的Master连接信息\n                change master to\n                    master_host='192.168.0.1',          //Master服务器IP\n                    master_user='repl_user',            //Master连接用户名，必须具备Slave权限\n                    master_password='repl_user',        //Master连接用户密码，必须具备Slave权限\n                    master_log_file='mysql-bin.000010', //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n                    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n\n3. 主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复\n   修改Mysql配置文件：\n    ```\n    auto-increment-offset=2                          //自增主键从1开始计数 \n    auto-increment-increment=2                       //自增主键每次加2\n    ```\n","slug":"Mysql/Mysql的Master-Slave主从复制配置","published":1,"updated":"2017-06-07T08:38:52.571Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21m000b14verpwkda4r","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><br>今天来说一下Mysql的主从复制配置方面的事情。<p></p>\n<p>手上有两台服务器，信息如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>IP</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Master</strong></td>\n<td>192.168.0.1</td>\n<td>主服务器</td>\n</tr>\n<tr>\n<td><strong>Slave</strong></td>\n<td>192.168.0.2</td>\n<td>节点服务器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Master-Slave主从配置\"><a href=\"#Master-Slave主从配置\" class=\"headerlink\" title=\"Master-Slave主从配置\"></a>Master-Slave主从配置</h2><ol>\n<li><p><strong>主服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin   //[必须]启用二进制日志</div><div class=\"line\">server-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin   //[不是必须]启用二进制日志</div><div class=\"line\">server-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启两台Mysql服务</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/mysql restart</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在主服务器上建立账户并授权Slave</strong></p>\n<ol>\n<li><p>连接服务器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot -p默认密码</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立账户</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT REPLICATION SLAVE ON *.* to &apos;repl_user&apos;@&apos;%&apos; identified by &apos;repl_user&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>锁表操作</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flush tables with read lock;</div></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg\" alt=\"\"></p>\n</li>\n<li><p>查询Master的状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show master status;</div></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>配置从服务器</strong></p>\n<ol>\n<li><p>配置Master信息</p>\n<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置\n</code></pre></li>\n<li><p>检查Slave状态        </p>\n<pre><code>show slave status \\G;\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"> </p>\n<p> <strong>注意</strong>： 这样标识从服务器配置成功                </p>\n<pre><code>Slave_IO_Running:Yes\nSlave_SQL_Running:Yes           \n</code></pre></li>\n</ol>\n</li>\n<li><p><strong>解除Master的锁表状态</strong></p>\n<pre><code>UNLOCK TABLES;\n</code></pre></li>\n</ol>\n<h2 id=\"Master-Master主主配置\"><a href=\"#Master-Master主主配置\" class=\"headerlink\" title=\"Master-Master主主配置\"></a>Master-Master主主配置</h2><p>上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次的主机变为从机，</div><div class=\"line\">第一次的从机变为主机。</div></pre></td></tr></table></figure></p>\n<p>Mysql配置文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</div><div class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</div><div class=\"line\">binlog_format = mixed                            //日志记录方式</div><div class=\"line\">expire_logs_days        = 7                      //binlog过期清理时间</div><div class=\"line\">max_binlog_size         = 100m                   //binlog每个日志文件大小    </div><div class=\"line\">binlog_cache_size       = 4m                     //binlog缓存大小   </div><div class=\"line\">max_binlog_cache_size   = 512m                   //最大binlog缓存大小  </div><div class=\"line\">log-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    </div><div class=\"line\"></div><div class=\"line\">replicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句</div><div class=\"line\"></div><div class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </div><div class=\"line\">auto-increment-increment=2                       //自增主键每次加2</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</div><div class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</div></pre></td></tr></table></figure>\n</li>\n<li><p>主从复制失败</p>\n<ol>\n<li><p>查看Master服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\">  </p>\n</li>\n<li><p>查看Slave服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"><br> 两个的二进制日志文件要相同，如果不同    </p>\n<ol>\n<li>重置Master服务器二进制日志文件<pre><code>reset master; \n</code></pre></li>\n<li>配置Slave服务器的Master连接信息<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n</code></pre></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复<br>修改Mysql配置文件：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </div><div class=\"line\">auto-increment-increment=2                       //自增主键每次加2</div></pre></td></tr></table></figure>\n</li>\n</ol>\n","excerpt":"","more":"<p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzvdjnuohj20d206yjrc.jpg\" alt=\"\"><br></p><br>今天来说一下Mysql的主从复制配置方面的事情。</p>\n<p>手上有两台服务器，信息如下：</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th>IP</th>\n<th>备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>Master</strong></td>\n<td>192.168.0.1</td>\n<td>主服务器</td>\n</tr>\n<tr>\n<td><strong>Slave</strong></td>\n<td>192.168.0.2</td>\n<td>节点服务器</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"Master-Slave主从配置\"><a href=\"#Master-Slave主从配置\" class=\"headerlink\" title=\"Master-Slave主从配置\"></a>Master-Slave主从配置</h2><ol>\n<li><p><strong>主服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin   //[必须]启用二进制日志</div><div class=\"line\">server-id=1      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>从服务器配置</strong><br>编辑Mysql配置文件：<br><strong> vi /usr/my.cnf</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div></pre></td><td class=\"code\"><pre><div class=\"line\">[mysqld]</div><div class=\"line\">log-bin=mysql-bin   //[不是必须]启用二进制日志</div><div class=\"line\">server-id=2      //[必须]服务器唯一ID，默认是1，一般取IP最后一段</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>重启两台Mysql服务</strong></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">/etc/init.d/mysql restart</div></pre></td></tr></table></figure>\n</li>\n<li><p><strong>在主服务器上建立账户并授权Slave</strong></p>\n<ol>\n<li><p>连接服务器</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">mysql -uroot -p默认密码</div></pre></td></tr></table></figure>\n</li>\n<li><p>建立账户</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">GRANT REPLICATION SLAVE ON *.* to &apos;repl_user&apos;@&apos;%&apos; identified by &apos;repl_user&apos;;</div></pre></td></tr></table></figure>\n</li>\n<li><p>锁表操作</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">flush tables with read lock;</div></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqtpjznuj207q019we9.jpg\" alt=\"\"></p>\n</li>\n<li><p>查询Master的状态</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">show master status;</div></pre></td></tr></table></figure>\n<p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\"></p>\n</li>\n</ol>\n</li>\n<li><p><strong>配置从服务器</strong></p>\n<ol>\n<li><p>配置Master信息</p>\n<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置\n</code></pre></li>\n<li><p>检查Slave状态        </p>\n<pre><code>show slave status \\G;\n</code></pre><p> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"> </p>\n<p> <strong>注意</strong>： 这样标识从服务器配置成功                </p>\n<pre><code>Slave_IO_Running:Yes\nSlave_SQL_Running:Yes           \n</code></pre></li>\n</ol>\n</li>\n<li><p><strong>解除Master的锁表状态</strong></p>\n<pre><code>UNLOCK TABLES;\n</code></pre></li>\n</ol>\n<h2 id=\"Master-Master主主配置\"><a href=\"#Master-Master主主配置\" class=\"headerlink\" title=\"Master-Master主主配置\"></a>Master-Master主主配置</h2><p>上面已经完成了Master_Slave的配置操作，主主（双主）就是将上面的操作反过来重新操作一次。<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">第一次的主机变为从机，</div><div class=\"line\">第一次的从机变为主机。</div></pre></td></tr></table></figure></p>\n<p>Mysql配置文件如下：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</div><div class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</div><div class=\"line\">binlog_format = mixed                            //日志记录方式</div><div class=\"line\">expire_logs_days        = 7                      //binlog过期清理时间</div><div class=\"line\">max_binlog_size         = 100m                   //binlog每个日志文件大小    </div><div class=\"line\">binlog_cache_size       = 4m                     //binlog缓存大小   </div><div class=\"line\">max_binlog_cache_size   = 512m                   //最大binlog缓存大小  </div><div class=\"line\">log-slave-updates=on                             //该服务器既作为从库，又作为主库的时候，必须开启，否则它的从库无法获得二进制日志    </div><div class=\"line\"></div><div class=\"line\">replicate_wild_ignore_table=mysql.%              //忽略mysql库的sql语句</div><div class=\"line\"></div><div class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </div><div class=\"line\">auto-increment-increment=2                       //自增主键每次加2</div></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><ol>\n<li><p>Mysql的主从复制，必须开启二进制日志记录功能，也就是在配置文件中加入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">server_id = 2                                    //服务器id，在集群中此id不可重复</div><div class=\"line\">log-bin= mysql-bin                               //开启二进制日志文件</div></pre></td></tr></table></figure>\n</li>\n<li><p>主从复制失败</p>\n<ol>\n<li><p>查看Master服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzqqj39gdj20i4038glg.jpg\" alt=\"\">  </p>\n</li>\n<li><p>查看Slave服务器状态<br> <img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzr3bwk7lj20f006474a.jpg\" alt=\"\"><br> 两个的二进制日志文件要相同，如果不同    </p>\n<ol>\n<li>重置Master服务器二进制日志文件<pre><code>reset master; \n</code></pre></li>\n<li>配置Slave服务器的Master连接信息<pre><code>change master to\n    master_host=&apos;192.168.0.1&apos;,          //Master服务器IP\n    master_user=&apos;repl_user&apos;,            //Master连接用户名，必须具备Slave权限\n    master_password=&apos;repl_user&apos;,        //Master连接用户密码，必须具备Slave权限\n    master_log_file=&apos;mysql-bin.000010&apos;, //数据库二进制日志文件名，Master服务器 Show master status命令输出的文件名\n    master_log_pos=0;                   //数据库二进制日志文件开始位置            \n</code></pre></li>\n</ol>\n</li>\n</ol>\n</li>\n<li><p>主主复制，如果采用的是主键自增模式话，注意两台服务器的自增策略不能相同，以免同步的时候发生主键重复<br>修改Mysql配置文件：</p>\n <figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div></pre></td><td class=\"code\"><pre><div class=\"line\">auto-increment-offset=2                          //自增主键从1开始计数 </div><div class=\"line\">auto-increment-increment=2                       //自增主键每次加2</div></pre></td></tr></table></figure>\n</li>\n</ol>\n"},{"title":"CentOS7安装Memcached","date":"2017-06-02T03:02:56.000Z","_content":"\n<p align=\"center\">\n![](http://memcached.org/images/memcached_banner75.jpg)\n</p>\n\n1. #查找Memcached\n```\nyum search memcached\n```\n2. #安装Memcached\n```\nyum -y install memcached\n```\n3. #验证安装\n```\nmemcached -h\n```\n4. #查看配置文件\n```\ncat /etc/sysconfig/memcached\n```\n可以根据情况修改相关配置参数：\n```\nPORT=\"11211\"\nUSER=\"memcached\"\nMAXCONN=\"1024\"\nCACHESIZE=\"64\"\nOPTIONS=\"\"\n```\n5. #memcached命令\n    1. 启动命令\n    ```\n    systemctl start memcache\n    ```\n    2. 停止命令\n    ```\n    systemctl stop memcache\n    ```\n    3. 查看状态命令\n    ```\n    systemctl status memcache\n    ```\n    4. 开机自动启动命令\n    ```\n    systemctl enable memcached.service\n    ```\n\n","source":"_posts/内存数据库/CentOS7安装Memcached.md","raw":"---\ntitle: CentOS7安装Memcached\ndate: 2017-06-02 11:02:56\ntags: [Memcache]\ncategories: [内存数据库]\n---\n\n<p align=\"center\">\n![](http://memcached.org/images/memcached_banner75.jpg)\n</p>\n\n1. #查找Memcached\n```\nyum search memcached\n```\n2. #安装Memcached\n```\nyum -y install memcached\n```\n3. #验证安装\n```\nmemcached -h\n```\n4. #查看配置文件\n```\ncat /etc/sysconfig/memcached\n```\n可以根据情况修改相关配置参数：\n```\nPORT=\"11211\"\nUSER=\"memcached\"\nMAXCONN=\"1024\"\nCACHESIZE=\"64\"\nOPTIONS=\"\"\n```\n5. #memcached命令\n    1. 启动命令\n    ```\n    systemctl start memcache\n    ```\n    2. 停止命令\n    ```\n    systemctl stop memcache\n    ```\n    3. 查看状态命令\n    ```\n    systemctl status memcache\n    ```\n    4. 开机自动启动命令\n    ```\n    systemctl enable memcached.service\n    ```\n\n","slug":"内存数据库/CentOS7安装Memcached","published":1,"updated":"2017-06-07T08:40:27.435Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21p000d14vekk25gnhi","content":"<p align=\"center\"><br><img src=\"http://memcached.org/images/memcached_banner75.jpg\" alt=\"\"><br></p>\n\n<ol>\n<li><p>#查找Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum search memcached</div></pre></td></tr></table></figure>\n</li>\n<li><p>#安装Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install memcached</div></pre></td></tr></table></figure>\n</li>\n<li><p>#验证安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">memcached -h</div></pre></td></tr></table></figure>\n</li>\n<li><p>#查看配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/sysconfig/memcached</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以根据情况修改相关配置参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">PORT=&quot;11211&quot;</div><div class=\"line\">USER=&quot;memcached&quot;</div><div class=\"line\">MAXCONN=&quot;1024&quot;</div><div class=\"line\">CACHESIZE=&quot;64&quot;</div><div class=\"line\">OPTIONS=&quot;&quot;</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>#memcached命令</p>\n<ol>\n<li><p>启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start memcache</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl stop memcache</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看状态命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl status memcache</div></pre></td></tr></table></figure>\n</li>\n<li><p>开机自动启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl enable memcached.service</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n","excerpt":"","more":"<p align=\"center\"><br><img src=\"http://memcached.org/images/memcached_banner75.jpg\" alt=\"\"><br></p>\n\n<ol>\n<li><p>#查找Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum search memcached</div></pre></td></tr></table></figure>\n</li>\n<li><p>#安装Memcached</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">yum -y install memcached</div></pre></td></tr></table></figure>\n</li>\n<li><p>#验证安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">memcached -h</div></pre></td></tr></table></figure>\n</li>\n<li><p>#查看配置文件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">cat /etc/sysconfig/memcached</div></pre></td></tr></table></figure>\n</li>\n</ol>\n<p>可以根据情况修改相关配置参数：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div></pre></td><td class=\"code\"><pre><div class=\"line\">PORT=&quot;11211&quot;</div><div class=\"line\">USER=&quot;memcached&quot;</div><div class=\"line\">MAXCONN=&quot;1024&quot;</div><div class=\"line\">CACHESIZE=&quot;64&quot;</div><div class=\"line\">OPTIONS=&quot;&quot;</div></pre></td></tr></table></figure></p>\n<ol>\n<li><p>#memcached命令</p>\n<ol>\n<li><p>启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl start memcache</div></pre></td></tr></table></figure>\n</li>\n<li><p>停止命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl stop memcache</div></pre></td></tr></table></figure>\n</li>\n<li><p>查看状态命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl status memcache</div></pre></td></tr></table></figure>\n</li>\n<li><p>开机自动启动命令</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div></pre></td><td class=\"code\"><pre><div class=\"line\">systemctl enable memcached.service</div></pre></td></tr></table></figure>\n</li>\n</ol>\n</li>\n</ol>\n"},{"title":"SpringMVC源码分析--核心分发器DispatcherServlet（初始化）","date":"2017-05-17T10:31:23.000Z","_content":"\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n\n本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。\n\n## SpringMVC配置\n1. 指明Servlet，在配置文件web.xml中如下配置：\t\n```xml\n<!-- Spring MVC servlet -->\n<servlet>\n    <servlet-name>springMVC</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath*:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springMVC</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n> load-on-startup：表示启动容器时初始化该Servlet；\n> url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。\n \n2. 配置SpringMVC信息 \n\t```xml\n\t<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->\n\t<context:component-scan base-package=\"com.springmvc.example\"/>\n\t\n\t<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->\n\t<bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n\t</bean>\n\t\n\t<!-- 定义跳转的文件的前后缀，视图模式配置-->\n\t<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 -->\n\t    <property name=\"prefix\" value=\"/jsp/\"/>\n\t    <property name=\"suffix\" value=\".jsp\"/>\n\t</bean>\n\t```\n\t2.1. **配置扫描路径**\n\t2.2. **启用注解功能**\n\t2.3. **视图配置信息：前缀和后缀**\n\n\n至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。\n\n## SpringMVC初始化流程图\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg)\n</p>\n\n## DispatcherServlet初始化流程分析\n```java\n\t/**\n\t * This implementation calls {@link #initStrategies}.\n\t */\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t//初始化请求地址\n\t\tinitHandlerMappings(context);\n\t\t//初始化请求解析器\n\t\tinitHandlerAdapters(context);\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n初始化流程在FrameworkServlet类中流转，建立了上下文后，通过**onRefresh(ApplicationContext context)**方法的回调，进入到DispatcherServlet类中。\n\n以其中**initHandlerMappings(context)**方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。\n### 关键代码片段\n```java\n\t/**\n\t * Create a List of default strategy objects for the given strategy interface.\n\t * <p>The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n\t * package as the DispatcherServlet class) to determine the class names. It instantiates\n\t * the strategy objects through the context's BeanFactory.\n\t * @param context the current WebApplicationContext\n\t * @param strategyInterface the strategy interface\n\t * @return the List of corresponding strategy objects\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {\n\t\tString key = strategyInterface.getName();\n\t\tString value = defaultStrategies.getProperty(key);\n\t\tif (value != null) {\n\t\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);\n\t\t\tList<T> strategies = new ArrayList<T>(classNames.length);\n\t\t\tfor (String className : classNames) {\n\t\t\t\ttry {\n\t\t\t\t\t//通过反射，得到传入参数的Class对象\n\t\t\t\t\tClass<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());\n\t\t\t\t\t//关键\n\t\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);\n\t\t\t\t\tstrategies.add((T) strategy);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Could not find DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]\", ex);\n\t\t\t\t}\n\t\t\t\tcatch (LinkageError err) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Error loading DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]: problem with class file or dependent class\", err);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strategies;\n\t\t}\n\t\telse {\n\t\t\treturn new LinkedList<T>();\n\t\t}\n\t}\n```\n\n**DefaultAnnotationHandlerMapping.determineUrlsForHandler**：\n```java\n\t/**\n\t * Checks for presence of the {@link org.springframework.web.bind.annotation.RequestMapping}\n\t * annotation on the handler class and on any of its methods.\n\t */\n\t@Override\n\tprotected String[] determineUrlsForHandler(String beanName) {\n\t\tApplicationContext context = getApplicationContext();\n\t\tClass<?> handlerType = context.getType(beanName);\n\t\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);\n\t\tif (mapping != null) {\n\t\t\t// @RequestMapping found at type level\n\t\t\tthis.cachedMappings.put(handlerType, mapping);\n\t\t\tSet<String> urls = new LinkedHashSet<String>();\n\t\t\tString[] typeLevelPatterns = mapping.value();\n\t\t\tif (typeLevelPatterns.length > 0) {\n\t\t\t\t// @RequestMapping specifies paths at type level\n\t\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, true);\n\t\t\t\tfor (String typeLevelPattern : typeLevelPatterns) {\n\t\t\t\t\tif (!typeLevelPattern.startsWith(\"/\")) {\n\t\t\t\t\t\ttypeLevelPattern = \"/\" + typeLevelPattern;\n\t\t\t\t\t}\n\t\t\t\t\tboolean hasEmptyMethodLevelMappings = false;\n\t\t\t\t\tfor (String methodLevelPattern : methodLevelPatterns) {\n\t\t\t\t\t\tif (methodLevelPattern == null) {\n\t\t\t\t\t\t\thasEmptyMethodLevelMappings = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);\n\t\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (hasEmptyMethodLevelMappings ||\n\t\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) {\n\t\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn StringUtils.toStringArray(urls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// actual paths specified by @RequestMapping at method level\n\t\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t\t}\n\t\t}\n\t\telse if (AnnotationUtils.findAnnotation(handlerType, Controller.class) != null) {\n\t\t\t// @RequestMapping to be introspected at method level\n\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n```\n\n通过遍历每一个类，查找**RequestMapping**注解，得到了所有controller层的请求Url。\n最后讲Url和handle存入Map<String, Object>集合中，以备解析请求的时候快速找到controller。\n**initHandlerMappings**的流程大概就是以上这些。\n\n其他方法和**initHandlerMappings**类似，就不废话了。\n\n## 总结\n回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，\nSpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。\n其中：\n- HttpServletBean完成的是<init-param>配置元素的依赖注入，\n- FrameworkServlet完成的是容器上下文的建立，\n- DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。","source":"_posts/SpringMVC源码分析/SpringMVC源码分析-核心分发器DispatcherServlet（初始化）.md","raw":"---\ntitle: SpringMVC源码分析--核心分发器DispatcherServlet（初始化）\ndate: 2017-05-17 18:31:23\ncategories: [SpringMVC]\ntags: [SpringMVC源码分析]\n---\n\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n\n本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。\n\n## SpringMVC配置\n1. 指明Servlet，在配置文件web.xml中如下配置：\t\n```xml\n<!-- Spring MVC servlet -->\n<servlet>\n    <servlet-name>springMVC</servlet-name>\n    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>\n    <init-param>\n        <param-name>contextConfigLocation</param-name>\n        <param-value>classpath*:spring/spring-mvc.xml</param-value>\n    </init-param>\n    <load-on-startup>1</load-on-startup>\n</servlet>\n<servlet-mapping>\n    <servlet-name>springMVC</servlet-name>\n    <url-pattern>/</url-pattern>\n</servlet-mapping>\n```\n> load-on-startup：表示启动容器时初始化该Servlet；\n> url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。\n \n2. 配置SpringMVC信息 \n\t```xml\n\t<!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 -->\n\t<context:component-scan base-package=\"com.springmvc.example\"/>\n\t\n\t<!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 -->\n\t<bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n\t</bean>\n\t\n\t<!-- 定义跳转的文件的前后缀，视图模式配置-->\n\t<bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n\t    <!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 -->\n\t    <property name=\"prefix\" value=\"/jsp/\"/>\n\t    <property name=\"suffix\" value=\".jsp\"/>\n\t</bean>\n\t```\n\t2.1. **配置扫描路径**\n\t2.2. **启用注解功能**\n\t2.3. **视图配置信息：前缀和后缀**\n\n\n至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。\n\n## SpringMVC初始化流程图\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg)\n</p>\n\n## DispatcherServlet初始化流程分析\n```java\n\t/**\n\t * This implementation calls {@link #initStrategies}.\n\t */\n\t@Override\n\tprotected void onRefresh(ApplicationContext context) {\n\t\tinitStrategies(context);\n\t}\n\n\t/**\n\t * Initialize the strategy objects that this servlet uses.\n\t * <p>May be overridden in subclasses in order to initialize further strategy objects.\n\t */\n\tprotected void initStrategies(ApplicationContext context) {\n\t\tinitMultipartResolver(context);\n\t\tinitLocaleResolver(context);\n\t\tinitThemeResolver(context);\n\t\t//初始化请求地址\n\t\tinitHandlerMappings(context);\n\t\t//初始化请求解析器\n\t\tinitHandlerAdapters(context);\n\t\tinitHandlerExceptionResolvers(context);\n\t\tinitRequestToViewNameTranslator(context);\n\t\tinitViewResolvers(context);\n\t\tinitFlashMapManager(context);\n\t}\n```\n初始化流程在FrameworkServlet类中流转，建立了上下文后，通过**onRefresh(ApplicationContext context)**方法的回调，进入到DispatcherServlet类中。\n\n以其中**initHandlerMappings(context)**方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。\n### 关键代码片段\n```java\n\t/**\n\t * Create a List of default strategy objects for the given strategy interface.\n\t * <p>The default implementation uses the \"DispatcherServlet.properties\" file (in the same\n\t * package as the DispatcherServlet class) to determine the class names. It instantiates\n\t * the strategy objects through the context's BeanFactory.\n\t * @param context the current WebApplicationContext\n\t * @param strategyInterface the strategy interface\n\t * @return the List of corresponding strategy objects\n\t */\n\t@SuppressWarnings(\"unchecked\")\n\tprotected <T> List<T> getDefaultStrategies(ApplicationContext context, Class<T> strategyInterface) {\n\t\tString key = strategyInterface.getName();\n\t\tString value = defaultStrategies.getProperty(key);\n\t\tif (value != null) {\n\t\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);\n\t\t\tList<T> strategies = new ArrayList<T>(classNames.length);\n\t\t\tfor (String className : classNames) {\n\t\t\t\ttry {\n\t\t\t\t\t//通过反射，得到传入参数的Class对象\n\t\t\t\t\tClass<?> clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());\n\t\t\t\t\t//关键\n\t\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);\n\t\t\t\t\tstrategies.add((T) strategy);\n\t\t\t\t}\n\t\t\t\tcatch (ClassNotFoundException ex) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Could not find DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]\", ex);\n\t\t\t\t}\n\t\t\t\tcatch (LinkageError err) {\n\t\t\t\t\tthrow new BeanInitializationException(\n\t\t\t\t\t\t\t\"Error loading DispatcherServlet's default strategy class [\" + className +\n\t\t\t\t\t\t\t\t\t\"] for interface [\" + key + \"]: problem with class file or dependent class\", err);\n\t\t\t\t}\n\t\t\t}\n\t\t\treturn strategies;\n\t\t}\n\t\telse {\n\t\t\treturn new LinkedList<T>();\n\t\t}\n\t}\n```\n\n**DefaultAnnotationHandlerMapping.determineUrlsForHandler**：\n```java\n\t/**\n\t * Checks for presence of the {@link org.springframework.web.bind.annotation.RequestMapping}\n\t * annotation on the handler class and on any of its methods.\n\t */\n\t@Override\n\tprotected String[] determineUrlsForHandler(String beanName) {\n\t\tApplicationContext context = getApplicationContext();\n\t\tClass<?> handlerType = context.getType(beanName);\n\t\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);\n\t\tif (mapping != null) {\n\t\t\t// @RequestMapping found at type level\n\t\t\tthis.cachedMappings.put(handlerType, mapping);\n\t\t\tSet<String> urls = new LinkedHashSet<String>();\n\t\t\tString[] typeLevelPatterns = mapping.value();\n\t\t\tif (typeLevelPatterns.length > 0) {\n\t\t\t\t// @RequestMapping specifies paths at type level\n\t\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, true);\n\t\t\t\tfor (String typeLevelPattern : typeLevelPatterns) {\n\t\t\t\t\tif (!typeLevelPattern.startsWith(\"/\")) {\n\t\t\t\t\t\ttypeLevelPattern = \"/\" + typeLevelPattern;\n\t\t\t\t\t}\n\t\t\t\t\tboolean hasEmptyMethodLevelMappings = false;\n\t\t\t\t\tfor (String methodLevelPattern : methodLevelPatterns) {\n\t\t\t\t\t\tif (methodLevelPattern == null) {\n\t\t\t\t\t\t\thasEmptyMethodLevelMappings = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse {\n\t\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);\n\t\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (hasEmptyMethodLevelMappings ||\n\t\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) {\n\t\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\treturn StringUtils.toStringArray(urls);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// actual paths specified by @RequestMapping at method level\n\t\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t\t}\n\t\t}\n\t\telse if (AnnotationUtils.findAnnotation(handlerType, Controller.class) != null) {\n\t\t\t// @RequestMapping to be introspected at method level\n\t\t\treturn determineUrlsForHandlerMethods(handlerType, false);\n\t\t}\n\t\telse {\n\t\t\treturn null;\n\t\t}\n\t}\n```\n\n通过遍历每一个类，查找**RequestMapping**注解，得到了所有controller层的请求Url。\n最后讲Url和handle存入Map<String, Object>集合中，以备解析请求的时候快速找到controller。\n**initHandlerMappings**的流程大概就是以上这些。\n\n其他方法和**initHandlerMappings**类似，就不废话了。\n\n## 总结\n回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，\nSpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。\n其中：\n- HttpServletBean完成的是<init-param>配置元素的依赖注入，\n- FrameworkServlet完成的是容器上下文的建立，\n- DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。","slug":"SpringMVC源码分析/SpringMVC源码分析-核心分发器DispatcherServlet（初始化）","published":1,"updated":"2017-06-07T08:35:37.111Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21r000g14ve7gmmjbq7","content":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p>\n\n<p>本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。</p>\n<h2 id=\"SpringMVC配置\"><a href=\"#SpringMVC配置\" class=\"headerlink\" title=\"SpringMVC配置\"></a>SpringMVC配置</h2><ol>\n<li>指明Servlet，在配置文件web.xml中如下配置：    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Spring MVC servlet --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath*:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>load-on-startup：表示启动容器时初始化该Servlet；<br>url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。</p>\n</blockquote>\n<ol>\n<li><p>配置SpringMVC信息 </p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.springmvc.example\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 定义跳转的文件的前后缀，视图模式配置--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/jsp/\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> 2.1. <strong>配置扫描路径</strong><br> 2.2. <strong>启用注解功能</strong><br> 2.3. <strong>视图配置信息：前缀和后缀</strong></p>\n</li>\n</ol>\n<p>至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。</p>\n<h2 id=\"SpringMVC初始化流程图\"><a href=\"#SpringMVC初始化流程图\" class=\"headerlink\" title=\"SpringMVC初始化流程图\"></a>SpringMVC初始化流程图</h2><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"DispatcherServlet初始化流程分析\"><a href=\"#DispatcherServlet初始化流程分析\" class=\"headerlink\" title=\"DispatcherServlet初始化流程分析\"></a>DispatcherServlet初始化流程分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * This implementation calls &#123;<span class=\"doctag\">@link</span> #initStrategies&#125;.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefresh</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</div><div class=\"line\">\tinitStrategies(context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Initialize the strategy objects that this servlet uses.</div><div class=\"line\"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</div><div class=\"line\">\tinitMultipartResolver(context);</div><div class=\"line\">\tinitLocaleResolver(context);</div><div class=\"line\">\tinitThemeResolver(context);</div><div class=\"line\">\t<span class=\"comment\">//初始化请求地址</span></div><div class=\"line\">\tinitHandlerMappings(context);</div><div class=\"line\">\t<span class=\"comment\">//初始化请求解析器</span></div><div class=\"line\">\tinitHandlerAdapters(context);</div><div class=\"line\">\tinitHandlerExceptionResolvers(context);</div><div class=\"line\">\tinitRequestToViewNameTranslator(context);</div><div class=\"line\">\tinitViewResolvers(context);</div><div class=\"line\">\tinitFlashMapManager(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化流程在FrameworkServlet类中流转，建立了上下文后，通过<strong>onRefresh(ApplicationContext context)</strong>方法的回调，进入到DispatcherServlet类中。</p>\n<p>以其中<strong>initHandlerMappings(context)</strong>方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。</p>\n<h3 id=\"关键代码片段\"><a href=\"#关键代码片段\" class=\"headerlink\" title=\"关键代码片段\"></a>关键代码片段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Create a List of default strategy objects for the given strategy interface.</div><div class=\"line\"> * &lt;p&gt;The default implementation uses the \"DispatcherServlet.properties\" file (in the same</div><div class=\"line\"> * package as the DispatcherServlet class) to determine the class names. It instantiates</div><div class=\"line\"> * the strategy objects through the context's BeanFactory.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context the current WebApplicationContext</div><div class=\"line\"> * <span class=\"doctag\">@param</span> strategyInterface the strategy interface</div><div class=\"line\"> * <span class=\"doctag\">@return</span> the List of corresponding strategy objects</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">getDefaultStrategies</span><span class=\"params\">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class=\"line\">\tString key = strategyInterface.getName();</div><div class=\"line\">\tString value = defaultStrategies.getProperty(key);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class=\"line\">\t\tList&lt;T&gt; strategies = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;(classNames.length);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : classNames) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//通过反射，得到传入参数的Class对象</span></div><div class=\"line\">\t\t\t\tClass&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//关键</span></div><div class=\"line\">\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);</div><div class=\"line\">\t\t\t\tstrategies.add((T) strategy);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Could not find DispatcherServlet's default strategy class [\"</span> + className +</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]\"</span>, ex);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (LinkageError err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Error loading DispatcherServlet's default strategy class [\"</span> + className +</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]: problem with class file or dependent class\"</span>, err);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> strategies;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>DefaultAnnotationHandlerMapping.determineUrlsForHandler</strong>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</span></div><div class=\"line\"> * Checks for presence of the &#123;<span class=\"doctag\">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125;</div><div class=\"line\"> * annotation on the handler class and on any of its methods.</div><div class=\"line\"> */</div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</div><div class=\"line\">\tApplicationContext context = getApplicationContext();</div><div class=\"line\">\tClass&lt;?&gt; handlerType = context.getType(beanName);</div><div class=\"line\">\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mapping != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// @RequestMapping found at type level</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.cachedMappings.put(handlerType, mapping);</div><div class=\"line\">\t\tSet&lt;String&gt; urls = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;();</div><div class=\"line\">\t\tString[] typeLevelPatterns = mapping.value();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (typeLevelPatterns.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// @RequestMapping specifies paths at type level</span></div><div class=\"line\">\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String typeLevelPattern : typeLevelPatterns) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!typeLevelPattern.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\ttypeLevelPattern = <span class=\"string\">\"/\"</span> + typeLevelPattern;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> hasEmptyMethodLevelMappings = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String methodLevelPattern : methodLevelPatterns) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (methodLevelPattern == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\thasEmptyMethodLevelMappings = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);</div><div class=\"line\">\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (hasEmptyMethodLevelMappings ||</div><div class=\"line\">\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) &#123;</div><div class=\"line\">\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(urls);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// actual paths specified by @RequestMapping at method level</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (AnnotationUtils.findAnnotation(handlerType, Controller.class) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// @RequestMapping to be introspected at method level</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过遍历每一个类，查找<strong>RequestMapping</strong>注解，得到了所有controller层的请求Url。<br>最后讲Url和handle存入Map<string, object=\"\">集合中，以备解析请求的时候快速找到controller。<br><strong>initHandlerMappings</strong>的流程大概就是以上这些。</string,></p>\n<p>其他方法和<strong>initHandlerMappings</strong>类似，就不废话了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，<br>SpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。<br>其中：</p>\n<ul>\n<li>HttpServletBean完成的是<init-param>配置元素的依赖注入，</init-param></li>\n<li>FrameworkServlet完成的是容器上下文的建立，</li>\n<li>DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。</li>\n</ul>\n","excerpt":"","more":"<p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p>\n\n<p>本文将分析SpringMVC的核心分发器DispatcherServlet的初始化过程，让读者了解这个入口Servlet的作用。</p>\n<h2 id=\"SpringMVC配置\"><a href=\"#SpringMVC配置\" class=\"headerlink\" title=\"SpringMVC配置\"></a>SpringMVC配置</h2><ol>\n<li>指明Servlet，在配置文件web.xml中如下配置：    <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- Spring MVC servlet --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-class</span>&gt;</span>org.springframework.web.servlet.DispatcherServlet<span class=\"tag\">&lt;/<span class=\"name\">servlet-class</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-name</span>&gt;</span>contextConfigLocation<span class=\"tag\">&lt;/<span class=\"name\">param-name</span>&gt;</span></div><div class=\"line\">        <span class=\"tag\">&lt;<span class=\"name\">param-value</span>&gt;</span>classpath*:spring/spring-mvc.xml<span class=\"tag\">&lt;/<span class=\"name\">param-value</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;/<span class=\"name\">init-param</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">load-on-startup</span>&gt;</span>1<span class=\"tag\">&lt;/<span class=\"name\">load-on-startup</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">servlet-mapping</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">servlet-name</span>&gt;</span>springMVC<span class=\"tag\">&lt;/<span class=\"name\">servlet-name</span>&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">url-pattern</span>&gt;</span>/<span class=\"tag\">&lt;/<span class=\"name\">url-pattern</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">servlet-mapping</span>&gt;</span></div></pre></td></tr></table></figure>\n</li>\n</ol>\n<blockquote>\n<p>load-on-startup：表示启动容器时初始化该Servlet；<br>url-pattern：表示哪些请求交给Spring Web MVC处理， “/” 是用来定义默认servlet映射的。也可以如“*.html”表示拦截所有以html为扩展名的请求。</p>\n</blockquote>\n<ol>\n<li><p>配置SpringMVC信息 </p>\n <figure class=\"highlight xml\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">&lt;!-- 自动扫描该包，使SpringMVC认为包下用了@controller注解的类是控制器 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">context:component-scan</span> <span class=\"attr\">base-package</span>=<span class=\"string\">\"com.springmvc.example\"</span>/&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 启动SpringMVC的注解功能，完成请求和注解POJO的映射 --&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\"</span>&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">&lt;!-- 定义跳转的文件的前后缀，视图模式配置--&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;<span class=\"name\">bean</span> <span class=\"attr\">class</span>=<span class=\"string\">\"org.springframework.web.servlet.view.InternalResourceViewResolver\"</span>&gt;</span></div><div class=\"line\">    <span class=\"comment\">&lt;!-- 这里的配置我的理解是自动给后面action的方法return的字符串加上前缀和后缀，变成一个可用的url地址 --&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"prefix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\"/jsp/\"</span>/&gt;</span></div><div class=\"line\">    <span class=\"tag\">&lt;<span class=\"name\">property</span> <span class=\"attr\">name</span>=<span class=\"string\">\"suffix\"</span> <span class=\"attr\">value</span>=<span class=\"string\">\".jsp\"</span>/&gt;</span></div><div class=\"line\"><span class=\"tag\">&lt;/<span class=\"name\">bean</span>&gt;</span></div></pre></td></tr></table></figure>\n<p> 2.1. <strong>配置扫描路径</strong><br> 2.2. <strong>启用注解功能</strong><br> 2.3. <strong>视图配置信息：前缀和后缀</strong></p>\n</li>\n</ol>\n<p>至此，SpringMVC的简单配置已结束，下面让我们来具体看一下DispatcherServlet的源码。</p>\n<h2 id=\"SpringMVC初始化流程图\"><a href=\"#SpringMVC初始化流程图\" class=\"headerlink\" title=\"SpringMVC初始化流程图\"></a>SpringMVC初始化流程图</h2><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffoj4iu5rhj20qd0gddgi.jpg\" alt=\"\"><br></p>\n\n<h2 id=\"DispatcherServlet初始化流程分析\"><a href=\"#DispatcherServlet初始化流程分析\" class=\"headerlink\" title=\"DispatcherServlet初始化流程分析\"></a>DispatcherServlet初始化流程分析</h2><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * This implementation calls &#123;<span class=\"doctag\">@link</span> #initStrategies&#125;.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">onRefresh</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</div><div class=\"line\">\tinitStrategies(context);</div><div class=\"line\">&#125;</div><div class=\"line\"></div><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Initialize the strategy objects that this servlet uses.</div><div class=\"line\"> * &lt;p&gt;May be overridden in subclasses in order to initialize further strategy objects.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"function\"><span class=\"keyword\">protected</span> <span class=\"keyword\">void</span> <span class=\"title\">initStrategies</span><span class=\"params\">(ApplicationContext context)</span> </span>&#123;</div><div class=\"line\">\tinitMultipartResolver(context);</div><div class=\"line\">\tinitLocaleResolver(context);</div><div class=\"line\">\tinitThemeResolver(context);</div><div class=\"line\">\t<span class=\"comment\">//初始化请求地址</span></div><div class=\"line\">\tinitHandlerMappings(context);</div><div class=\"line\">\t<span class=\"comment\">//初始化请求解析器</span></div><div class=\"line\">\tinitHandlerAdapters(context);</div><div class=\"line\">\tinitHandlerExceptionResolvers(context);</div><div class=\"line\">\tinitRequestToViewNameTranslator(context);</div><div class=\"line\">\tinitViewResolvers(context);</div><div class=\"line\">\tinitFlashMapManager(context);</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p>初始化流程在FrameworkServlet类中流转，建立了上下文后，通过<strong>onRefresh(ApplicationContext context)</strong>方法的回调，进入到DispatcherServlet类中。</p>\n<p>以其中<strong>initHandlerMappings(context)</strong>方法为例，分析一下这些SpringMVC编程元素的初始化策略，其他的方法，都是以类似的策略初始化的。</p>\n<h3 id=\"关键代码片段\"><a href=\"#关键代码片段\" class=\"headerlink\" title=\"关键代码片段\"></a>关键代码片段</h3><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Create a List of default strategy objects for the given strategy interface.</div><div class=\"line\"> * &lt;p&gt;The default implementation uses the \"DispatcherServlet.properties\" file (in the same</div><div class=\"line\"> * package as the DispatcherServlet class) to determine the class names. It instantiates</div><div class=\"line\"> * the strategy objects through the context's BeanFactory.</div><div class=\"line\"> * <span class=\"doctag\">@param</span> context the current WebApplicationContext</div><div class=\"line\"> * <span class=\"doctag\">@param</span> strategyInterface the strategy interface</div><div class=\"line\"> * <span class=\"doctag\">@return</span> the List of corresponding strategy objects</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@SuppressWarnings</span>(<span class=\"string\">\"unchecked\"</span>)</div><div class=\"line\"><span class=\"keyword\">protected</span> &lt;T&gt; <span class=\"function\">List&lt;T&gt; <span class=\"title\">getDefaultStrategies</span><span class=\"params\">(ApplicationContext context, Class&lt;T&gt; strategyInterface)</span> </span>&#123;</div><div class=\"line\">\tString key = strategyInterface.getName();</div><div class=\"line\">\tString value = defaultStrategies.getProperty(key);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (value != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\tString[] classNames = StringUtils.commaDelimitedListToStringArray(value);</div><div class=\"line\">\t\tList&lt;T&gt; strategies = <span class=\"keyword\">new</span> ArrayList&lt;T&gt;(classNames.length);</div><div class=\"line\">\t\t<span class=\"keyword\">for</span> (String className : classNames) &#123;</div><div class=\"line\">\t\t\t<span class=\"keyword\">try</span> &#123;</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//通过反射，得到传入参数的Class对象</span></div><div class=\"line\">\t\t\t\tClass&lt;?&gt; clazz = ClassUtils.forName(className, DispatcherServlet.class.getClassLoader());</div><div class=\"line\">\t\t\t\t<span class=\"comment\">//关键</span></div><div class=\"line\">\t\t\t\tObject strategy = createDefaultStrategy(context, clazz);</div><div class=\"line\">\t\t\t\tstrategies.add((T) strategy);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (ClassNotFoundException ex) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Could not find DispatcherServlet's default strategy class [\"</span> + className +</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]\"</span>, ex);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">catch</span> (LinkageError err) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">throw</span> <span class=\"keyword\">new</span> BeanInitializationException(</div><div class=\"line\">\t\t\t\t\t\t<span class=\"string\">\"Error loading DispatcherServlet's default strategy class [\"</span> + className +</div><div class=\"line\">\t\t\t\t\t\t\t\t<span class=\"string\">\"] for interface [\"</span> + key + <span class=\"string\">\"]: problem with class file or dependent class\"</span>, err);</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> strategies;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">new</span> LinkedList&lt;T&gt;();</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure>\n<p><strong>DefaultAnnotationHandlerMapping.determineUrlsForHandler</strong>：<br><figure class=\"highlight java\"><table><tr><td class=\"gutter\"><pre><div class=\"line\">1</div><div class=\"line\">2</div><div class=\"line\">3</div><div class=\"line\">4</div><div class=\"line\">5</div><div class=\"line\">6</div><div class=\"line\">7</div><div class=\"line\">8</div><div class=\"line\">9</div><div class=\"line\">10</div><div class=\"line\">11</div><div class=\"line\">12</div><div class=\"line\">13</div><div class=\"line\">14</div><div class=\"line\">15</div><div class=\"line\">16</div><div class=\"line\">17</div><div class=\"line\">18</div><div class=\"line\">19</div><div class=\"line\">20</div><div class=\"line\">21</div><div class=\"line\">22</div><div class=\"line\">23</div><div class=\"line\">24</div><div class=\"line\">25</div><div class=\"line\">26</div><div class=\"line\">27</div><div class=\"line\">28</div><div class=\"line\">29</div><div class=\"line\">30</div><div class=\"line\">31</div><div class=\"line\">32</div><div class=\"line\">33</div><div class=\"line\">34</div><div class=\"line\">35</div><div class=\"line\">36</div><div class=\"line\">37</div><div class=\"line\">38</div><div class=\"line\">39</div><div class=\"line\">40</div><div class=\"line\">41</div><div class=\"line\">42</div><div class=\"line\">43</div><div class=\"line\">44</div><div class=\"line\">45</div><div class=\"line\">46</div><div class=\"line\">47</div><div class=\"line\">48</div><div class=\"line\">49</div><div class=\"line\">50</div><div class=\"line\">51</div></pre></td><td class=\"code\"><pre><div class=\"line\"><span class=\"comment\">/**</div><div class=\"line\"> * Checks for presence of the &#123;<span class=\"doctag\">@link</span> org.springframework.web.bind.annotation.RequestMapping&#125;</div><div class=\"line\"> * annotation on the handler class and on any of its methods.</div><div class=\"line\"> */</span></div><div class=\"line\"><span class=\"meta\">@Override</span></div><div class=\"line\"><span class=\"keyword\">protected</span> String[] determineUrlsForHandler(String beanName) &#123;</div><div class=\"line\">\tApplicationContext context = getApplicationContext();</div><div class=\"line\">\tClass&lt;?&gt; handlerType = context.getType(beanName);</div><div class=\"line\">\tRequestMapping mapping = context.findAnnotationOnBean(beanName, RequestMapping.class);</div><div class=\"line\">\t<span class=\"keyword\">if</span> (mapping != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// @RequestMapping found at type level</span></div><div class=\"line\">\t\t<span class=\"keyword\">this</span>.cachedMappings.put(handlerType, mapping);</div><div class=\"line\">\t\tSet&lt;String&gt; urls = <span class=\"keyword\">new</span> LinkedHashSet&lt;String&gt;();</div><div class=\"line\">\t\tString[] typeLevelPatterns = mapping.value();</div><div class=\"line\">\t\t<span class=\"keyword\">if</span> (typeLevelPatterns.length &gt; <span class=\"number\">0</span>) &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// @RequestMapping specifies paths at type level</span></div><div class=\"line\">\t\t\tString[] methodLevelPatterns = determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">true</span>);</div><div class=\"line\">\t\t\t<span class=\"keyword\">for</span> (String typeLevelPattern : typeLevelPatterns) &#123;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (!typeLevelPattern.startsWith(<span class=\"string\">\"/\"</span>)) &#123;</div><div class=\"line\">\t\t\t\t\ttypeLevelPattern = <span class=\"string\">\"/\"</span> + typeLevelPattern;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">boolean</span> hasEmptyMethodLevelMappings = <span class=\"keyword\">false</span>;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">for</span> (String methodLevelPattern : methodLevelPatterns) &#123;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">if</span> (methodLevelPattern == <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t\t\t\t\thasEmptyMethodLevelMappings = <span class=\"keyword\">true</span>;</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t\t\t\tString combinedPattern = getPathMatcher().combine(typeLevelPattern, methodLevelPattern);</div><div class=\"line\">\t\t\t\t\t\taddUrlsForPath(urls, combinedPattern);</div><div class=\"line\">\t\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t\t<span class=\"keyword\">if</span> (hasEmptyMethodLevelMappings ||</div><div class=\"line\">\t\t\t\t\t\torg.springframework.web.servlet.mvc.Controller.class.isAssignableFrom(handlerType)) &#123;</div><div class=\"line\">\t\t\t\t\taddUrlsForPath(urls, typeLevelPattern);</div><div class=\"line\">\t\t\t\t&#125;</div><div class=\"line\">\t\t\t&#125;</div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> StringUtils.toStringArray(urls);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t\t<span class=\"comment\">// actual paths specified by @RequestMapping at method level</span></div><div class=\"line\">\t\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t\t&#125;</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> <span class=\"keyword\">if</span> (AnnotationUtils.findAnnotation(handlerType, Controller.class) != <span class=\"keyword\">null</span>) &#123;</div><div class=\"line\">\t\t<span class=\"comment\">// @RequestMapping to be introspected at method level</span></div><div class=\"line\">\t\t<span class=\"keyword\">return</span> determineUrlsForHandlerMethods(handlerType, <span class=\"keyword\">false</span>);</div><div class=\"line\">\t&#125;</div><div class=\"line\">\t<span class=\"keyword\">else</span> &#123;</div><div class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"keyword\">null</span>;</div><div class=\"line\">\t&#125;</div><div class=\"line\">&#125;</div></pre></td></tr></table></figure></p>\n<p>通过遍历每一个类，查找<strong>RequestMapping</strong>注解，得到了所有controller层的请求Url。<br>最后讲Url和handle存入Map<String, Object>集合中，以备解析请求的时候快速找到controller。<br><strong>initHandlerMappings</strong>的流程大概就是以上这些。</p>\n<p>其他方法和<strong>initHandlerMappings</strong>类似，就不废话了。</p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>回顾整个SpringMVC的初始化流程，我们看到，通过HttpServletBean、FrameworkServlet、DispatcherServlet三个不同的类层次，<br>SpringMVC的设计者将三种不同的职责分别抽象，运用模版方法设计模式分别固定在三个类层次中。<br>其中：</p>\n<ul>\n<li>HttpServletBean完成的是<init-param>配置元素的依赖注入，</li>\n<li>FrameworkServlet完成的是容器上下文的建立，</li>\n<li>DispatcherServlet完成的是SpringMVC具体编程元素的初始化策略。</li>\n</ul>\n"},{"title":"SpringMVC源码分析--核心分发器DispatcherServlet（请求转发）","date":"2017-05-27T06:15:02.000Z","_content":"<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。\n\n原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。\n以下是 Servlet 遵循的过程：\n1. Servlet 通过调用 init () 方法进行初始化。\n2. Servlet 调用 service() 方法来处理客户端的请求。\n3. Servlet 通过调用 destroy() 方法终止（结束）。\n\n最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\n\nSpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。\n\n## SpringMVC请求流程图\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg)\n\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg)\nSpringMVC核心处理流程：\n1. DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器\n\n2. HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）\n\n3. HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）\n\n4. ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图\n\n5. 然后再将Model模型中的数据渲染到View上\n\n这些过程都是以DispatcherServlet为中轴线进行的.","source":"_posts/SpringMVC源码分析/SpringMVC源码分析-核心分发器DispatcherServlet（请求转发）.md","raw":"---\ntitle: SpringMVC源码分析--核心分发器DispatcherServlet（请求转发）\ndate: 2017-05-27 14:15:02\ncategories: [SpringMVC]\ntags: [SpringMVC源码分析]\n---\n<p align=\"center\">\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg)\n</p>\n本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。\n\n原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。\n以下是 Servlet 遵循的过程：\n1. Servlet 通过调用 init () 方法进行初始化。\n2. Servlet 调用 service() 方法来处理客户端的请求。\n3. Servlet 通过调用 destroy() 方法终止（结束）。\n\n最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。\n\nSpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。\n\n## SpringMVC请求流程图\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg)\n\n![](http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg)\nSpringMVC核心处理流程：\n1. DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器\n\n2. HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）\n\n3. HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）\n\n4. ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图\n\n5. 然后再将Model模型中的数据渲染到View上\n\n这些过程都是以DispatcherServlet为中轴线进行的.","slug":"SpringMVC源码分析/SpringMVC源码分析-核心分发器DispatcherServlet（请求转发）","published":1,"updated":"2017-06-07T08:37:31.361Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj3pbg21s000i14vexk553lkk","content":"<p></p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p><br>本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。<p></p>\n<p>原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。<br>以下是 Servlet 遵循的过程：</p>\n<ol>\n<li>Servlet 通过调用 init () 方法进行初始化。</li>\n<li>Servlet 调用 service() 方法来处理客户端的请求。</li>\n<li>Servlet 通过调用 destroy() 方法终止（结束）。</li>\n</ol>\n<p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p>\n<p>SpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。</p>\n<h2 id=\"SpringMVC请求流程图\"><a href=\"#SpringMVC请求流程图\" class=\"headerlink\" title=\"SpringMVC请求流程图\"></a>SpringMVC请求流程图</h2><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg\" alt=\"\"><br>SpringMVC核心处理流程：</p>\n<ol>\n<li><p>DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器</p>\n</li>\n<li><p>HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）</p>\n</li>\n<li><p>HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）</p>\n</li>\n<li><p>ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图</p>\n</li>\n<li><p>然后再将Model模型中的数据渲染到View上</p>\n</li>\n</ol>\n<p>这些过程都是以DispatcherServlet为中轴线进行的.</p>\n","excerpt":"","more":"<p><p align=\"center\"><br><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffxpu07otbj20go07r749.jpg\" alt=\"\"><br></p><br>本文将分析SpringMVC的核心分发器DispatcherServlet的处理请求的过程，让读者了解SpringMVC是如何处理请求的。</p>\n<p>原生的Servlet 生命周期可被定义为从创建直到毁灭的整个过程。<br>以下是 Servlet 遵循的过程：</p>\n<ol>\n<li>Servlet 通过调用 init () 方法进行初始化。</li>\n<li>Servlet 调用 service() 方法来处理客户端的请求。</li>\n<li>Servlet 通过调用 destroy() 方法终止（结束）。</li>\n</ol>\n<p>最后，Servlet 是由 JVM 的垃圾回收器进行垃圾回收的。</p>\n<p>SpringMVC的处理方式是基于Servlet的，所以也跳不出这个圈子。</p>\n<h2 id=\"SpringMVC请求流程图\"><a href=\"#SpringMVC请求流程图\" class=\"headerlink\" title=\"SpringMVC请求流程图\"></a>SpringMVC请求流程图</h2><p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzwfp78swj20nw0badgy.jpg\" alt=\"\"></p>\n<p><img src=\"http://ww1.sinaimg.cn/large/91ddf859gy1ffzylyzsszj212e0iqmxs.jpg\" alt=\"\"><br>SpringMVC核心处理流程：</p>\n<ol>\n<li><p>DispatcherServlet前端控制器接收发过来的请求，交给HandlerMapping处理器映射器</p>\n</li>\n<li><p>HandlerMapping处理器映射器，根据请求路径找到相应的HandlerAdapter处理器适配器（处理器适配器就是那些拦截器或Controller）</p>\n</li>\n<li><p>HandlerAdapter处理器适配器，处理一些功能请求，返回一个ModelAndView对象（包括模型数据、逻辑视图名）</p>\n</li>\n<li><p>ViewResolver视图解析器，先根据ModelAndView中设置的View解析具体视图</p>\n</li>\n<li><p>然后再将Model模型中的数据渲染到View上</p>\n</li>\n</ol>\n<p>这些过程都是以DispatcherServlet为中轴线进行的.</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj3pbg218000114vesv4jrsp0","category_id":"cj3pbg21d000314ve3co6irtd","_id":"cj3pbg21p000c14ve6ox89kpa"},{"post_id":"cj3pbg21b000214ve1tj1i0qm","category_id":"cj3pbg21l000814ven4kumzb2","_id":"cj3pbg21s000j14ve6sl5e6v3"},{"post_id":"cj3pbg21k000714ve5g5uoxwi","category_id":"cj3pbg21q000e14vecg9y0vv0","_id":"cj3pbg21v000n14vexxwchrrr"},{"post_id":"cj3pbg21m000b14verpwkda4r","category_id":"cj3pbg21s000k14veurzltv0u","_id":"cj3pbg21w000r14vevyppiabu"},{"post_id":"cj3pbg21p000d14vekk25gnhi","category_id":"cj3pbg21v000o14vetbkzhou6","_id":"cj3pbg220000v14veojs8yu7y"},{"post_id":"cj3pbg21r000g14ve7gmmjbq7","category_id":"cj3pbg21x000s14vecpec2i3y","_id":"cj3pbg222000z14ve8kzju5pw"},{"post_id":"cj3pbg21s000i14vexk553lkk","category_id":"cj3pbg21x000s14vecpec2i3y","_id":"cj3pbg223001214ve7u6zgvqu"}],"PostTag":[{"post_id":"cj3pbg218000114vesv4jrsp0","tag_id":"cj3pbg21f000414ve5wbar21n","_id":"cj3pbg21m000a14ve878xa4o6"},{"post_id":"cj3pbg21b000214ve1tj1i0qm","tag_id":"cj3pbg21l000914ve6itkdlcs","_id":"cj3pbg21r000h14veth9peija"},{"post_id":"cj3pbg21g000514vebuphthrz","tag_id":"cj3pbg21q000f14vexowhn8y3","_id":"cj3pbg21v000m14vefyzkw40g"},{"post_id":"cj3pbg21j000614verpupn5ol","tag_id":"cj3pbg21t000l14vemuwguq0t","_id":"cj3pbg21w000q14ve165qwa7g"},{"post_id":"cj3pbg21k000714ve5g5uoxwi","tag_id":"cj3pbg21w000p14ve7ypvacgr","_id":"cj3pbg21z000u14vemt2emx5n"},{"post_id":"cj3pbg21m000b14verpwkda4r","tag_id":"cj3pbg21q000f14vexowhn8y3","_id":"cj3pbg221000y14veupk1c26v"},{"post_id":"cj3pbg21p000d14vekk25gnhi","tag_id":"cj3pbg220000w14veybkuvyiw","_id":"cj3pbg223001114ve51b9uamu"},{"post_id":"cj3pbg21r000g14ve7gmmjbq7","tag_id":"cj3pbg222001014vee1dwde8o","_id":"cj3pbg225001414ve4iidrlp0"},{"post_id":"cj3pbg21s000i14vexk553lkk","tag_id":"cj3pbg222001014vee1dwde8o","_id":"cj3pbg226001514veuas1839x"}],"Tag":[{"name":"Git","_id":"cj3pbg21f000414ve5wbar21n"},{"name":"Maven","_id":"cj3pbg21l000914ve6itkdlcs"},{"name":"Mysql","_id":"cj3pbg21q000f14vexowhn8y3"},{"name":"工具","_id":"cj3pbg21t000l14vemuwguq0t"},{"name":"挂载硬盘","_id":"cj3pbg21w000p14ve7ypvacgr"},{"name":"Memcache","_id":"cj3pbg220000w14veybkuvyiw"},{"name":"SpringMVC源码分析","_id":"cj3pbg222001014vee1dwde8o"}]}}